[
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "0.01",
    "question": "The plates of a capacitor are charged to a potential difference of 5 V. If the capacitance is 2 mF, what is the charge on the positive plate?\nAnswer Choices: (A) 0.005 C (B) 0.01 C (C) 0.02 C (D) 0.5 C Let's write a program.",
    "output": "import math\n\n# define the variables\npotential_difference = 5  # in V\ncapacitance = 2  # in mF\n\n# convert capacitance to C\ncapacitance_in_C = capacitance * 10**-3  # in C\n\n# calculate the charge on the positive plate\ncharge_positive_plate = capacitance_in_C * potential_difference\n\n# print the result\nprint(charge_positive_plate)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": true,
    "gt": "A",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 295, in execute_code\n    code = black.format_str(code_str, mode=black.FileMode())\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1079, in format_str\n    dst_contents = _format_str_once(src_contents, mode=mode)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1089, in _format_str_once\n    src_node = lib2to3_parse(src_contents.lstrip(), mode.target_versions)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/parsing.py\", line 127, in lib2to3_parse\n    raise exc from None\nblack.parsing.InvalidInput: Cannot parse: 1:3: Let's calculate the electric field produced by a finite-length charged rod, an infinitely long charged cylinder, an infinite plane of charge and an infinitely long, straight current-carrying wire.\n",
    "question": "Which of these quantities decreases as the inverse square of distance for distances far from the objects producing the fields?\nAnswer Choices: (A) the electric field produced by a finite-length charged rod (B) the electric field produced by an infinitely long charged cylinder (C) the electric field produced by an infinite plane of charge (D) the magnetic field produced by an infinitely long, straight current-carrying wire Let's write a program.",
    "output": "Let's calculate the electric field produced by a finite-length charged rod, an infinitely long charged cylinder, an infinite plane of charge and an infinitely long, straight current-carrying wire.\n\nimport math\n\n# The electric field produced by a finite-length charged rod is inversely proportional to the distance squared\n# The electric field produced by an infinitely long charged cylinder is inversely proportional to the distance squared\n# The electric field produced by an infinite plane of charge is inversely proportional to the distance\n# The magnetic field produced by an infinitely long, straight current-carrying wire is inversely proportional to the distance squared\n\n# As the distance increases, the electric field decreases for all these cases except for the magnetic field\n\ndistance = 100 # in meters\n\nrod_electric_field = 1 / (distance**2)\ncylinder_electric_field = 1 / (distance**2)\nplane_electric_field = 1 / distance\nwire_magnetic_field = 1 / (distance**2)\n\n# Check which one decreases as the distance increases\n\nif rod_electric_field < cylinder_electric_field and rod_electric_field < plane_electric_field and rod_electric_field < wire_magnetic_field:\n    print(\"A\")\nelif cylinder_electric_field < rod_electric_field and cylinder_electric_field < plane_electric_field and cylinder_electric_field < wire_magnetic_field:\n    print(\"B\")\nelif plane_electric_field < rod_electric_field and plane_electric_field < cylinder_electric_field and plane_electric_field < wire_magnetic_field:\n    print(\"C\")\nelse:\n    print(\"D\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "{q: charge**2/100}",
    "question": "A solid, metal object is isolated from other charges and has charge distributed on its surface. The charge distribution is not uniform. It may be correctly concluded that the\nAnswer Choices: (A) electric field outside the object is zero (B) the electric field outside the object is equal to the electric field inside the object (C) the electric field outside the object is directly proportional to the distance away from the center of mass of the object (D) the electric field outside the object, but very close to the surface, is equal to the surface charge density at any location divided by the permittivity of free space Let's write a program.",
    "output": "from sympy import symbols, Eq, solve\r\n\r\n# charge = total charge, q = small change in charge\r\ncharge, q = symbols('charge, q')\r\n\r\n# The charge distribution is not uniform. \r\n# It may be correctly concluded that the electric field outside the object is directly proportional to the distance away from the center of mass of the object\r\neq = Eq(q, (charge/10)**2)\r\n\r\nanswer = solve(eq)\r\n\r\nprint(answer[0])",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "C",
    "err": false,
    "question": "Standing waves are produced by a 100-Hz generator in a string of fixed length. The tension in the string is increased until a new set of standing waves is produced. Will the wavelength of the new standing waves be greater than or less than the wavelength of the original standing waves?\nAnswer Choices: (A) Less, because the tension in the string varies directly with the wave speed, which varies inversely with the wavelength. (B) Greater, because the tension in the string varies directly with the wave speed, which varies inversely with the wavelength. (C) Greater, because the tension in the string varies directly with the wave speed, which varies directly with the wavelength. (D) Less, because the tension in the string varies directly with the wave speed, which varies directly with the wavelength. Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nT = sp.symbols('T')\nL = sp.symbols('L')\nv = sp.symbols('v')\nlambda_ = sp.symbols('lambda_')\n\n# The speed of the wave is given by the formula v = sqrt(T/L)\n# The wavelength is given by the formula lambda_ = v/f\n\n# Since the tension T and the frequency f are constants, the speed v and the wavelength lambda_ are inversely proportional.\n# Therefore, when T increases, v increases and lambda_ decreases.\n\n# The answer is A.",
    "correct": false
  },
  {
    "ans": "C",
    "gt": "D",
    "err": false,
    "question": "Two identical capacitors are hooked in parallel to an external circuit. Which of the following quantities must be the same for both capacitors? I. the charge stored on the capacitor II.  the voltage across the capacitor III. the capacitance of the capacitor\nAnswer Choices: (A) I only (B) II only (C) II and III only (D) (E) I, II, and III Let's write a program.",
    "output": "Let's think about the multi-choice question step by step.\nLet's say that the capacitance of one capacitor is C. Therefore, the capacitance of the other capacitor is also C.\nNow, let's say that the charge stored in one capacitor is Q. Therefore, the charge stored in the second capacitor is also Q.\nThe voltage across the capacitors are by definition, the same.\nTherefore, The answer is C.",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "C",
    "raw_ans": "0.8",
    "question": "A 1-kg object is released from rest at the top of a rough-surfaced incline. The object slides without rotating to the bottom of the incline. The object\u2019s kinetic energy at the bottom must be\nAnswer Choices: (A) Equal to the block\u2019s gravitational potential energy when it was released, because total mechanical energy must be conserved. (B) Equal to the block\u2019s gravitational potential energy when it was released, because the gain in kinetic energy compensates for the mechanical energy lost to thermal energy on the rough incline. (C) Less than the block\u2019s gravitational potential energy when it was released, because the gravitational potential energy was converted both to thermal energy and to kinetic energy. (D) Less than the block\u2019s gravitational potential energy when it was released, because the work done by the friction force must be greater than the block\u2019s gain in kinetic energy. Let's write a program.",
    "output": "total_mechanical_energy_conserved=1\nmechanical_energy_lost_to_thermal=0.2\nkinetic_energy_at_bottom=total_mechanical_energy_conserved-mechanical_energy_lost_to_thermal\nprint(kinetic_energy_at_bottom)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "A",
    "err": false,
    "question": "A student is experimenting with a simple spring-block oscillator of spring constant k and amplitude A. The block attached to the spring has a mass of m. If the student places a small block of mass m on top of the original block, which of the following is true?\nAnswer Choices: (A) The small block is most likely to slide off when the original block is at maximum displacement from the equilibrium position, but will not slide off as long as the coefficient of static friction between the blocks is greater than kA/[(M+m)g]. (B) The small block is most likely to slide off when the original block is at the equilibrium position, but will not slide off as long as the coefficient of static friction between the blocks is greater than kA/[(M+m)g]. (C) The small block is most likely to slide off when the original block is at maximum displacement from the equilibrium position, but will not slide off as long as the coefficient of static friction between the blocks is greater than (M+m)g/(kA). (D) The small block is most likely to slide off when the original block is at the equilibrium position, but will not slide off as long as the coefficient of static friction between the blocks is greater than (M+m)g/(kA). Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nm, M, k, A = sp.symbols('m M k A')\n\n# The maximum displacement from the equilibrium position is when the original block is at the amplitude A.\n# The force from the spring is k*A, and the force from the static friction is mg*mu, where mu is the coefficient of static friction.\n# The block will slide off when the maximum force from the spring is less than the minimum force from the static friction,\n# which is when k*A < mg*mu.\n\n# The student places a small block of mass m on top of the original block. \n# The force from the spring is now (m+M)*A, and the force from the static friction is (m+M)*g*mu.\n# The block will slide off when the maximum force from the spring is less than the minimum force from the static friction,\n# which is when (m+M)*A < (m+M)*g*mu.\n\n# Simplify the condition for sliding off\nsliding_off_condition = sp.simplify(k*A < m*sp.sqrt(sp.pi*sp.sqrt(2)))\n\n# The answer is A.",
    "correct": true
  },
  {
    "ans": "B",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 12, in run_it\nAttributeError: module 'math' has no attribute 'abs'\n",
    "question": "How much work is required to charge a 10 \u00b5F capacitor to a potential difference of 100 V ?\nAnswer Choices: (A) 0.005 J (B) 0.01 J (C) 0.05 J (D) 0.1 J Let's write a program.",
    "output": "import math\n\n# define the variables\ncapacitance = 10  # in \u00b5F\npotential_difference = 100  # in V\n\n# calculate the charge\ncharge = capacitance * potential_difference\n\n# calculate the work\nwork = math.abs(charge)\n\nprint(work)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "A",
    "raw_ans": "m*v0**2/(g*\u03bc)",
    "question": "A box of mass m slides on a horizontal surface with initial speed v0. It feels no forces other than gravity and the force from the surface. If the coefficient of kinetic friction between the box and the surface is \u03bc, how far does the box slide before coming to rest?\nAnswer Choices: (A) v0^2/(2\u03bcg) (B) v0^2/(\u03bcg) (C) 2v0^2/(\u03bcg) (D) mv0^2/(\u03bcg) Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nm, v0, \u03bc, g = sp.symbols('m v0 \u03bc g')\n\n# calculate the distance\ndistance = (m * v0**2) / (\u03bc * g)\n\n# print the result\nprint(distance)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "B",
    "raw_ans": "23.09401076758503",
    "question": "A soccer ball, at rest on the ground, is kicked with an initial velocity of 10 m/s at a launch angle of 30\u00b0. Calculate its total flight time, assuming that air resistance is negligible.\nAnswer Choices: (A) 0.5 s (B) 1 s (C) 2 s (D) 4 s Let's write a program.",
    "output": "import math\n\n# define the initial velocity and the launch angle\nv0 = 10  # m/s\ntheta = 30  # degrees\n\n# convert the launch angle to radians\ntheta = math.radians(theta)\n\n# calculate the total flight time\nt_total = 2 * v0 / (math.cos(theta))\n\nprint(t_total)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "gt": "D",
    "err": false,
    "question": "Two identical containers are filled with different gases. Container 1 is filled with hydrogen and container 2 is filled with nitrogen. Each container is set on a lab table and allowed to come to thermal equilibrium with the room. Which of the following correctly compares the properties of the two gases?\nAnswer Choices: (A) The average kinetic energy of the hydrogen gas is greater than the nitrogen gas. (B) The average force exerted on the container by the hydrogen gas is greater than the nitrogen gas. (C) The density of the hydrogen gas is less than the nitrogen gas. (D) The pressures of the gases cannot be compared without knowing the number of molecules in each container. Let's write a program.",
    "output": "import numpy as np\n\n# Define the number of molecules and the gas constant for each gas\nnum_molecules_H2 = 1\nnum_molecules_N2 = 1\nR_H2 = 2\nR_N2 = 28\n\n# Calculate the pressure for each gas\nP_H2 = num_molecules_H2 * R_H2\nP_N2 = num_molecules_N2 * R_N2\n\n# Compare the pressures\nif P_H2 > P_N2:\n    print('A')\nelse:\n    print('D')",
    "correct": true
  },
  {
    "ans": "B",
    "gt": "D",
    "err": false,
    "question": "A girl of mass m and a boy of mass 2m are sitting on opposite sides of a see-saw with its fulcrum in the center. Right now, the boy and girl are equally far from the fulcrum, and it tilts in favor of the boy. Which of the following would NOT be a possible method to balance the see-saw?\nAnswer Choices: (A) Move the boy to half his original distance from the fulcrum. (B) Move the girl to double her original distance from the fulcrum. (C) Allow a second girl of mass m to join the first. (D) Move the fulcrum to half its original distance from the boy. Let's write a program.",
    "output": "import math\n\n# Define the masses\nm_girl = 1\nm_boy = 2\n\n# The distance of the boy and girl from the fulcrum is the same initially\n# As the see-saw is balanced, the torques on both sides of the see-saw are equal\n# Therefore, the moment of the boy is equal to the moment of the girl\n# Let's denote the initial distance of the boy and girl from the fulcrum as x\n# Then, the moment of the boy is x*m_boy and the moment of the girl is x*m_girl\n# Setting these equal, we get x*m_boy = x*m_girl\n# Solving for x, we get x = m_boy/m_girl\n\n# Initial distance of the boy from the fulcrum\nx_initial = m_boy / m_girl\n\n# A. Move the boy to half its original distance from the fulcrum\nx_A = x_initial / 2\n# The see-saw will be balanced if the moments of the boy and girl are equal\n# Therefore, we should move the girl to double her original distance from the fulcrum\n# Let's denote the new distance of the girl from the fulcrum as y\n# Then, the moment of the boy is x_A*m_boy and the moment of the girl is y*m_girl\n# Setting these equal, we get x_A*m_boy = y*m_girl\n# Solving for y, we get y = x_A*m_boy / m_girl\n\n# Calculate the new distance of the girl from the fulcrum\ny_A = x_A * m_boy / m_girl\n\n# B. Move the girl to double her original distance from the fulcrum\nx_B = 2 * x_initial\n# The see-saw will be balanced if the moments of the boy and girl are equal\n# Therefore, we should move the boy to half its original distance from the fulcrum\n# Let's denote the new distance of the boy from the fulcrum as z\n# Then, the moment of the boy is z*m_boy and the moment of the girl is x_B*m_girl\n# Setting these equal, we get z*m_boy = x_B*m_girl\n# Solving for z, we get z = x_B*m_girl / m_boy\n\n# Calculate the new distance of the boy from the fulcrum\nz_B = x_B * m_girl / m_boy\n\n# C. Allow a second girl of mass m to join the first\n# The see-saw will be balanced if the moments of the boy, the first girl, and the second girl are equal\n# Therefore, we should move the second girl to double the distance of the first girl from the fulcrum\n# Let's denote the distance of the second girl from the fulcrum as w\n# Then, the moment of the boy is z_B*m_boy, the moment of the first girl is y_A*m_girl, and the moment of the second girl is w*m_girl\n# Setting these equal, we get z_B*m_boy + y_A*m_girl = w*m_girl\n# Solving for w, we get w = (z_B*m_boy + y_A*m_girl) / m_girl\n\n# Calculate the new distance of the second girl from the fulcrum\nw = (z_B*m_boy + y_A*m_girl) / m_girl\n\n# D. Move the fulcrum to half its original distance from the boy\n# The see-saw will be balanced if the moments of the boy and girl are equal\n# Therefore, we should move the girl to double her original distance from the fulcrum\n# Let's denote the new distance of the girl from the fulcrum as v\n# Then, the moment of the boy is x_initial*m_boy and the moment of the girl is v*m_girl\n# Setting these equal, we get x_initial*m_boy = v*m_girl\n# Solving for v, we get v = x_initial*m_boy / m_girl\n\n# Calculate the new distance of the girl from the fulcrum\nv = x_initial * m_boy / m_girl\n\n# The answer is B",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "-2.454545454545439",
    "question": "When hot water is poured into a beaker containing cold alcohol, the temperature of the mixture will eventually reach the same temperature. Considering the scale of the size of the molecules of the fluids, which of the following is the primary reason for this phenomenon?\nAnswer Choices: (A) The high temperature water will rise to the top of the container until it has cooled and then mixes with the alcohol. (B) The molecules of the water continue to have a higher kinetic energy than the molecules of the alcohol, but the two liquids mix until the energy is spread evenly throughout the container. (C) The hot water produces thermal radiation that is absorbed by the cold alcohol until the kinetic energy of all the molecules is the same. (D) The water molecules collide with the alcohol molecules, transferring energy until the average kinetic energy of both the water and alcohol molecules are the same. Let's write a program.",
    "output": "import numpy as np\n\n# Define the temperatures of the water and alcohol\nT_water = 300  # in Kelvin\nT_alcohol = 273  # in Kelvin\n\n# Define the number of molecules in the water and alcohol\nN_water = 1000000  # in number of molecules\nN_alcohol = 100000  # in number of molecules\n\n# Calculate the total energy of the water and alcohol\nE_water = N_water * np.average(T_water)  # in Joules\nE_alcohol = N_alcohol * np.average(T_alcohol)  # in Joules\n\n# Calculate the total energy of the system\nE_total = E_water + E_alcohol\n\n# Calculate the average temperature of the system\nT_avg = E_total / (N_water + N_alcohol)\n\n# Calculate the difference in temperature\ndelta_T = T_avg - np.average(T_water)\n\n# Print the result\nprint(delta_T)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "2.0",
    "question": "A solid sphere (I = 0.06 kg\u00b7m^2) spins freely around an axis through its center at an angular speed of 20 rad/s. It is desired to bring the sphere to rest by applying a friction force of magnitude 2.0 N to the sphere\u2019s outer surface, a distance of 0.30 m from the sphere\u2019s center. How much time will it take the sphere to come to rest?\nAnswer Choices: (A) 4 s (B) 2 s (C) 0.06 s (D) 0.03 s Let's write a program.",
    "output": "import math\n\n# define the variables\nI = 0.06  # moment of inertia\nomega = 20  # angular speed\n\n# calculate the angular momentum\nL = I * omega\n\n# calculate the friction torque\ntau = 2 * 0.3  # 2 N force at 0.3 m from the center\n\n# calculate the time required to bring the sphere to rest\n# t = (L - L_final) / tau\nt = (L - 0) / tau\n\nprint(t)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": true,
    "gt": "B",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 13, in run_it\nNameError: name 'G' is not defined\n",
    "question": "The radius of Mars is about half that of Earth; the mass of Mars is about one-tenth that of Earth. Which of the following is closest to the gravitational field at the surface of Mars?\nAnswer Choices: (A) 10 N/kg (B) 4 N/kg (C) 2 N/kg (D) 0.5 N/kg Let's write a program.",
    "output": "import math\n\n# define the variables\nM_earth = 5.972e24  # mass of Earth in kg\nR_earth = 6371  # radius of Earth in km\nR_mars = R_earth / 2  # radius of Mars in km\n\n# calculate the mass of Mars\nM_mars = M_earth / 10\n\n# calculate the gravitational field at the surface of Mars\ng_mars = (G * M_mars) / R_mars**2\n\n# print the result\nprint(round(g_mars, 2))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "A",
    "raw_ans": "Abs(sigma/epsilon_o)/2",
    "question": "Above an infinitely large plane carrying charge density \u03c3, the electric field points up and is equal to \u03c3/2\u03b5o. What is the magnitude and direction of the electric field below the plane?\nAnswer Choices: (A) \u03c3/2\u03b5o, down (B) \u03c3/2\u03b5o, up (C) \u03c3/\u03b5o, down (D) \u03c3/\u03b5o, up Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nsigma = sp.symbols('sigma')\nepsilon_o = sp.symbols('epsilon_o')\n\n# define the electric field above the plane\nE_above = sigma / (2 * epsilon_o)\n\n# the electric field below the plane is equal in magnitude but opposite in direction\nE_below = -E_above\n\n# calculate the magnitude of the electric field\nmagnitude_E_below = abs(E_below)\n\n# print the result\nprint(magnitude_E_below)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "1e+18",
    "question": "A beam of electrons has speed 10^7 m/s. It is desired to use the magnetic field of the Earth, 5 \u00d7 10\u22125 T, to bend the electron beam into a circle. What will be the radius of this circle?\nAnswer Choices: (A) 1 nm (B) 1 \u03bcm (C) 1 mm (D) 1 m Let's write a program.",
    "output": "B = 5 * 10**-5 # Tesla\nE = 10**7 # M/s\n\nr = (E**2) / (2 * B)\n\nprint(r)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "200",
    "question": "An object is placed 100 cm from a plane mirror. How far is the image from the object?\nAnswer Choices: (A) 50 cm (B) 100 cm (C) 200 cm (D) 300 cm Let's write a program.",
    "output": "distance_from_object = 100\r\ndistance_from_mirror = 100\r\n\r\n# The image is formed behind the mirror and is 100 cm away from the object\r\n# So the total distance from the mirror is the distance from the object plus the distance from the mirror\r\n\r\ndistance_from_image = distance_from_object + distance_from_mirror\r\n\r\nprint(distance_from_image)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": true,
    "gt": "A",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 22, in run_it\nTypeError: list indices must be integers or slices, not Symbol\n",
    "question": "A horse is attached to a cart that is at rest behind it. Which force, or combination of forces, explains how the horse-cart system can accelerate from rest?\nAnswer Choices: (A) The forward static friction force of the ground on the horse is greater than any friction forces acting backward on the cart, providing a forward acceleration. (B) The forward force of the horse on the cart is greater than the backward force of the cart on the horse, providing a forward acceleration. (C) The force of the horse\u2019s muscles on the rest of the horse-cart system provides the necessary acceleration. (D) The upward normal force of the ground on the horse is greater than the horse\u2019s weight, providing an upward acceleration. Let's write a program.",
    "output": "from sympy import Eq, Symbol, solve\r\n\r\n# a = acceleration, v = velocity, x = position\r\na, v, x = Symbol('a'), Symbol('v'), Symbol('x')\r\n\r\n# For a body at rest, the acceleration is equal to the net force acting on the body divided by the mass\r\n# So the net force is equal to the mass times the acceleration\r\n\r\n# Equation 1: ma = F\r\neq1 = Eq(a, (x - v)/(1))\r\n\r\n# The force of the horse on the cart is greater than the backward force of the cart on the horse\r\n# So the net force is in the forward direction\r\n\r\n# Equation 2: F = F1 - F2\r\n# Where F1 is the forward force of the horse on the cart and F2 is the backward force of the cart on the horse\r\neq2 = Eq(a, (1*a - 2)/(1))\r\n\r\nanswer = solve((eq1, eq2), (a, v, x))\r\n\r\nprint(answer[a])",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "-117",
    "question": "In a certain region, the electric field varies with the radius away from origin by the equation Er = \u20136r^2 + 4r + 3, where r is given in meters and E in N/C. The potential difference between the origin and the point (3, 4) is\nAnswer Choices: (A) \u2013165 V (B) \u2013120 V (C) 64 V (D) 185 V Let's write a program.",
    "output": "import math\n\n# define the variables\nr = 3\n\n# calculate the electric field\nEr = -6*r**2 + 4*r + 3\n\n# calculate the potential difference\npotential_difference = Er * r\n\nprint(potential_difference)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "B",
    "raw_ans": "300",
    "question": "A gas undergoes an expansion-compression cycle. If, plotted on a P-V diagram, the cycle is counterclockwise and the work is 300 J in magnitude, what was the heat transfer during this cycle?\nAnswer Choices: (A) 300 J into the system (B) 300 J out of the system (C) 600 J into the system (D) 600 J out of the system Let's write a program.",
    "output": "cycle_direction = 'counterclockwise'\nwork = 300\nif cycle_direction == 'clockwise':\n    heat_transfer = -work\nelif cycle_direction == 'counterclockwise':\n    heat_transfer = work\nprint(heat_transfer)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "1/2",
    "question": "An ideal battery of constant voltage V supplies current to a circuit that has total resistance R. If R is doubled, what will happen to the total power dissipated by the circuit?\nAnswer Choices: (A) It will double. (B) It will quadruple. (C) It will be halved. (D) It will remain the same. Let's write a program.",
    "output": "import sympy as sp\n\n# define the symbols\nV, R = sp.symbols('V R')\n\n# calculate the power before and after doubling R\npower_before = V**2 / R\npower_after = V**2 / (2*R)\n\n# calculate the ratio of the two powers\nratio = power_after / power_before\n\n# it can be seen that the power will be halved\nprint(ratio)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": true,
    "gt": "A",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in run_it\nAttributeError: module 'math' has no attribute 'speed_of_light'\n",
    "question": "Ultraviolet light has a wavelength of about 6 \u00d7 10^-8 m. What is the frequency of this light?\nAnswer Choices: (A) 5 \u00d7 10^15 Hz (B) 0.5 Hz (C) 2 Hz (D) 20 Hz Let's write a program.",
    "output": "import math\n\n# define the wavelength\nwavelength = 6 * 10**-8\n\n# calculate the frequency using the formula frequency = speed of light / wavelength\nfrequency = math.speed_of_light / wavelength\n\n# print the result\nprint(frequency)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 32, in <module>\n  File \"<string>\", line 15, in run_it\nNameError: name 'B' is not defined\n",
    "question": "Each of the following ionized isotopes is projected with the same speed into a uniform magnetic field B such that the isotope's initial velocity is perpendicular to B. Which combination of mass and charge would result in a circular path with the largest radius?\nAnswer Choices: (A) m = 16 u, q = \u20135 e (B) m = 17 u, q = \u20134 e (C) m = 18 u, q = \u20133 e (D) m = 20 u, q = \u20131 e Let's write a program.",
    "output": "import math\n\n# define the masses and charges\nm_A = 16\nq_A = -5\nm_B = 17\nq_B = -4\nm_C = 18\nq_C = -3\nm_D = 20\nq_D = -1\n\n# calculate the radii using the formula for the radius of a circular path in a magnetic field\nr_A = math.sqrt((m_A * q_A) / (2 * math.pi * B))\nr_B = math.sqrt((m_B * q_B) / (2 * math.pi * B))\nr_C = math.sqrt((m_C * q_C) / (2 * math.pi * B))\nr_D = math.sqrt((m_D * q_D) / (2 * math.pi * B))\n\n# find the combination with the largest radius\nmax_radius = max(r_A, r_B, r_C, r_D)\n\n# print the result\nif max_radius == r_A:\n    print(\"A\")\nelif max_radius == r_B:\n    print(\"B\")\nelif max_radius == r_C:\n    print(\"C\")\nelse:\n    print(\"D\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "2.5e-06",
    "question": "An electric dipole consists of a pair of equal but opposite point charges of magnitude 4.0 nC separated by a distance of 2.0 cm. What is the electric field strength at the point midway between the charges?\nAnswer Choices: (A) 0 (B) 9.0 \u00d7 10^4 N/C (C) 1.8 \u00d7 10^5 N/C (D) 7.2 \u00d7 10^5 N/C Let's write a program.",
    "output": "import math\n\n# define the charges and distance\nq = 4.0e-9 # in Coulomb\nd = 2.0e-2 # in metres\n\n# calculate the electric field at the midpoint\nE = (q/d**2) * (1/4) # in N/C\n\nprint(E)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "Thermal energy moves from high concentration areas (hot) to low concentration areas (cold)",
    "question": "A person can stand outside on a cold day for hours without ill effect, but falling into a cold lake can kill a person in a matter of minutes. Which of the following is the primary reason for this phenomenon?\nAnswer Choices: (A) The molecules of the person are, on average, moving faster than those of the surroundings. (B) Thermal energy moves from high concentration areas (hot) to low concentration areas (cold). (C) As heat flows out of the person and warms the fluid surrounding the person, the warmer fluid rises, allowing fresh cool fluid to come in contact with the person and increasing the rate of heat transfer. (D) Water has more molecules per volume than air, increasing molecular contact with the person. Let's write a program.",
    "output": "def heat_transfer():\n    person = 1\n    fluid = 0\n    if person > fluid:\n        return \"Thermal energy moves from high concentration areas (hot) to low concentration areas (cold).\"\n    else:\n        return \"Water has more molecules per volume than air, increasing molecular contact with the person.\"\n\nprint(heat_transfer())",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "C",
    "raw_ans": "0.8835729338221293",
    "question": "A liquid flows at a constant flow rate through a pipe with circular cross-sections of varying diameters. At one point in the pipe, the diameter is 2 cm and the flow speed is 18 m/s. What is the flow speed at another point in this pipe, where the diameter is 3 cm?\nAnswer Choices: (A) 4 m/s (B) 6 m/s (C) 8 m/s (D) 12 m/s Let's write a program.",
    "output": "import math\n\n# define the variables\nd1 = 2 # diameter 1 in cm\nd2 = 3 # diameter 2 in cm\nv1 = 18 # flow speed at diameter 1 in m/s\n\n# calculate the flow speed at diameter 2\nv2 = (math.pi * math.pow(d2, 4)) / (math.pow(d1, 4) * v1)\n\n# print the result\nprint(v2)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "4.0",
    "question": "An ideal fluid flows through a pipe with radius Q and flow speed V. If the pipe splits up into three separate paths, each with radius (Q/2), what is the flow speed through each of the paths?\nAnswer Choices: (A) 1/3 V (B) 2/3 V (C) 4/3 V (D) 4V Let's write a program.",
    "output": "import math\n\n# define the radius and velocity of the fluid\nQ = 2  # radius of the pipe\nV = 3  # velocity of the fluid\n\n# calculate the volume of the pipe\nvolume_of_pipe = math.pi * Q**2 * V\n\n# calculate the volume of each branch\nvolume_of_branch = volume_of_pipe / 3\n\n# calculate the velocity of each branch\nV_branch = volume_of_branch / (math.pi * (Q/2)**2)\n\nprint(V_branch)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "D",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 295, in execute_code\n    code = black.format_str(code_str, mode=black.FileMode())\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1079, in format_str\n    dst_contents = _format_str_once(src_contents, mode=mode)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1089, in _format_str_once\n    src_node = lib2to3_parse(src_contents.lstrip(), mode.target_versions)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/parsing.py\", line 127, in lib2to3_parse\n    raise exc from None\nblack.parsing.InvalidInput: Cannot parse: 17:0: print(\"Conservation of energy indicates that the antimatter positron could annihilate into energy, leaving the stationary electron behind.\")\n",
    "question": "A very slow-moving positron interacts with a stationary electron. Which of the following statements correctly describes a possible outcome of this reaction and why it would occur?\nAnswer Choices: (A) Conservation of mass indicates that if a single new particle were created in the reaction, it must have a total mass equal to the combined masses of the electron and positron. (B) Conservation of charge indicates that all new particles created in the reaction would have no electric charge. (C) Conservation of momentum indicates that two identical gamma rays moving off in opposite directions could be created. (D) Conservation of energy indicates that the antimatter positron could annihilate into energy, leaving the stationary electron behind. Let's write a program.",
    "output": "from sympy import symbols, Eq, solve\n\n# define the symbols\nEp, Ee = symbols('Ep Ee')\n\n# energy conservation\neq1 = Eq(Ep + Ee, 2*Eg)\n\n# momentum conservation\neq2 = Eq(0, 2*Eg)\n\n# solve the equations\nsolution = solve((eq1, eq2), (Ep, Ee))\n\n# check if the positron can annihilate into energy\nif solution[Ep] > 0:\nprint(\"Conservation of energy indicates that the antimatter positron could annihilate into energy, leaving the stationary electron behind.\")\nelse:\nprint(\"Conservation of energy indicates that the antimatter positron could not annihilate into energy.\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "gt": "D",
    "err": false,
    "question": "A box sits on an inclined plane without sliding. As the angle of the plane (measured from the horizontal) increases, the normal force\nAnswer Choices: (A) increases linearly (B) decreases linearly (C) does not change (D) decreases nonlinearly Let's write a program.",
    "output": "import sympy as sp\n\n# define the angle of the plane\nangle = sp.symbols('angle')\n\n# calculate the normal force (which is the weight of the box)\nnormal_force = sp.sin(angle)\n\n# as the angle increases, the normal force...\n# A. increases linearly B. decreases linearly C. does not change D. decreases nonlinearly\n\n# The answer is B",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "sqrt(2)*sqrt(v**2)",
    "question": "A small cart of mass m is initially at rest. It collides elastically with a large cart of mass 4m and velocity v. The large cart loses half its kinetic energy to the little cart. The little cart now has a velocity of\nAnswer Choices: (A) 1.41v (B) v (C) 2v (D) 4v Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nm, v = sp.symbols('m v')\n\n# initial energy of the large cart\nE_large = 4*m*v**2/2\n\n# final energy of the large cart\nE_large_final = 4*m*v**2/4\n\n# energy transferred to the small cart\nE_small = E_large - E_large_final\n\n# velocity of the small cart\nv_small = sp.sqrt(2*E_small/m)\n\n# print the result\nprint(v_small)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "C",
    "raw_ans": "-initial_charge",
    "question": "A circuit consists of a battery and a light bulb. At first, the circuit is disconnected. Then, the circuit is connected, and the light bulb lights. After the light bulb has been lit for a few moments, how has the net charge residing on the circuit elements changed?\nAnswer Choices: (A) The net charge has become more positive. (B) The net charge has become more negative. (C) The net charge has not changed. (D) Whether the net charge becomes more positive or more negative depends on the initial net charge residing on the circuit elements before the bulb was lit. Let's write a program.",
    "output": "import sympy as sp\n\n# Define the initial charge as a variable\ninitial_charge = sp.symbols('initial_charge')\n\n# The final charge is 0 because the bulb lit up\nfinal_charge = 0\n\n# The change in charge is the final minus the initial\nchange_in_charge = final_charge - initial_charge\n\n# Simplify the change in charge\nchange_in_charge = sp.simplify(change_in_charge)\n\n# Print the result\nprint(change_in_charge)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "B",
    "err": false,
    "question": "If the force of gravity between the Moon and the Earth were to stop, which statement best describes the resulting motion of the moon?\nAnswer Choices: (A) It would continue rotating on its axis, and it would revolve around the Earth as usual. (B) It would continue rotating on its axis, but it would stop revolving around the Earth. (C) It would stop rotating on its axis, but it would revolve around the Earth as usual. (D) It would stop rotating on its axis, and it would stop revolving around the Earth. Let's write a program.",
    "output": "import math\n\n# define the variables\nG = 6.67408e-11  # universal gravitational constant\nM_E = 5.9724e24  # mass of the Earth\nM_M = 7.3477e22  # mass of the Moon\nr = 3.844e8  # distance between the Earth and the Moon\n\n# calculate the force of gravity\nF = G * M_E * M_M / r**2\n\n# calculate the angular momentum of the Moon around its axis\nL = F * r\n\n# the motion of the Moon will not change if there is no force of gravity\n# the motion of the Moon is determined by its angular momentum\n# if L = 0, the Moon will stop rotating on its axis\n# if L = 0 and r = 0, the Moon will stop revolving around the Earth\n\nprint(\"A\" if L != 0 else \"D\")",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "[4]",
    "question": "A person stands on a scale in an elevator. He notices that the scale reading is less than his usual weight. Which of the following could possibly describe the motion of the elevator?\nAnswer Choices: (A) It is moving downward and slowing down. (B) It is moving upward and slowing down. (C) It is moving upward at a constant speed. (D) It is moving downward at a constant speed. Let's write a program.",
    "output": "from sympy import Eq, Symbol, solve\r\n\r\n# x = reading of scale\r\nx = Symbol('x')\r\neq = Eq((x-4), 0)\r\n\r\nanswer = solve(eq)\r\n\r\nprint(answer)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 33, in <module>\n  File \"<string>\", line 23, in run_it\nIndexError: list index out of range\n",
    "question": "A whiffle ball is tossed straight up, reaches a highest point, and falls back down. Air resistance is not negligible. Which of the following statements are true?\nI. The ball\u2019s speed is zero at the highest point.\nII. The ball\u2019s acceleration is zero at the highest point.\nIII. The ball takes a longer time to travel up to the highest point than to fall back down.\nAnswer Choices: (A) I only (B) II only (C) I & II only (D) I & III only Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nt, h = sp.symbols('t h')\n\n# define the equations for the ball's speed and acceleration\nspeed = sp.sqrt(2*9.8*h)\nacceleration = -9.8\n\n# the speed and acceleration are functions of time and height\n# at the highest point, the speed and acceleration are zero\n# the time to reach the highest point is when the speed is zero\n# the time to fall back down is when the speed is zero plus the time to reach the highest point\n\n# define the equation for the speed being zero\neq_speed = sp.Eq(speed, 0)\n\n# solve the equation for the time to reach the highest point\nsolution_speed = sp.solve(eq_speed, t)\n\n# the time to fall back down is twice the time to reach the highest point\nsolution_time = 2*solution_speed[0]\n\n# the acceleration is not zero at the highest point\neq_acceleration = sp.Eq(acceleration, 0)\n\n# the statement III is true\n# the ball takes a longer time to travel up to the highest point than to fall back down\n\n# print the statements that are true\nprint(\"I & III only\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 4, in <module>\n  File \"<string>\", line 2, in run_it\nNameError: name 'LM' is not defined\n",
    "question": "If L, M, and T denote the dimensions of length, mass, and time, respectively, what are the dimensions of impulse?\nAnswer Choices: (A) LM/T^3 (B) LM/T^2 (C) LM/T (D) L^2M/T^2 Let's write a program.",
    "output": "impulse = LM/T\nprint(impulse)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "C",
    "raw_ans": "9294228.634059947",
    "question": "Traveling at an initial speed of 1.5 \u00d7 10^6 m/s, a proton enters a region of constant magnetic field of magnitude 1.5 T. If the proton's initial velocity vector makes an angle of 30\u00b0 with the magnetic field, compute the proton's speed 4 s after entering the magnetic field.\nAnswer Choices: (A) 5.0 \u00d7 10^6 m/s (B) 7.5 \u00d7 10^6 m/s (C) 1.5 \u00d7 10^6 m/s (D) 3.0 \u00d7 10^6 m/s Let's write a program.",
    "output": "import math\n\n# define the initial speed\nv_initial = 1.5 * 10**6  # m/s\n\n# define the magnitude of the magnetic field\nB = 1.5  # T\n\n# define the angle between the initial velocity vector and the magnetic field\ntheta = 30  # degrees\n\n# convert the angle to radians\ntheta = math.radians(theta)\n\n# calculate the initial velocity in the direction of the magnetic field\nv_initial_parallel = v_initial * math.cos(theta)\n\n# calculate the acceleration due to the magnetic field\na = B * v_initial_parallel  # m/s^2\n\n# calculate the speed after 4 seconds\nt = 4  # seconds\nv_final = v_initial + a * t\n\nprint(v_final)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "D",
    "err": false,
    "question": "A man stands on a platform scale in an elevator. The elevator moves upward, speeding up. What is the action-reaction force pair to the man\u2019s weight?\nAnswer Choices: (A) The force of the elevator cable on the man (B) The force of the man on the scale (C) The force of the elevator cable on the elevator (D) The force of the man on the Earth Let's write a program.",
    "output": "elevator_cable=1\r\nman_on_scale=2\r\nforce_man_on_elevator_cable=3\r\nforce_elevator_on_man=4\r\nif elevator_cable==1:\r\n  print(\"A\")\r\nelif man_on_scale==2:\r\n  print(\"B\")\r\nelif force_man_on_elevator_cable==3:\r\n  print(\"C\")\r\nelse:\r\n  print(\"D\")\r",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "A",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 2, in run_it\nModuleNotFoundError: No module named 'sympy.physics.thermodynamics'\n",
    "question": "During an isothermal expansion, a confined ideal gas does 150 J of work against its surroundings. Which of the following describes the heat transfer during this process?\nAnswer Choices: (A) 150 J of heat was added to the gas. (B) 150 J of heat was removed from the gas. (C) 300 J of heat was added to the gas. (D) 300 J of heat was removed from the gas. Let's write a program.",
    "output": "from sympy.physics.thermodynamics import Work, Heat\n\n# define the work\nwork = Work(150)\n\n# calculate the heat transfer\nheat = -work\n\n# print the result\nprint(Heat(heat).to_kJ())",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "6.25e+18",
    "question": "An object carries a charge of \u20131 C. How many excess electrons does it contain?\nAnswer Choices: (A) 6.25 \u00d7 10^18 (B) 8.00 \u00d7 10^18 (C) 1.60 \u00d7 10^19 (D) 3.20 \u00d7 10^19 Let's write a program.",
    "output": "charge = -1\r\nno_of_electrons = abs(charge) * 6.25 * 10**18\r\nprint(no_of_electrons)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "gt": "C",
    "err": false,
    "question": "A guitar string creates a sound wave of known frequency. Which of the following describes a correct and practical method of measuring the wavelength of the sound wave with a meterstick?\nAnswer Choices: (A) Lightly touch the guitar string in the middle such that a single node is created. Measure the length of the string; this is the wavelength. (B) Measure the length of the guitar string; this is half the wavelength. (C) Adjust the length of a pipe placed near the string so that resonances are heard. Measure the difference between the pipe lengths for consecutive resonances; this is half the wavelength. (D) Measure the peak-to-peak distance of the wave as it passes; this is the wavelength. Let's write a program.",
    "output": "A = 'Lightly touch the guitar string in the middle such that a single node is created. Measure the length of the string; this is the wavelength.'\nB = 'Measure the length of the guitar string; this is half the wavelength.'\nC = 'Adjust the length of a pipe placed near the string so that resonances are heard. Measure the difference between the pipe lengths for consecutive resonances; this is half the wavelength.'\nD = 'Measure the peak-to-peak distance of the wave as it passes; this is the wavelength.'\n\nif A == 'Lightly touch the guitar string in the middle such that a single node is created. Measure the length of the string; this is the wavelength.':\n    print(A)\nelif B == 'Measure the length of the guitar string; this is half the wavelength.':\n    print(B)\nelif C == 'Adjust the length of a pipe placed near the string so that resonances are heard. Measure the difference between the pipe lengths for consecutive resonances; this is half the wavelength.':\n    print(C)\nelif D == 'Measure the peak-to-peak distance of the wave as it passes; this is the wavelength.':\n    print(D)",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "C",
    "raw_ans": "True",
    "question": "Which of the following statements about images is true?\nAnswer Choices: (A) Images produced by concave lenses are always real. (B) Images produced by concave mirros are always real. (C) Images produced by convex lenses can be both real and virtual. (D) Images produced by convex mirrors can be both real and virtual. Let's write a program.",
    "output": "concave_lens=False\nconcave_mirror=True\nconvex_lens=True\nconvex_mirror=True\nprint(concave_mirror)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "C",
    "err": false,
    "question": "Pretend someone actually managed to dig a hole straight through the center of the Earth all the way to the other side. If an object were dropped down that hole, which of the following would best describe its motion? Assume ideal conditions and that the object cannot be destroyed.\nAnswer Choices: (A) It would fall to the center of the Earth and stop there. (B) It would fall through the hole to the other side, continue past the opposite side\u2019s opening, and fly into space. (C) It would oscillate back and forth from one opening to the other indefinitely. (D) It would fall to the other side and stop there. Let's write a program.",
    "output": "import math\n\n# define the variables\ng = 9.8  # acceleration due to gravity in m/s^2\nr_earth = 6371000  # radius of the Earth in meters\n\n# calculate the time it takes for an object to fall through the Earth\nt_fall = math.sqrt(2 * r_earth / g)\n\n# calculate the time it takes for an object to fly through the hole and back\nt_fly = 2 * t_fall\n\n# calculate the total distance an object would travel if it were to oscillate back and forth\nd_oscillate = 2 * r_earth * math.sin(math.pi / t_fly)\n\n# determine the best description of the object's motion\nif t_fall < t_fly:\n    print('A')\nelif d_oscillate < r_earth:\n    print('C')\nelse:\n    print('B')",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 26, in <module>\n  File \"<string>\", line 20, in run_it\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/sympy/core/relational.py\", line 511, in __bool__\n    raise TypeError(\"cannot determine truth value of Relational\")\nTypeError: cannot determine truth value of Relational\n",
    "question": "A horizontal spring-block oscillator is in motion when a second block of equal mass falls on top of the oscillating block. If the two blocks stick together, what effect will this have on the amplitude of the oscillations?\nAnswer Choices: (A) It will increase the amplitude. (B) It will decrease the amplitude. (C) It will have no effect. (D) It would depend on where the original block was in its cycle when the second block fell. Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nm1, m2, k = sp.symbols('m1 m2 k')\n\n# the original amplitude is given by the formula A = sqrt(k/m1)\n# the new total mass is m1 + m2\ntotal_mass = m1 + m2\nnew_amplitude = sp.sqrt(k / total_mass)\n\n# the new amplitude can be compared to the original one\n# if the new amplitude is greater than the original one, it will increase the amplitude\n# if the new amplitude is smaller than the original one, it will decrease the amplitude\n# if the new amplitude is equal to the original one, it will have no effect\n\n# for this problem, m1 = m2, so the new amplitude can be compared to the original one directly\noriginal_amplitude = sp.sqrt(k / m1)\n\nif new_amplitude > original_amplitude:\n    print('It will increase the amplitude.')\nelif new_amplitude < original_amplitude:\n    print('It will decrease the amplitude.')\nelse:\n    print('It will have no effect.')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 295, in execute_code\n    code = black.format_str(code_str, mode=black.FileMode())\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1079, in format_str\n    dst_contents = _format_str_once(src_contents, mode=mode)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1089, in _format_str_once\n    src_node = lib2to3_parse(src_contents.lstrip(), mode.target_versions)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/parsing.py\", line 127, in lib2to3_parse\n    raise exc from None\nblack.parsing.InvalidInput: Cannot parse: 17:10:     print('The answer is not C.\n",
    "question": "In which of the following situations involving a source of sound and a detector of the sound is it possible that there is NO perceived Doppler shift?\nAnswer Choices: (A) The source travels toward the stationary detector. (B) The detector travels toward the stationary source. (C) Both the source and detector travel in the same direction. (D) Both the source and detector travel in opposite directions, with the source and detector moving away from each other. Let's write a program.",
    "output": "import sympy as sp\n\n# define the speed of sound\nc = 343  # m/s\n\n# define the speed of the source and detector\nv_s = 0  # m/s\nv_d = 0  # m/s\n\n# calculate the Doppler shift\nf_d = (v_s - v_d) / c\n\n# if the Doppler shift is zero, it is possible that there is no perceived Doppler shift\nif f_d == 0:\n    print('Both the source and detector travel in the same direction.')\nelse:\n    print('The answer is not C.",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "12.0",
    "question": "A solid plastic cube with uniform density (side length = 0.5 m) of mass 100 kg is placed in a vat of fluid whose density is 1200 kg/m^3. What fraction of the cube's volume floats above the surface of the fluid?\nAnswer Choices: (A) 1.0/9 (B) 1.0/3 (C) 2.0/3 (D) 4.0/5 Let's write a program.",
    "output": "import math\n\n# define the side length of the cube\nside_length = 0.5\n\n# define the density of the cube\ndensity_cube = 100\n\n# define the density of the fluid\ndensity_fluid = 1200\n\n# calculate the volume of the cube\nvolume_cube = side_length ** 3\n\n# calculate the weight of the cube\nweight_cube = density_cube * volume_cube\n\n# calculate the buoyant force\nbuoyant_force = density_fluid * volume_cube\n\n# calculate the height of the cube above the surface of the fluid\nheight_above = buoyant_force / weight_cube\n\n# calculate the volume of the cube above the surface of the fluid\nvolume_above = height_above * volume_cube\n\n# calculate the fraction of the cube's volume that floats above the surface of the fluid\nfraction_above = volume_above / volume_cube\n\nprint(fraction_above)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "gt": "B",
    "err": false,
    "question": "A person standing on a horizontal floor is acted upon by two forces: the downward pull of gravity and the upward normal force of the floor. These two forces\nAnswer Choices: (A) have equal magnitudes and form an action-reaction pair (B) have equal magnitudes and do not form an action-reaction pair (C) have unequal magnitudes and form an action-reaction pair (D) have unequal magnitudes and do not form an action-reaction pair Let's write a program.",
    "output": "Gravity = 10\r\nNormal = 10\r\nif Gravity == Normal:\r\n print(\"Option A\")\r\nelif Gravity != Normal:\r\n print(\"Option C\")",
    "correct": false
  },
  {
    "ans": "E",
    "gt": "B",
    "err": false,
    "question": "A particle of mass m and charge Q and velocity V is directed toward a uniform electric field of strength E and travels a distance d. How far does the particle travel if the original velocity is doubled and the mass is cut in half?\nAnswer Choices: (A) 4d (B) 2d (C) d (D) 1/2d Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nm, Q, V, E, d = sp.symbols('m Q V E d')\n\n# calculate the distance travelled by the particle\ndistance = (m*V*d)/(2*Q*E)\n\n# if the original velocity is doubled and the mass is cut in half\nnew_distance = distance.subs({V:2*V, m:m/2})\n\nprint(new_distance)",
    "correct": false
  },
  {
    "ans": "B",
    "gt": "D",
    "err": false,
    "question": "An object of mass m1 experiences a linear, elastic collision with a stationary object of unknown mass. In addition to m1, what is the minimum necessary information that would allow you to determine the mass of the second object?\nAnswer Choices: (A) The final speed of object 1 (B) The initial speed of object 1 (C) The final speed of object 2 (D) Any 2 of the above values Let's write a program.",
    "output": "import sympy as sp\n\nm1 = sp.symbols('m1')\n\n# The final speed of object 1\nv1_final = sp.symbols('v1_final')\n\n# The initial speed of object 1\nv1_initial = sp.symbols('v1_initial')\n\n# The final speed of object 2\nv2_final = sp.symbols('v2_final')\n\n# The initial speed of object 2\nv2_initial = sp.symbols('v2_initial')\n\n# Conservation of momentum\n# m1*v1_initial = m1*v1_final + m2*v2_final\n# Conservation of energy\n# 0.5*m1*(v1_initial**2) = 0.5*m1*(v1_final**2) + 0.5*m2*(v2_final**2)\n\n# Eliminate v1_final and v2_final\n# (v1_initial**2)*m1 - (v1_final**2)*m1 = (v2_final**2)*m2\n# (v1_initial**2)*m1 - (v1_final**2)*m1 = (v2_final**2)*m2\n# (v1_initial**2)*m1 - (v1_final**2)*m1 = (v2_final**2)*m2\n\n# Now, we need to find m2. So, we need to eliminate m1 from the above equations.\n# Therefore, we need to take the ratio of the first and second equations to get:\n\n# (v1_initial**2)/(v2_final**2) = m2/m1\n\n# So, we now have the ratio of the masses. Therefore, we need the value of any two speeds to find the value of the third speed.\n\n# Therefore, the minimum necessary information is:\n\n# The final speed of object 1\n# The initial speed of object 1\n\n# Hence, The answer is B.",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "D",
    "err": false,
    "question": "In an experiment designed to study the photoelectric effect, it is observed that low-intensity visible light of wavelength 550 nm produced no photoelectrons. Which of the following best describes what would occur if the intensity of this light were increased dramatically?\nAnswer Choices: (A) Almost immediately, photoelectrons would be produced with a kinetic energy equal to the energy of the incident photons. (B) Almost immediately, photoelectrons would be produced with a kinetic energy equal to the energy of the incident photons minus the work function of the metal. (C) After several seconds, necessary for the electrons to absorb sufficient energy from the incident light, photoelectrons would be produced with a kinetic energy equal to the energy of the incident photons minus the work function of the metal. (D) Nothing would happen. Let's write a program.",
    "output": "import math\n\n# define the variables\nwavelength = 550 # in nm\nwork_function = 0 # in eV\n\n# calculate the energy of the incident photons\nphoton_energy = h * c * (wavelength * 10**-9)\n\n# calculate the kinetic energy of the photoelectrons\nkinetic_energy = photon_energy - work_function\n\n# Since low-intensity visible light of wavelength 550 nm produced no photoelectrons\n# the answer should be related to the work function and the kinetic energy\n\n# if the intensity of this light were increased dramatically\n# the photoelectrons would be produced with a kinetic energy equal to the energy of the incident photons\n# The answer is A",
    "correct": false
  },
  {
    "ans": "D",
    "gt": "A",
    "err": false,
    "question": "Two traveling waves of equal frequency, one of amplitude 4 cm and the other of amplitude 6 cm, superimpose in a single medium. Which of the following best describes the displacement, D, of the resultant wave?\nAnswer Choices: (A) 2 cm \u2264 D \u2264 10 cm (B) D = 5 cm (C) D = 10 cm (D) 10 cm \u2264 D \u2264 12 cm Let's write a program.",
    "output": "import numpy as np\n\n# define the amplitudes of the two waves\nA1 = 4  # in cm\nA2 = 6  # in cm\n\n# the resultant amplitude D is the sum of the amplitudes of the two waves\nD = np.abs(A1 + A2)\n\n# the maximum amplitude of the resultant wave is the sum of the amplitudes of the two waves\nmax_D = np.abs(A1 + A2)\n\n# the minimum amplitude of the resultant wave is the absolute difference of the amplitudes of the two waves\nmin_D = np.abs(A1 - A2)\n\n# the range of the resultant wave is the difference between the maximum and minimum amplitudes\nrange_D = max_D - min_D\n\n# print the answer\nprint(f\"{min_D} cm \u2264 D \u2264 {max_D} cm\")",
    "correct": false
  },
  {
    "ans": "B",
    "gt": "B",
    "err": false,
    "question": "In Collision A, two carts collide and bounce off each other. In Collision B, a ball sticks to a rigid rod, which begins to rotate about the combined center of mass. Which of the following statements about quantities in each collision is correct?\nAnswer Choices: (A) Collision A: each cart experiences the same force, time of collision, and change in kinetic energy. Collision B: the ball and the rod each experience the same torque, time of collision, and change in rotational kinetic energy. (B) Collision A: each cart experiences the same force, time of collision, and change in linear momentum. Collision B: the ball and the rod each experience the same torque, time of collision, and change in angular momentum. (C) Collision A: each cart experiences the same force, time of collision, and change in kinetic energy. Collision B: the ball and the rod each experience the same torque, time of collision, and change in angular momentum. (D) Collision A: each cart experiences the same force, time of collision, and change in velocity. Collision B: the ball and the rod each experience the same torque, time of collision, and change in angular velocity Let's write a program.",
    "output": "import numpy as np\n\n# Define the initial conditions\nm1 = 1  # mass of the first cart\nm2 = 1  # mass of the second cart\nv1 = 1  # initial velocity of the first cart\nv2 = 0  # initial velocity of the second cart\n\n# Calculate the final velocities after the collision\nv1_final = v1  # the first cart does not change its velocity\nv2_final = v1  # the second cart does not change its velocity\n\n# Calculate the change in kinetic energy\ndelta_KE_A = 0.5 * (m1 * v1**2 + m2 * v2**2) - 0.5 * (m1 * v1_final**2 + m2 * v2_final**2)\n\n# Now, let's calculate the same quantities for the second collision\n\n# Initial conditions\nr = 1  # length of the rod\nm = 1  # mass of the ball\nv = 0  # initial velocity of the ball\n\n# Calculate the final velocity of the ball and the rod\nv_final = v  # the ball does not change its velocity\nomega_final = v / r  # the rod begins to rotate with the ball\n\n# Calculate the change in rotational kinetic energy\ndelta_KE_B = 0.5 * (m * v**2 + r * omega_final**2) - 0.5 * (m * v_final**2 + r * omega_final**2)\n\n# Calculate the change in angular momentum\ndelta_L_B = r * omega_final - m * v\n\n# Calculate the change in torque\ndelta_tau_B = r * omega_final\n\n# Calculate the change in time\ndelta_t_B = 1  # we assume that the time of collision is 1 second\n\n# Compare the quantities\nif delta_KE_A == delta_KE_B and delta_L_B == delta_tau_B and delta_t_B == delta_t_B:\n    print('A')\nelse:\n    print('B')",
    "correct": true
  },
  {
    "ans": "B",
    "gt": "D",
    "err": false,
    "question": "An object of mass 2 kg is acted upon by three external forces, each of magnitude 4 N. Which of the following could NOT be the resulting acceleration of the object?\nAnswer Choices: (A) 0 m/s^2 (B) 2 m/s^2 (C) 4 m/s^2 (D) 8 m/s^2 Let's write a program.",
    "output": "Total mass = 2 kg\nTotal force = 3 * 4 = 12 N\nAcceleration = 12 / 2 = 6 m/s^2\nTherefore, the object will have an acceleration of 6 m/s^2.\nThe answer is B.",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "D",
    "err": false,
    "question": "Spring scales are used to measure the net force applied to an object; a sonic motion detector is used to measure the object\u2019s resulting acceleration. A graph is constructed with the net force on the vertical axis and the acceleration on the horizontal axis. Which of the following quantities is directly measured using the slope of this graph?\nAnswer Choices: (A) Gravitational mass (B) Weight (C) Velocity (D) Inertial mass Let's write a program.",
    "output": "Let's say Net Force is y and Acceleration is x.\nSlope = (y2-y1)/(x2-x1)\nWe know that,\nF=ma (main equation)\nSo,\ny=mx+c\nWhere m is mass and c is constant.\nHence, the slope of the graph will be equal to mass.\nHence, option A is correct.",
    "correct": false
  },
  {
    "ans": "A",
    "err": true,
    "gt": "B",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 11, in <module>\n  File \"<string>\", line 10, in run_it\nNameError: name 'C' is not defined\n",
    "question": "A wooden block experiences a frictional force, f, as it slides across a table. If a block of the same material with half the height and twice the length were to slide across the table, what would be the frictional force it experienced?\nAnswer Choices: (A) (1/2)f (B) f (C) 2f (D) 4f Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nf = sp.symbols('f')\n\n# The frictional force is proportional to the height and length of the block.\n# So, if we halve the height and double the length, the frictional force will change as f * (1/2) * 2 = 2f\n\nprint(C)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "4.0",
    "question": "An object is placed 10 cm in front of a diverging mirror. What is the focal length of the mirror if the image appears 2 cm behind the mirror?\nAnswer Choices: (A) -3/5 cm (B) -5/3 cm (C) -2/5 cm (D) -5/2 cm Let's write a program.",
    "output": "import math\n\n# define the distance of the object from the mirror and the distance of the image from the mirror\no = 10  # in cm\ni = -2  # in cm. The image is formed behind the mirror, so we take the distance as negative\n\n# calculate the focal length of the mirror\nf = (o + i) / 2\n\nprint(f)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "C",
    "raw_ans": "324",
    "question": "A body moving in the positive x direction passes the origin at time t = 0. Between t = 0 and t = 1 second, the body has a constant speed of 24 meters per second. At t = 1 second, the body is given a constant acceleration of 6 meters per second squared in the negative x direction. The position x of the body at t = 11 seconds is\nAnswer Choices: (A) 99m (B) 36m (C) -36m (D) -99m Let's write a program.",
    "output": "from sympy import Eq, Symbol, solve\r\n\r\n# x = position\r\nx = Symbol('x')\r\neq = Eq(x, 24*1 + (24+6)*(10))\r\n\r\nanswer = solve(eq)\r\n\r\nprint(answer[0])",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "B",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 22, in <module>\n  File \"<string>\", line 15, in run_it\nAttributeError: module 'math' has no attribute 'rho'\n",
    "question": "A fluid of density \u03c1 flows through a horizontal pipe with negligible viscosity. The flow is streamlined with constant flow rate. The diameter of the pipe at Point 1 is d and the flow speed is V. If the diameter of the pipe at Point 2 is d/3, then the pressure at Point 2 is\nAnswer Choices: (A) less than the pressure at Point 1 by 4 \u03c1v^2 (B) less than the pressure at Point 1 by 40 \u03c1v^2 (C) more than the pressure at Point 1 by 4 \u03c1v^2 (D) more than the pressure at Point 1 by 40 \u03c1v^2 Let's write a program.",
    "output": "import math\n\n# define the variables\nd1 = 1 # diameter at point 1 in m\nv1 = 1 # velocity at point 1 in m/s\nd2 = d1/3 # diameter at point 2 in m\n\n# calculate the velocity at point 2\nv2 = v1 * (d1/d2)**2 # velocity at point 2 in m/s\n\n# calculate the pressure difference\n# the pressure at a point in a streamline flow is given by P = P0 + \u03c1v^2/2\n# where P0 is the pressure at the reference point, \u03c1 is the density of the fluid, and v is the velocity\npressure_diff = (math.rho * (v2**2 - v1**2))/2\n\n# the pressure at point 1 is less than the pressure at point 2 by the above amount\n# therefore, the pressure at point 2 is more than the pressure at point 1 by the above amount\n\n# print the result\nprint(pressure_diff)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": true,
    "gt": "A",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in run_it\nNameError: name 'frequency' is not defined\n",
    "question": "In a spring-block oscillator, the maximum speed of the block is\nAnswer Choices: (A) proportional to amplitude (B) proportional to the square of amplitude (C) proportional to the square root of amplitude (D) inversely proportional to the square root of amplitude Let's write a program.",
    "output": "import math\n\n# define the variables\namplitude = 1  # assuming the maximum speed is at the amplitude\n\n# calculate the maximum speed\nmax_speed = math.sqrt(amplitude**2 * (2*math.pi*frequency)**2)\n\n# print the result\nprint(max_speed)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 10, in <module>\n  File \"<string>\", line 3, in run_it\nNameError: name 'mass_of_earth' is not defined\n",
    "question": "The weight of a box on the Earth is 80 N. What is the weight of the box on the moon if the moon has 1/80th the mass and 1/4th the radius of the Earth?\nAnswer Choices: (A) 1 N (B) 10 N (C) 16 N (D) 20 N Let's write a program.",
    "output": "weight_on_earth = 80\nmass_of_moon = 1/80 * mass_of_earth\nradius_of_moon = 1/4 * radius_of_earth\n\n# formula for weight = mass * acceleration_due_to_gravity / radius\nweight_on_moon = weight_on_earth * (acceleration_due_to_gravity_moon / acceleration_due_to_gravity_earth) / radius_of_moon\n\nprint(weight_on_moon)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "C",
    "raw_ans": "151.74193548387098",
    "question": "A textbook weighs 30 N at sea level. Earth\u2019s radius is 6,400 km. Which of the following is the best estimate of the textbook\u2019s weight on a mountain peak located 6,000 m above sea level?\nAnswer Choices: (A) 60 N (B) 15 N (C) 30 N (D) 7.5 N Let's write a program.",
    "output": "weight_sea_level = 30\nearth_radius = 6400\naltitude = 6000\n\n# formula to calculate weight of a body on the surface of earth\n# W = (m * g * r) / (r + h)\n# where g is the gravitational constant, r is the radius of the earth and h is the altitude\n\nimport math\ng = 9.8 # gravitational constant\nr = earth_radius\nh = altitude\n\nweight_on_mountain = (weight_sea_level * g * r) / (r + h)\n\nprint(weight_on_mountain)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": true,
    "gt": "B",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 26, in <module>\n  File \"<string>\", line 17, in run_it\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/sympy/solvers/ode/ode.py\", line 605, in dsolve\n    hints = _desolve(eq, func=func,\n            ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/sympy/solvers/deutils.py\", line 209, in _desolve\n    hints = classifier(eq, func, dict=True, ics=ics, xi=xi, eta=eta,\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/sympy/solvers/ode/ode.py\", line 942, in classify_ode\n    raise ValueError(\"dsolve() and classify_ode() only \"\nValueError: dsolve() and classify_ode() only work with functions of one variable, not v\n",
    "question": "Which of the following correctly describes the motion of a real object in free fall? Assume that the object experiences drag force proportional to speed and that it strikes the ground before reaching terminal sped.\nAnswer Choices: (A) It will fall with increasing speed and increasing acceleration. (B) It will fall with increasing speed and decreasing acceleration. (C) It will fall with decreasing speed and increasing acceleration. (D) It will fall with decreasing speed and decreasing acceleration. Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nt = sp.symbols('t')\nv = sp.symbols('v')\n\n# define the differential equation for the free fall\n# dv/dt = g - av/m\n\n# g is the acceleration due to gravity, a is the drag coefficient, m is the mass of the object\n\n# we assume that the object strikes the ground before reaching terminal speed\n# this happens when the speed is zero\n\n# find the general solution of the differential equation\nv_general_solution = sp.dsolve(sp.Eq(v.diff(t), 10 - 0.2*v/1), v)\n\n# the speed keeps decreasing when the object is in free fall\n# so the acceleration is negative\n# the acceleration also keeps decreasing\n# so the derivative of the acceleration is negative\n# therefore, the correct answer is D\n\nprint('D')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "-6.0",
    "question": "A bi-convex lens has a radius of curvature of magnitude 20 cm. Which of the following best describes the image formed of an object of height 2 cm placed 30 cm from the lens?\nAnswer Choices: (A) Real, inverted, height = 1 cm (B) Virtual, upright, height = 0.25 cm (C) Real, upright, height = 1 cm (D) Virtual, inverted, height = 0.25 cm Let's write a program.",
    "output": "import math\n\n# define the values\nradius_of_curvature = 20  # in cm\nobject_height = 2  # in cm\nobject_distance = 30  # in cm\n\n# calculate the image distance using the formula for a convex lens\nimage_distance = (object_distance * radius_of_curvature) / (radius_of_curvature - object_distance)\n\n# calculate the magnification\nmagnification = (image_distance - object_distance) / object_distance\n\n# calculate the image height\nimage_height = magnification * object_height\n\n# determine whether the image is real or virtual\nif image_distance > 0:\n    image_type = 'real'\nelse:\n    image_type = 'virtual'\n\n# determine whether the image is upright or inverted\nif magnification > 0:\n    image_orientation = 'upright'\nelse:\n    image_orientation = 'inverted'\n\n# print the result\nprint(image_type + ', ' + image_orientation + ', height = ' + str(image_height))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "err": true,
    "gt": "A",
    "raw_ans": "",
    "question": "Two spheres of net charge +5e and -6e briefly come into contact. Afterward, which of the following is a possible combination of net charges for the two spheres?\nAnswer Choices: (A) +3e and -4e (B) +1.5e and -2.5e (C) Both of the above (D) None of the above Let's write a program.",
    "output": "from math import sqrt\n\n# define the charges\nq1 = 5\nq2 = -6\n\n# calculate the product of the charges\nproduct = q1 * q2\n\n# calculate the possible charges after the combination\npossible_charges = [sqrt(product**2 / (q1+q2)**2), -sqrt(product**2 / (q1+q2)**2)]\n\n# check if the possible charges are in the options\nfor option in [3, 1.5]:\n    if option in possible_charges:\n        print(option)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "C",
    "err": false,
    "question": "The circumference of a helium-filled balloon is measured for three different conditions: at room temperature, after being in a warm oven for 30 minutes, and after being in a freezer for 30 minutes. A student plotting the circumference cubed C^3 as a function of temperature T, should expect to find which of the following?\nAnswer Choices: (A) a cubic relationship between C^3 and T (B) an indirect relationship between C^3 and T (C) an extrapolated temperature T where C^3 reaches zero (D) a maximum C^3 as the temperature T increases Let's write a program.",
    "output": "import numpy as np\n\n# define the temperature\nT = np.array([1, 2, 3])\n\n# define the circumference\nC = np.array([1, 2, 3])\n\n# calculate C^3\nC_cubed = C**3\n\n# plot C^3 vs T\nimport matplotlib.pyplot as plt\nplt.plot(T, C_cubed)\nplt.xlabel('T')\nplt.ylabel('C^3')\nplt.show()\n\n# The answer is A.",
    "correct": false
  },
  {
    "ans": "D",
    "gt": "D",
    "err": false,
    "question": "The charge on an oil drop is measured in the laboratory. Which of the following measurements should be rejected as highly unlikely to be correct?\nAnswer Choices: (A) 6.4 \u00d7 10^-19 C (B) 8.0 \u00d7 10^-19 C (C) 4.8 \u00d7 10^-19 C (D) 2.4 \u00d7 10^-19 C Let's write a program.",
    "output": "q_1 = 6.4\nq_2 = 8.0\nq_3 = 4.8\nq_4 = 2.4\n\nif q_1 < q_2 and q_1 < q_3 and q_1 < q_4:\n    print('A')\nelif q_2 < q_1 and q_2 < q_3 and q_2 < q_4:\n    print('B')\nelif q_3 < q_1 and q_3 < q_2 and q_3 < q_4:\n    print('C')\nelse:\n    print('D')",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "1561249.4995995995",
    "question": "Traveling at an initial speed of 1.5 \u00d7 10^6 m/s, a proton enters a region of constant magnetic field, B, of magnitude 1.0 T. If the proton's initial velocity vector makes an angle of 30\u00b0 with the direction of B, compute the proton's speed 4 s after entering the magnetic field.\nAnswer Choices: (A) 5.0 \u00d7 10^5 m/s (B) 7.5 \u00d7 10^5 m/s (C) 1.5 \u00d7 10^6 m/s (D) 3.0 \u00d7 10^6 m/s Let's write a program.",
    "output": "import math\n\n# define the initial speed\nv = 1.5 * 10**6  # m/s\n\n# define the angle\ntheta = 30  # degrees\n\n# convert the angle to radians\ntheta = math.radians(theta)\n\n# define the magnitude of the magnetic field\nB = 1.0  # T\n\n# calculate the radius of the circular motion\nr = v / (B * math.cos(theta))\n\n# calculate the speed after 4 seconds\nt = 4  # seconds\nv_final = math.sqrt((v * math.cos(theta))**2 + (r * math.sin(theta))**2)\n\nprint(v_final)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": true,
    "gt": "A",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 26, in <module>\n  File \"<string>\", line 5, in run_it\nNameError: name 'symbols' is not defined\n",
    "question": "Which of the following changes to a circuit will always bring about an increase in the current?\nAnswer Choices: (A) Increased voltage and increased resistance (B) Decreased voltage and decreased resistance (C) Increased voltage and decreased resistance (D) Decreased voltage and increased resistance Let's write a program.",
    "output": "from sympy import Eq, Symbol, solve\r\n\r\n# I = current, V = voltage, R = resistance\r\nI, V, R = symbols('I V R')\r\n\r\n# Ohm's Law equation\r\neq = Eq(I, V/R)\r\n\r\n# Increased voltage and increased resistance\r\neq1 = Eq(I, (V+1)/(R+1))\r\n\r\n# Decreased voltage and increased resistance\r\neq2 = Eq(I, (V-1)/(R+1))\r\n\r\n# Decreased voltage and decreased resistance\r\neq3 = Eq(I, (V-1)/(R-1))\r\n\r\n# Increased voltage and decreased resistance\r\neq4 = Eq(I, (V+1)/(R-1))\r\n\r\n# Check for increase in current\r\nfor i in range(1, 5):\r\n    if eq1.subs(i, 1) > eq.subs(i, 1):\r\n        print(i)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "The centripetal acceleration and velocity point in the same direction",
    "question": "Which of the following concerning uniform circular motion is true?\nAnswer Choices: (A) The centrifugal force is the action-reaction pair of the centripetal force. (B) The centripetal acceleration and velocity point in the same direction. (C) The velocity of the object in motion changes whereas the acceleration of the object is constant. (D) A satellite undergoing uniform circular motion is falling toward the center in a circular path. Let's write a program.",
    "output": "A = 'The centripetal force is the action-reaction pair of the centrifugal force.'\nB = 'The centripetal acceleration and velocity point in the same direction.'\nC = 'The velocity of the object in motion changes whereas the acceleration of the object is constant.'\nD = 'A satellite undergoing uniform circular motion is falling toward the center in a circular path.'\nprint(B)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "{f: m*t}",
    "question": "It is known that a lab cart is moving east at 25 cm/s at time t1 = 0.10 s, and then moving east at 15 cm/s at t2 = 0.20 s. Is this enough information to determine the direction of the net force acting on the cart between t1 and t2?\nAnswer Choices: (A) Yes, since we know the cart is slowing down, its momentum change is opposite the direction of movement, and the net force is in the direction of momentum change. (B) No, because we don\u2019t know whether forces such as friction or air resistance might be acting on the cart. (C) No, because we don\u2019t know the mass of the cart. (D) Yes, since we know the cart keeps moving to the east, the net force must be in the direction of motion. Let's write a program.",
    "output": "from sympy import symbols, Eq, solve\r\n\r\n# m = mass of the cart, f = force, t = time\r\nm, f, t = symbols('m f t')\r\n\r\n# Eq 1: f = ma\r\neq1 = Eq(f, m*t)\r\n\r\n# Eq 2: m = 0.1\r\neq2 = Eq(m, 0.1)\r\n\r\nanswer = solve((eq1, eq2), (f, t))\r\n\r\nprint(answer)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "mass*(-acceleration + height/velocity)",
    "question": "An elevator is rising. In order to determine the tension in the cables pulling it, which values (for the elevator) would you need to know?\nAnswer Choices: (A) Mass, velocity, height, and acceleration (B) Mass, velocity, and acceleration (C) Mass and velocity (D) Mass and acceleration Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nmass, velocity, height, acceleration = sp.symbols('mass velocity height acceleration')\n\n# The tension in the cables pulling the elevator is equal to the mass of the elevator multiplied by the acceleration of the elevator\n# The acceleration of the elevator is equal to the difference in height between the current position and the original position divided by time\n# Time is equal to the distance divided by velocity\n\n# define the equation for tension\ntension = mass * (height / velocity - acceleration)\n\n# print the equation\nprint(tension)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "B",
    "err": false,
    "question": "If two non-zero vectors are added together, and the resultant vector is zero, what must be true of the two vectors?\nAnswer Choices: (A) They have equal magnitude and are pointed in the same direction. (B) They have equal magnitude and are pointed in opposite directions. (C) They have different magnitudes and are pointed in opposite directions. (D) It is not possible for the sum of two non-zero vectors to be zero. Let's write a program.",
    "output": "from sympy import symbols, Eq, solve\n\n# Define the symbols\nx, y = symbols('x y')\n\n# Define the equation\neq = Eq((x**2) + (y**2), 0)\n\n# Solve the equation\nsolution = solve(eq, (x, y))\n\n# Print the solution\nfor i in solution:\n    if i[0] != 0 and i[1] != 0:\n        print(\"A\")\n    elif i[0] == 0 and i[1] == 0:\n        print(\"D\")\n    else:\n        print(\"B\" if i[0] == i[1] else \"C\")",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "C",
    "err": false,
    "question": "A proton enters a solenoid. Upon entry, the proton is moving in a straight line along the axis of the solenoid. Which of the following is a correct description of the proton\u2019s motion within the solenoid?\nAnswer Choices: (A) The proton will be bent in a parabolic path. (B) The proton will be bent in a circular path. (C) The proton will continue in its straight path at constant velocity. (D) The proton will continue in its straight path and slow down. Let's write a program.",
    "output": "B\nThe proton will be bent in a circular path.\nThe magnetic field of a solenoid is parallel to its axis. This means that a proton entering the solenoid will experience a force that is perpendicular to its motion. This force will cause the proton to accelerate in a direction perpendicular to its motion. This acceleration will cause the proton to move in a circular path.",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "B",
    "raw_ans": "4*f*v",
    "question": "A sound wave with frequency f travels through air at speed v. With what speed will a sound wave with frequency 4f travel through the air?\nAnswer Choices: (A) v/4 (B) v (C) 2v (D) 4v Let's write a program.",
    "output": "import sympy as sp\n\n# define the symbols\nf, v = sp.symbols('f v')\n\n# define the relationship\nspeed = v * f\n\n# calculate the speed for a sound wave with frequency 4f\nnew_speed = speed.subs(f, 4*f)\n\nprint(new_speed)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "gt": "A",
    "err": false,
    "question": "Under what conditions is the net electric flux through a closed surface proportional to the enclosed charge?\nAnswer Choices: (A) under any conditions (B) only when the enclosed charge is symmetrically distributed (C) only when all nearby charges are symmetrically distributed (D) only when there are no charges outside the surface Let's write a program.",
    "output": "The net electric flux through a closed surface is given by \u222bE.dA = Qenclosed0 where E is the electric field, A is the area, and Qenclosed is the charge enclosed. This equation is always true. The only condition is that the electric field must be present inside the closed surface. This is only possible when there are charges present inside the surface, and the field is present only where the charges are. So, the charges must be outside the surface to have an effect on the electric flux. The answer is D.",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "speed and wavelength",
    "question": "A beam of monochromatic light entering a glass window pane from the air will experience a change in\nAnswer Choices: (A) frequency and wavelength (B) speed and wavelength (C) speed only (D) wavelength only Let's write a program.",
    "output": "speed = 1\nglass = 1.5\nfrequency = 1\n\nchange = (glass - 1) / 1\n\nif change == 0:\n  print('speed only')\nelif change > 0:\n  print('speed and wavelength')\nelse:\n  print('frequency and wavelength')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "gt": "B",
    "err": false,
    "question": "Data is collected in an experiment preformed on an ideal gas. In the experiment, temperature (in K) is the independent variable and volume (in m^3) is the dependent variable. If a plot is produced where the dependent variable is on the vertical axis, which of the following is true about the slope and y-intercept of the graph?\nAnswer Choices: (A) The slope will be linearly proportional to the pressure of the gas and the intercept will be 0 m^3. (B) The slope will be inversely proportional to the pressure of the gas and the intercept will be 0 m^3. (C) The slope will be linearly proportional to the pressure of the gas and the intercept will not be 0 m^3. (D) The slope will be inversely proportional to the pressure of the gas and the intercept will not be 0 m^3. Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nT, P, V = sp.symbols('T P V')\n\n# define the ideal gas law\nideal_gas_law = sp.Eq(P, T*V)\n\n# The slope of the graph will be the change in V/change in T for a change in P\n# From the ideal gas law, V = P/T. Taking the derivative w.r.t. T gives V(T) = -P/T^2\n# So, the slope is -P/T^2. Since P is constant, the slope is inversely proportional to T\nslope = -P/T**2\n\n# The y-intercept is V when T = 0 (i.e., when the temperature is 0K)\ny_intercept = P/T\n\n# At T = 0, V = 0\nsubstituted_y_intercept = y_intercept.subs(T, 0)\n\n# The answer is B. The slope is inversely proportional to T and the y-intercept is 0 m^3",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "10\n20\n10\n10",
    "question": "A toy car and a toy truck collide. If the toy truck\u2019s mass is double the toy car\u2019s mass, then, compared to the acceleration of the truck, the acceleration of the car during the collision will be\nAnswer Choices: (A) double the magnitude and in the same direction (B) double the magnitude and in the opposite direction (C) half the magnitude and in the same direction (D) half the magnitude and in the opposite direction Let's write a program.",
    "output": "CarMass = 10\r\nTruckMass = 20\r\nprint(CarMass)\r\nprint(TruckMass)\r\nAccelerationOfCar = 10\r\nAccelerationOfTruck = 10\r\nprint(AccelerationOfCar)\r\nprint(AccelerationOfTruck)\r\n\r\n\r\n\r\n\r\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "D",
    "raw_ans": "the cylinder",
    "question": "A sphere, a cube, and a cylinder, all of equal mass, are released from rest from the top of a short incline. The surface of the incline is extremely slick, so much so that the objects do not rotate when released, but rather slide with negligible friction. Which reaches the base of the incline first?\nAnswer Choices: (A) the sphere (B) the cube (C) the cylinder (D) All reach the base at the same time. Let's write a program.",
    "output": "import math\n\n# define the height of the incline\nh = 10  # in cm\n\n# define the radius of the cylinder\nr = 5  # in cm\n\n# define the side length of the cube\ns = 5  # in cm\n\n# calculate the time taken for each object to reach the base\nt_sphere = math.sqrt(2 * h / 5)  # time taken by the sphere\nt_cube = math.sqrt(3 * h / 5)  # time taken by the cube\nt_cylinder = math.sqrt(h / 5)  # time taken by the cylinder\n\n# find the minimum time\nmin_time = min(t_sphere, t_cube, t_cylinder)\n\n# print the object that reaches the base first\nif min_time == t_sphere:\n    print(\"the sphere\")\nelif min_time == t_cube:\n    print(\"the cube\")\nelif min_time == t_cylinder:\n    print(\"the cylinder\")\nelse:\n    print(\"All reach the base at the same time.\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "150.0",
    "question": "A car starts from rest and uniformly accelerates to a final speed of 20.0 m/s in a time of 15.0 s. How far does the car travel during this time?\nAnswer Choices: (A) 150 m  (B) 300 m (C) 450 m (D) 600 m Let's write a program.",
    "output": "import math\n\n# define the variables\ninitial_speed = 0 # since the car starts from rest\nfinal_speed = 20.0 # final speed of the car\ntime = 15.0 # time taken for the car to reach the final speed\n\n# calculate the distance using the formula: distance = initial_speed * time + 0.5 * acceleration * time^2\n# since the car starts from rest, the initial_speed is 0 and the distance is calculated as 0.5 * acceleration * time^2\n\n# calculate the acceleration\nacceleration = (final_speed - initial_speed) / time\n\n# calculate the distance\ndistance = 0.5 * acceleration * time**2\n\n# print the result\nprint(distance)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "0.10168885176307703",
    "question": "At what angle to the horizontal should an ideal projectile be launched so that its horizontal displacement (the range) is equal to its maximum vertical displacement?\nAnswer Choices: (A) sin\u20131 (1/g) (B) cos\u20131 (1/g) (C) 45\u00b0 (D) tan\u20131 4 Let's write a program.",
    "output": "import math\n\n# define the variables\ng = 9.8 # acceleration due to gravity in m/s^2\n\n# calculate the angle using the formula derived from the projectile motion equations\nangle = math.atan(1/g)\n\n# print the result\nprint(angle)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 20, in <module>\n  File \"<string>\", line 17, in run_it\nUnboundLocalError: cannot access local variable 'angle' where it is not associated with a value\n",
    "question": "A cannon is mounted on a truck that moves forward at a speed of 5 m/s. The operator wants to launch a ball from a cannon so the ball goes as far as possible before hitting the level surface. The muzzle velocity of the cannon is 50 m/s. At what angle from the horizontal should the operator point the cannon?\nAnswer Choices: (A) 5\u00b0 (B) 41\u00b0 (C) 45\u00b0 (D) 49\u00b0 Let's write a program.",
    "output": "import math\n\n# define the variables\nmuzzle_velocity = 50  # m/s\ntruck_speed = 5  # m/s\ng = 9.81  # m/s^2\n\n# calculate the maximum distance the ball can travel\n# the time the ball is in the air is the minimum of the distance the truck travels and the distance the ball travels divided by the muzzle velocity\n# the maximum distance is then the muzzle velocity times the time\n\n# calculate the angle\n# this is a two-dimensional problem, so we can use the property that the ratio of the sine of an angle to the cosine of the same angle is equal to the tangent of the angle\n# the angle that maximizes the distance is the arctan of the ratio of the horizontal speed to the vertical speed\n\nangle = math.atan((truck_speed - muzzle_velocity*math.sin(angle)) / muzzle_velocity*math.cos(angle))\n\nprint(math.degrees(angle))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "gt": "A",
    "err": false,
    "question": "Two charged, massive particles are isolated from all influence except those between the particles. They have charge and mass such that the net force between them is 0 N. Which of the following is NOT true?\nAnswer Choices: (A) The particles must have the same sign of charge. (B) If the distance between the particles changes, the force will no longer be 0 N. (C) The particles must have the same mass. (D) Such a situation is impossible as the net force between the two particles cannot be 0. Let's write a program.",
    "output": "Let's examine each option:\n(A) The particles must have the same sign of charge. This is true. The net force between two charged particles is proportional to the product of their charges. If the net force is zero, then one particle must have a positive charge and the other a negative charge.\n(B) If the distance between the particles changes, the force will no longer be 0 N. This is true. The force between two charged particles is inversely proportional to the square of the distance between them. If the distance changes, the force will change.\n(C) The particles must have the same mass. This is not true. The force between two particles is independent of their masses. The force between two particles with the same mass will be the same as the force between two particles with different masses.\n(D) Such a situation is impossible as the net force between the two particles cannot be 0. This is true. The net force between two particles is the vector sum of the forces between them. If the net force is zero, then the magnitudes of the forces must be equal and opposite. However, the forces are exerted by the two particles on each other, not the other way around. Therefore, it is impossible for the net force to be zero.\nThe answer is D.",
    "correct": false
  },
  {
    "ans": "B",
    "gt": "D",
    "err": false,
    "question": "Which one of the following statements is true concerning the motion of an ideal projectile launched at an angle of 45\u00b0 to the horizontal?\nAnswer Choices: (A) The acceleration vector points opposite to the velocity vector on the way up and in the same direction as the velocity vector on the way down. (B) The speed at the top of the trajectory is zero. (C) The object's total speed remains constant during the entire flight. (D) The vertical speed decreases on the way up and increases on the way down. Let's write a program.",
    "output": "import sympy as sp\n\n# define the symbols\nt = sp.symbols('t')\n\n# define the equations for the x and y components of the motion\nx = 450*t*sp.cos(45*sp.pi/180)\ny = 450*t*sp.sin(45*sp.pi/180) - 900*t**2\n\n# find the derivative of the y component with respect to time\ny_dot = sp.diff(y, t)\n\n# at the top of the trajectory, the vertical speed is zero\nspeed_top = sp.solve(y_dot, t)\n\n# find the derivative of the x component with respect to time\nx_dot = sp.diff(x, t)\n\n# the total speed is the square root of the sum of the squares of the x and y components of the velocity\ntotal_speed = sp.sqrt(x_dot**2 + y_dot**2)\n\n# the speed does not remain constant during the entire flight\nspeed_remains_constant = sp.solve(sp.diff(total_speed, t), t)\n\n# at the top of the trajectory, the acceleration vector points in the same direction as the velocity vector\nacceleration_top = sp.solve(sp.diff(y_dot, t), t)\n\n# on the way down, the vertical speed increases\nvertical_speed_down = sp.solve(y_dot, t)\n\n# on the way up, the vertical speed decreases\nvertical_speed_up = sp.solve(y_dot, t)\n\n# the speed at the top of the trajectory is not zero\nspeed_not_zero = sp.solve(y, t)\n\n# the answer is B",
    "correct": false
  },
  {
    "ans": "C",
    "gt": "A",
    "err": false,
    "question": "Two electrically charged balls are separated by a short distance, producing a force of 50 \u03bcN between them. Keeping the charge of each ball the same, the mass of one of the balls but not the other is doubled. What is the new electric force between the balls?\nAnswer Choices: (A) 50 \u03bcN (B) 100 \u03bcN (C) 200 \u03bcN (D) 400 \u03bcN Let's write a program.",
    "output": "Let's use the formula for the Coulomb force:\nF = k * q1 * q2 / r^2\nSince the force is 50 \u03bcN, and the charge of each ball is the same, the distance between the balls is 1.\nTherefore, 50 = k * q^2, and k = 50 / q^2.\nNow, the mass of one of the balls is doubled. Therefore, the charge of one of the balls is doubled, and the total charge is 2q.\nTherefore, the new force is:\nF = k * (2q)^2 / r^2 = 4 * 50 / q^2 = 200 \u03bcN\nThe answer is C.",
    "correct": false
  },
  {
    "ans": "B",
    "gt": "A",
    "err": false,
    "question": "A moving 1.5-kg cart collides with and sticks to a 0.5-kg cart which was initially at rest. Immediately after the collision, the carts each have the same ______ as each other.\nAnswer Choices: (A) Velocity (B) Kinetic energy (C) Mass (D) Linear momentum Let's write a program.",
    "output": "Initially at rest means no momentum\nInitial momentum = 0\nAfter collide, both carts have same velocity, so v = p/m = 0.5*v/1.5 = v/3\nSo final momentum = 2v/3\nAnswer = B",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "450.0",
    "question": "A rock is dropped off a cliff and strikes the ground with an impact velocity of 30 m/s. How high was the cliff?\nAnswer Choices: (A) 20 m (B) 30 m (C) 45 m (D) 60 m Let's write a program.",
    "output": "import math\n\n# define the impact velocity\nimpact_velocity = 30  # m/s\n\n# calculate the distance the rock fell using the formula for the distance of a falling object\ndistance = 0.5 * impact_velocity**2  # m\n\n# print the height of the cliff\nprint(distance)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 19, in run_it\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/sympy/core/relational.py\", line 511, in __bool__\n    raise TypeError(\"cannot determine truth value of Relational\")\nTypeError: cannot determine truth value of Relational\n",
    "question": "A car moving with speed v reaches the foot of an incline of angle \u03b8. The car coasts up the incline without using the engine. Neglecting friction and air resistance, which of the following is correct about the magnitude of the car\u2019s horizontal acceleration ax and vertical acceleration ay?\nAnswer Choices: (A) ax = 0; ay < g (B) ax = 0; ay = g (C) ax < g; ay < g (D) ax < g; ay = g Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nv, theta = sp.symbols('v theta')\n\n# define the accelerations\nax = v*sp.sin(theta)\nay = v*sp.cos(theta) - sp.sin(theta)\n\n# define the magnitude of g\ng = 9.8\n\n# check the options\nif ax == 0 and ay < g:\n    print('A')\nelif ax == 0 and ay == g:\n    print('B')\nelif ax < g and ay < g:\n    print('C')\nelse:\n    print('D')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 295, in execute_code\n    code = black.format_str(code_str, mode=black.FileMode())\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1079, in format_str\n    dst_contents = _format_str_once(src_contents, mode=mode)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1089, in _format_str_once\n    src_node = lib2to3_parse(src_contents.lstrip(), mode.target_versions)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/parsing.py\", line 127, in lib2to3_parse\n    raise exc from None\nblack.parsing.InvalidInput: Cannot parse: 1:3: Let's denote:\n",
    "question": "Which of the following would increase the capacitance of a parallel-plate capacitor?\nAnswer Choices: (A) Using smaller plates (B) Replacing the dielectric material between the plates with one that has a smaller dielectric constant (C) Decreasing the voltage between the plates (D) Moving the plates closer together Let's write a program.",
    "output": "Let's denote:\nC1 - the original capacitance\nC2 - the capacitance after the change\ndielectric_constant_1 - the original dielectric constant\ndielectric_constant_2 - the dielectric constant after the change\nplate_area - the area of the plates\nplate_distance - the distance between the plates\nvoltage - the voltage between the plates\nA - the dielectric constant\nB - the capacitance\nC - the area\nD - the distance\nE - the voltage\ncapacitance = ((plate_area * dielectric_constant * voltage) / plate_distance)\nprint(capacitance)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "A",
    "err": false,
    "question": "A man stands with his hands to his sides on a frictionless platform that is rotating. Which of the following could change the angular momentum of the man-platform system?\nAnswer Choices: (A) The man catches a baseball thrown to him by a friend. (B) The man thrusts his arms out away from his body (C) The man thrusts his arms out away from his body, and then quickly brings his arms back to his side again. (D) The man jumps straight up in the air and lands back on the platform. Let's write a program.",
    "output": "import numpy as np\n\n# Define the angular momentum\nangular_momentum = np.array([1, 0, 0])\n\n# Define the change in angular momentum for each option\noption_a = np.array([0, 0, 0])\noption_b = np.array([0, 0, 1])\noption_c = np.array([0, 0, -1])\noption_d = np.array([0, 0, 0])\n\n# Check which options can change the angular momentum\nif np.all(np.dot(angular_momentum, option_a) == 0):\n    print(\"A\")\nelif np.all(np.dot(angular_momentum, option_b) == 0):\n    print(\"B\")\nelif np.all(np.dot(angular_momentum, option_c) == 0):\n    print(\"C\")\nelse:\n    print(\"D\")",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "400000.0",
    "question": "A cylinder with a movable piston contains a gas at pressure P = 1 \u00d7 10^5 Pa, volume V = 20 cm^3, and temperature T = 273 K. The piston is moved downward in a slow steady fashion allowing heat to escape the gas and the temperature to remain constant. If the final volume of the gas is 5 cm^3, what will be the resulting pressure?\nAnswer Choices: (A) 0.25 \u00d7 10^5 Pa (B) 2 \u00d7 10^5 Pa (C) 4 \u00d7 10^5 Pa (D) 8 \u00d7 10^5 Pa Let's write a program.",
    "output": "import math\n\n# define the initial conditions\nP_initial = 1 * 10**5  # pressure in Pa\nV_initial = 20  # initial volume in cm^3\nT_initial = 273  # initial temperature in K\n\n# define the final volume\nV_final = 5  # final volume in cm^3\n\n# calculate the final pressure using the ideal gas law\n# P = nRT/V\n# we can write the number of moles n as PV/RT, which gives\n# P = (PV/RT)*RT/V = PV/V = P_initial*V_initial/V_final\n\nP_final = (P_initial*V_initial)/V_final\n\nprint(P_final)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "D",
    "gt": "D",
    "err": false,
    "question": "Which of the following types of electromagnetic radiation has the longest wavelength?\nAnswer Choices: (A) Gamma rays (B) Ultraviolet (C) Blue light (D) Orange light Let's write a program.",
    "output": "gamma_rays = 0.0000001\nultraviolet = 0.00001\nblue_light = 0.00004\norange_light = 0.00005\n\nif gamma_rays > ultraviolet and gamma_rays > blue_light and gamma_rays > orange_light:\n  print('A')\nelif ultraviolet > gamma_rays and ultraviolet > blue_light and ultraviolet > orange_light:\n  print('B')\nelif blue_light > gamma_rays and blue_light > ultraviolet and blue_light > orange_light:\n  print('C')\nelse:\n  print('D')",
    "correct": true
  },
  {
    "ans": "A",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 17, in run_it\nNameError: name 'A' is not defined\n",
    "question": "An electric motor has a label on it that reads: Input: 120V AC, 1.0 Amps, 60 Hz - Efficiency - 75%. At what constant speed can the motor lift up a 6 kg mass?\nAnswer Choices: (A) 0.5 m/s (B) 1.0 m/s (C) 1.5 m/s (D) 2.0 m/s Let's write a program.",
    "output": "InputVoltage = 120\r\nInputCurrent = 1\r\nInputFrequency = 60\r\nEfficiency = 0.75\r\nOutputMass = 6\r\ng = 9.81\r\n\r\nInputPower = (InputVoltage * InputCurrent) / Efficiency\r\nOutputPower = OutputMass * g\r\n\r\nif InputPower == OutputPower:\r\n    print(B)\r\nelif InputPower < OutputPower:\r\n    print(C)\r\nelse:\r\n    print(A)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "gt": "D",
    "err": false,
    "question": "A convex lens of focal length f = 0.2 m is used to examine a small coin lying on a table. During the examination, the lens is held a distance 0.3 m above the coin and is moved slowly to a distance of 0.1 m above the coin. During this process, what happens to the image of the coin?\nAnswer Choices: (A) The image continually increases in size. (B) The image continually decreases in size. (C) The image gets smaller at first and then bigger in size. (D) The image flips over. Let's write a program.",
    "output": "f1 = 0.2\nf2 = 0.1\n\nif f1>f2:\n  print('B')\nelse:\n  print('A')",
    "correct": false
  },
  {
    "ans": "C",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in run_it\nAttributeError: module 'math' has no attribute 'G'\n",
    "question": "The Space Shuttle orbits 300 km above Earth\u2019s surface; Earth\u2019s radius is 6,400 km. What is the gravitational acceleration experienced by the Space Shuttle?\nAnswer Choices: (A) Zero (B) 4.9 m/s^2 (C) 9.8 m/s^2 (D) 8.9 m/s^2 Let's write a program.",
    "output": "import math\n\n# define the variables\norbit_height = 300  # in km\nearth_radius = 6400  # in km\n\n# calculate the distance from the center of the Earth\ndistance = earth_radius + orbit_height\n\n# calculate the acceleration using the formula for gravitational acceleration\nacceleration = math.G * math.M_earth / (distance ** 2)\n\n# print the result\nprint(acceleration)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "B",
    "raw_ans": "800.0",
    "question": "An astronaut lands on a planet whose mass and radius are each twice that of Earth. If the astronaut weighs 800 N on Earth, how much will he weigh on this planet?\nAnswer Choices: (A) 200 N (B) 400 N (C) 800 N (D) 1600 N Let's write a program.",
    "output": "import math\n\n# define the variables\nEarth_mass = 1 # as a proportion of Earth's mass\nEarth_radius = 1 # as a proportion of Earth's radius\n\n# calculate the weight of the astronaut on Earth\nEarth_weight = 800 # N\n\n# calculate the weight of the astronaut on the planet\nplanet_weight = (Earth_weight * (2*Earth_mass) * (2*Earth_radius)) / ((2*Earth_radius)**2)\n\nprint(planet_weight)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "D",
    "err": false,
    "question": "Two people, one of mass 100 kg and the other of mass 50 kg, stand facing each other on an ice-covered (essentially frictionless) pond. If the heavier person pushes on the lighter one with a force F, then\nAnswer Choices: (A) the force felt by the heavier person is (-1/2)F (B) the force felt by the person is -2F (C) the magnitude of the acceleration of the lighter person will be half of the magnitude of the acceleration of the heavier person (D) the magnitude of the acceleration of the lighter person will be twice the magnitude of the acceleration of the heavier person Let's write a program.",
    "output": "lighter_person = 50\nheavier_person = 100\n\nF = 10\n\n# The force felt by the heavier person\nheavier_person_force = heavier_person * F\n\n# The force felt by the lighter person\nlighter_person_force = lighter_person * F\n\n# The magnitude of the acceleration of the lighter person\nlighter_person_acceleration = lighter_person_force / lighter_person\n\n# The magnitude of the acceleration of the heavier person\nheavier_person_acceleration = heavier_person_force / heavier_person\n\n# The magnitude of the acceleration of the lighter person will be half of the magnitude of the acceleration of the heavier person\nlighter_person_acceleration_half = heavier_person_acceleration / 2\n\n# The answer is A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "0.6",
    "question": "A 30 mF capacitor has 6 millicoulombs of charge on each plate. The energy stored in the capacitor is most nearly\nAnswer Choices: (A) 5.4 \u00d7 10\u201310 J (B) 9.0 \u00d7 10\u20138 J (C) 0.6 J (D) 12.5 J Let's write a program.",
    "output": "charge = 6\ncapacitance = 30\n\n# formula to calculate energy stored in a capacitor\n# E = (1/2) * C * V^2\n\n# V = Q/C\nvoltage = charge / capacitance\n\n# E = (1/2) * C * V^2\nenergy = 0.5 * capacitance * voltage**2\n\nprint(round(energy, 10))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "gt": "A",
    "err": false,
    "question": "Which configuration of battery and resistors will create a circuit with the greatest current?\nAnswer Choices: (A) A high voltage battery with resistors arranged in series (B) A high voltage battery with resistors arranged in parallel (C) A low voltage battery with resistors arranged in series (D) A low voltage battery with resistors arranged in parallel Let's write a program.",
    "output": "series_resistor = 1\nparallel_resistor = 1/((1/2)+(1/2))\n\nif series_resistor > parallel_resistor:\n  print(\"A\")\nelse:\n  print(\"B\")",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "C",
    "raw_ans": "0.0",
    "question": "A rubber ball (mass = 0.08 kg) is dropped from a height of 3.2 m, and after bouncing off the floor, rises almost to its original height. If the impact time with the floor is measured to be 0.04 s, what average force did the floor exert on the ball?\nAnswer Choices: (A) 0.16 N (B) 0.16 N (C) 0.32 N (D) 0.36 N Let's write a program.",
    "output": "import math\n\n# define the variables\nmass = 0.08\nheight = 3.2\ntime = 0.04\n\n# calculate the velocity before and after the bounce\nvelocity_before = math.sqrt(2 * mass * height)\nvelocity_after = velocity_before\n\n# calculate the change in velocity\ndelta_velocity = abs(velocity_before - velocity_after)\n\n# calculate the average force\naverage_force = delta_velocity / time\n\n# print the result\nprint(average_force)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 19, in run_it\nUnboundLocalError: cannot access local variable 'v' where it is not associated with a value\n",
    "question": "Two objects, a sphere and a block of the same mass, are released from rest at the top of an inclined plane. The sphere rolls down the inclined plane without slipping. The block slides down the plane without friction. Which object reaches the bottom of the ramp first?\nAnswer Choices: (A) The sphere, because it gains rotational kinetic energy, but the block does not (B) The sphere, because it gains mechanical energy due to the torque exerted on it, but the block does not (C) The block, because it does not lose mechanical energy due to friction, but the sphere does (D) The block, because it does not gain rotational kinetic energy, but the sphere does Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nm = sp.symbols('m')\n\n# The sphere rolls down the ramp without slipping. \n# This means that all the gravitational potential energy it gains is converted to rotational kinetic energy.\n# The block slides down the ramp without friction. \n# This means that all the gravitational potential energy it gains is converted to translational kinetic energy.\n\n# Thus, we can compare the rotational kinetic energy of the sphere to the translational kinetic energy of the block.\n\n# The rotational kinetic energy of a sphere is given by (1/2)mv^2, where v is the speed of the sphere.\n# The translational kinetic energy of a block is given by (1/2)mv^2, where v is the speed of the block.\n\n# Thus, we can set these two equations equal to each other and solve for v.\n\nv = sp.solve((1/2)*m*v**2, (1/2)*m*v**2)\n\n# The block has translational kinetic energy, while the sphere has rotational kinetic energy.\n# Therefore, the sphere reaches the bottom of the ramp first.\n\nprint('The sphere')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "gt": "C",
    "err": false,
    "question": "Which of the following changes to a double-slit interference experiment would increase the widths of the fringes in the interference pattern that appears on the screen?\nAnswer Choices: (A) Use light of a shorter wavelength. (B) Move the screen closer to the slits. (C) Move the slits closer together. (D) Use light with a lower wave speed. Let's write a program.",
    "output": "The width of the fringes in the interference pattern is given by the formula:\nwidth = \u03bb / d\nwhere \u03bb is the wavelength of the light and d is the distance between the slits and the screen.\nA. Using light of a shorter wavelength would increase the width of the fringes.\nB. Moving the screen closer would increase the width of the fringes.\nC. Moving the slits closer together would increase the width of the fringes.\nD. Using light with a lower wave speed would increase the width of the fringes.\nThe answer is B.",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "B",
    "raw_ans": "34.400000000000006 m/s upward",
    "question": "A stone is thrown vertically upward with an initial speed of 5 m/s. What is the velocity of the stone 3 seconds later?\nAnswer Choices: (A) 25 m/s, upward (B) 25 m/s, downward (C) 35 m/s, upward (D) 35 m/s, downward Let's write a program.",
    "output": "import math\n\n# initial speed\ninitial_speed = 5\n\n# time\ntime = 3\n\n# acceleration is constant and it is equal to the gravitational acceleration\nacceleration = 9.8\n\n# distance travelled by the stone\ndistance = initial_speed * time + 0.5 * acceleration * time**2\n\n# final speed\nfinal_speed = initial_speed + acceleration * time\n\n# direction of the final speed is upward if the distance is positive and downward if the distance is negative\nif distance > 0:\n    final_speed = abs(final_speed)\nelse:\n    final_speed = -abs(final_speed)\n\nprint(final_speed, 'm/s', 'upward' if distance > 0 else 'downward')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "D",
    "raw_ans": "0\n4",
    "question": "A particle is subjected to a conservative force whose potential energy function is U(x) = (x \u2013 2)3 \u2013 12x where U is given in joules when x is measured in meters. Which of the following represents a position of stable equilibrium?\nAnswer Choices: (A) x = \u20134 (B) x = \u20132 (C) x = 0 (D) x = 4 Let's write a program.",
    "output": "import sympy as sp\n\n# define the variable\nx = sp.symbols('x')\n\n# define the potential energy function\nU = (x - 2)**3 - 12*x\n\n# find the derivative of the potential energy function\ndU = sp.diff(U, x)\n\n# find the positions of stable equilibrium\nequilibria = sp.solve(dU, x)\n\n# print the positions of stable equilibrium\nfor eq in equilibria:\n    print(eq)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "A",
    "err": false,
    "question": "An electron (mass = m, charge = -E) is rotated with speed V upwards, in the plane of the page, into a region containing a uniform magnetic field B, that is directed into the plane of the page. Describe the electron's subsequent circular motion.\nAnswer Choices: (A) Clockwise rotation; radius of path = mv/(eB) (B) Counterclockwise rotation; radius of path = mv/(eB) (C) Clockwise rotation; radius of path = eB/(mv) (D) Counterclockwise rotation; radius of path = eB/(mv) Let's write a program.",
    "output": "A = mV**2/(eB)\nThe answer is A",
    "correct": true
  },
  {
    "ans": "B",
    "gt": "B",
    "err": false,
    "question": "A ball of mass is attached to a string connected to the ceiling, forming a pendulum. When the string is raised to an angle of 50 degrees below the horizontal (the ceiling) and released, the ball swings back and forth with a period of 0.4 s. Which of the following changes to the pendulum would decrease the period of the pendulum?\nAnswer Choices: (A) Increasing the mass of the ball (B) Decreasing the length of the string (C) Decreasing the angle of the string from the horizontal when released (D) Decreasing the mass of the ball Let's write a program.",
    "output": "def find_period(m, g, L, theta):\n    return 2 * L / (m * g * np.sin(theta))\n\n# define the variables\nm = 1  # mass of the ball in kg\ng = 9.81  # acceleration due to gravity in m/s^2\nL = 1  # length of the string in m\ntheta = np.deg2rad(50)  # angle of the string from the horizontal in radians\n\n# calculate the initial period\nT_initial = find_period(m, g, L, theta)\n\n# test the changes to the pendulum\n# A. Increasing the mass of the ball\nm = 2 * m\nT_m = find_period(m, g, L, theta)\n# B. Decreasing the length of the string\nL = L / 2\nT_L = find_period(m, g, L, theta)\n# C. Decreasing the angle of the string from the horizontal when released\ntheta = theta / 2\nT_theta = find_period(m, g, L, theta)\n# D. Decreasing the mass of the ball\nm = m / 2\nT_m = find_period(m, g, L, theta)\n\n# find the change that decreases the period the most\nT_final = min(T_m, T_L, T_theta, T_m)\n\n# print the answer\nif T_final == T_m:\n    print(\"A\")\nelif T_final == T_L:\n    print(\"B\")\nelif T_final == T_theta:\n    print(\"C\")\nelse:\n    print(\"D\")",
    "correct": true
  },
  {
    "ans": "D",
    "err": false,
    "gt": "B",
    "raw_ans": "The image moves toward the mirror and gets taller",
    "question": "What happens to the image formed by a concave mirror as the object is moved from far away to near the focal point?\nAnswer Choices: (A) The image moves away from the mirror and gets shorter. (B) The image moves away from the mirror and gets taller. (C) The image moves toward the mirror and gets shorter. (D) The image moves toward the mirror and gets taller. Let's write a program.",
    "output": "import math\n\n# define the focal length\nf = 1\n\n# calculate the image distance for two object distances\n# one far away from the focal point and the other at the focal point\nimage_distance_far = f * (1 + 1/math.sqrt(2))\nimage_distance_near = f * (1 - 1/math.sqrt(2))\n\n# calculate the height of the image for both object distances\n# the height of the image is inversely proportional to the image distance\nheight_far = 1 / image_distance_far\nheight_near = 1 / image_distance_near\n\n# as the object moves from far away to near the focal point, the image distance decreases\n# and the height of the image increases\n# therefore, the image moves toward the mirror and gets taller\n\nprint('The image moves toward the mirror and gets taller.')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "1.6",
    "question": "A disk of radius 0.1 m initially at rest undergoes an angular acceleration of 2.0 rad/s^2. If the disk only rotates, find the total distance traveled by a point on the rim of the disk in 4.0 s.\nAnswer Choices: (A) 0.4 m (B) 0.8 m (C) 1.2 m (D) 1.6 m Let's write a program.",
    "output": "import math\n\n# define the variables\nradius = 0.1  # in m\nangular_acceleration = 2.0  # in rad/s^2\ntime = 4.0  # in s\n\n# calculate the total distance traveled by a point on the rim of the disk\n# using the formula for the distance traveled by a point on the rim of a rotating disk\ndistance = 2 * radius * angular_acceleration * time\n\nprint(distance)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "16.0",
    "question": "A stone is thrown horizontally with an initial speed of 10 m/s from a bridge. Assuming that air resistance is negligible, how long would it take the stone to strike the water 80 m below the bridge?\nAnswer Choices: (A) 1 s (B) 2 s (C) 4 s (D) 8 s Let's write a program.",
    "output": "import math\n\n# define the initial speed\nv0 = 10  # m/s\n\n# define the distance to the water\ny = 80  # m\n\n# calculate the time of flight using the formula for the time of flight in a projectile motion\nt = 2 * y / v0\n\nprint(t)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "gt": "C",
    "err": false,
    "question": "Which of the following statements about electric and magnetic fields is FALSE:\nAnswer Choices: (A) A charge moving along the direction of an electric field will experience a force, but a charge moving along the direction of a magnetic field will not experience a force. (B) All charges experience a force in an electric field, but only moving charges can experience a force in a magnetic field. (C) A positive charge moves in the direction of an electric field; a positive charge moves perpendicular to a magnetic field. (D) All moving charges experience a force parallel to an electric field and perpendicular to a magnetic field. Let's write a program.",
    "output": "A = 'A charge moving along the direction of an electric field will experience a force, but a charge moving along the direction of a magnetic field will not experience a force.'\nB = 'All charges experience a force in an electric field, but only moving charges can experience a force in a magnetic field.'\nC = 'A positive charge moves in the direction of an electric field; a positive charge moves perpendicular to a magnetic field.'\nD = 'All moving charges experience a force parallel to an electric field and perpendicular to a magnetic field.'\n\nif A:\n    print('A')\nelif B:\n    print('B')\nelif C:\n    print('C')\nelse:\n    print('D')",
    "correct": false
  },
  {
    "ans": "C",
    "err": true,
    "gt": "B",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in run_it\nAttributeError: module 'math' has no attribute 'G'\n",
    "question": "The Space Shuttle orbits 300 km above the Earth\u2019s surface; the Earth\u2019s radius is 6400 km. What is the acceleration due to Earth\u2019s gravity experienced by the Space Shuttle?\nAnswer Choices: (A) 4.9 m/s^2 (B) 8.9 m/s^2 (C) 9.8 m/s^2 (D) 10.8 m/s^2 Let's write a program.",
    "output": "import math\n\n# define the variables\nr_earth = 6400 # km\nr_shuttle = 300 # km\n\n# calculate the distance between the center of Earth and the Shuttle\nr = r_earth + r_shuttle\n\n# calculate the acceleration due to Earth's gravity\ng = math.G * math.M_earth / (r**2)\n\n# print the result\nprint(g)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "gt": "D",
    "err": false,
    "question": "A confined ideal gas undergoes a cyclical process in three steps\u2014an isobaric step, followed by an isochoric step, followed by an isothermal step. Which of the following must be true?\nAnswer Choices: (A) The change in internal energy of the gas is equal to the work done during the isobaric step. (B) The change in internal energy of the gas is equal to the work done during the isobaric step minus the work done during the isothermal step. (C) The total work done during the cycle is positive. (D) The total work done during the cycle is equal but opposite to the net amount of heat transferred. Let's write a program.",
    "output": "U = 3/2*n*R*T\nW = P*V\nA\nSince it is an isobaric process, the change in internal energy is equal to the work done.\nB\nFor an isobaric process, the work done is\nFor an isochoric process, the work done is\nFor an isothermal process, the work done is\nC\nThe total work done is\nwhich is positive since P > 0 and V > 0\nD\nThe total work done is\nwhich is equal but opposite to the net amount of heat transferred, which is\nThe answer is B",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "A",
    "err": false,
    "question": "A sphere starts from rest atop a hill with a constant angle of inclination and is allowed to roll without slipping down the hill. What force provides the torque that causes the sphere to rotate?\nAnswer Choices: (A) Static friction (B) Kinetic friction (C) The normal force of the hill on the sphere (D) Gravity Let's write a program.",
    "output": "The torque required for the sphere to rotate is provided by the static friction force. This is because the static friction force acts parallel to the surface of the hill, and the torque is applied perpendicular to the surface. This torque causes the sphere to roll down the hill. The answer is A.",
    "correct": true
  },
  {
    "ans": "D",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 10, in <module>\n  File \"<string>\", line 3, in run_it\nNameError: name 'f' is not defined\n",
    "question": "A block is dragged along a table and experiences a frictional force, f, that opposes its movement. The force exerted on the block by the table is\nAnswer Choices: (A) zero (B) parallel to the table (C) perpendicular to the table (D) neither parallel nor perpendicular to the table Let's write a program.",
    "output": "force_exerted_by_table=0\r\nfrictional_force=f\r\nif force_exerted_by_table==frictional_force:\r\n  print(\"perpendicular to the table\")\r\nelif force_exerted_by_table==0:\r\n  print(\"zero\")\r\nelse:\r\n  print(\"parallel to the table\")\r",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "C",
    "raw_ans": "The electric force",
    "question": "A table supports a wooden block placed on the tabletop. Which fundamental force of nature is responsible for this interaction, and why?\nAnswer Choices: (A) The electric force, because the protons in the nuclei of the top atomic layer of the table repel the nuclei in the bottom atomic layer of the wood. (B) The gravitational force, because by F = GMm/r^2, the force of the table on the wood at that close range is sufficient to balance the force of the Earth on the wood. (C) The electric force, because the outer electrons in the top atomic layer of the table repel the outer electrons in the bottom atomic layer of the wood. (D) The strong nuclear force, because the protons in the nuclei of the top atomic layer of the table repel the nuclei in the bottom atomic layer of the wood. Let's write a program.",
    "output": "table_supports_block = False\r\n\r\nif table_supports_block:\r\n    print(\"The gravitational force\")\r\nelse:\r\n    print(\"The electric force\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "1.0",
    "question": "Which of the following is NOT equal to one tesla?\nAnswer Choices: (A) 1 J/(A*m^2) (B) 1 kg/(C*s) (C) 1 N/(A*m) (D) 1 A*N/V Let's write a program.",
    "output": "A = 1\r\nB = 1\r\nC = 1\r\nD = 1\r\nprint(A/B/C/D)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "gt": "A",
    "err": false,
    "question": "A children\u2019s toy consists of a cart whose very light wheels are attached to a rubber band. This rubber band can wind and unwind around the axle supporting the wheels. This toy is given a shove, after which the toy rolls across a flat surface and up a ramp. It is observed that the toy does not go a consistent distance up the ramp\u2014in some trials it ends up higher than in other trials, even though the shove imparts the same kinetic energy to the cart each time. Which of the following is a reasonable explanation for this phenomenon?\nAnswer Choices: (A) Depending on how the rubber band is initially wound, more or less potential energy can be transferred from the rubber band to the kinetic energy of the car\u2019s motion. (B) The normal force on the cart\u2019s wheels will be different depending on how much the rubber band winds or unwinds. (C) How much energy is transferred from kinetic energy to gravitational potential energy depends on the vertical height at which the cart ends up. (D) Some of the cart\u2019s initial kinetic energy will be dissipated due to work done by friction. Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nm, v, g, h = sp.symbols('m v g h')\n\n# The total energy of the system is the sum of the kinetic energy and the gravitational potential energy\n# The kinetic energy is given by 1/2*m*v^2 and the gravitational potential energy is m*g*h\n# The total energy is constant as the cart rolls up the ramp, so we can write 1/2*m*v^2 + m*g*h = constant\n\n# A children\u2019s toy consists of a cart whose very light wheels are attached to a rubber band. This rubber band can wind and unwind around the axle supporting the wheels.\n# It is observed that the toy does not go a consistent distance up the ramp\u2014in some trials it ends up higher than in other trials, even though the shove imparts the same kinetic energy to the cart each time.\n# Which of the following is a reasonable explanation for this phenomenon?\n# (A) Depending on how the rubber band is initially wound, more or less potential energy can be transferred from the rubber band to the kinetic energy of the car\u2019s motion.\n# (B) The normal force on the cart\u2019s wheels will be different depending on how much the rubber band winds or unwinds.\n# (C) How much energy is transferred from kinetic energy to gravitational potential energy depends on the vertical height at which the cart ends up.\n# (D) Some of the cart\u2019s initial kinetic energy will be dissipated due to work done by friction.\n\n# Let's say the initial velocity of the cart is v0 and the final velocity of the cart is v1.\n# The initial height of the cart is h0 and the final height of the cart is h1.\n# The total energy of the system is constant, so we can write 1/2*m*v0^2 + m*g*h0 = 1/2*m*v1^2 + m*g*h1\n\n# The answer is B",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "C",
    "raw_ans": "9.8",
    "question": "An object is released from rest and falls a distance h during the first second of time. How far will it fall during the next second of time?\nAnswer Choices: (A) h (B) 2h (C) 3h (D) 4h Let's write a program.",
    "output": "import math\n\n# define the distance covered in the first second\nh = 9.8 * 1  # assuming 1 is the time in seconds\n\n# calculate the distance covered in the next second\nnext_h = 9.8 * 1  # assuming 1 is the time in seconds\n\nprint(next_h)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "The linear momentum of the system is not conserved",
    "question": "Two ice skaters are moving on frictionless ice and are about to collide. The 50-kg skater is moving directly west at 4 m/s. The 75-kg skater is moving directly north at 2 m/s. After the collision they stick together. For this scenario, which of the following is true?\nAnswer Choices: (A) The linear momentum of the system is conserved because the net force on the system is nonzero during the collision. (B) Only the kinetic energy of the system is conserved because it is an inelastic collision. (C) Only the kinetic energy of the system is conserved because it is an elastic collision. (D) The linear momentum of the system is conserved because the net force on the system is zero. Let's write a program.",
    "output": "import sympy as sp\n\n# define the initial velocities\nv1 = 4 # in m/s\nv2 = 2 # in m/s\n\n# define the initial masses\nm1 = 50 # in kg\nm2 = 75 # in kg\n\n# calculate the total initial momentum\ntotal_initial_momentum = (m1*v1) + (m2*v2)\n\n# calculate the total final momentum\ntotal_final_momentum = (m1+m2)*sp.sqrt(v1**2 + v2**2)\n\n# check if the total initial momentum is equal to the total final momentum\nif total_initial_momentum == total_final_momentum:\n    print(\"The linear momentum of the system is conserved.\")\nelse:\n    print(\"The linear momentum of the system is not conserved.\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 10, in run_it\nNameError: name 'G' is not defined\n",
    "question": "The mass of the Earth is 5.97 \u00d7 10^24 kg. The Moon, whose center is 3.84 \u00d7 10^8 m from the Earth\u2019s center, has mass 7.35 \u00d7 10^22 kg. Which of the following is the best estimate of the gravitational force of the Earth on the Moon?\nAnswer Choices: (A) 10^39 N (B) 10^29 N (C) 10^19 N (D) 10^9 N Let's write a program.",
    "output": "import math\n\n# define the distance and mass of the Earth and Moon\ndistance = 3.84 * 10**8\nmass_Earth = 5.97 * 10**24\nmass_Moon = 7.35 * 10**22\n\n# calculate the gravitational force\nforce = (G * mass_Earth * mass_Moon) / distance**2\n\n# print the result\nprint(force)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "66.66666666666666",
    "question": "An object of volume 2 \u00d7 10^-3 m^3 and weight 6 N is placed into a tank of water, where it floats. What percentage of the object's volume is above the surface of the water?\nAnswer Choices: (A) 12% (B) 30% (C) 60% (D) 70% Let's write a program.",
    "output": "import math\n\n# define the volume of the object\nV_object = 2 * 10**-3  # m^3\n\n# define the weight of the object\nW_object = 6  # N\n\n# calculate the density of the object\nrho_object = W_object / V_object  # kg/m^3\n\n# define the density of water\nrho_water = 1000  # kg/m^3\n\n# calculate the fraction of the object's volume that is above the surface of the water\nfraction = (rho_object - rho_water) / rho_object\n\n# convert the fraction to a percentage\npercentage = fraction * 100\n\n# print the result\nprint(percentage)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "18.0000000000000",
    "question": "The position of an object is given by the equations x = 2.0t^3 + 4.0t + 6.25, where x is in meters and t is in seconds. What is the acceleration of the object at t = 1.50 s?\nAnswer Choices: (A) 6 m/s^2 (B) 12 m/s^2 (C) 18 m/s^2 (D) 24 m/s^2 Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nt = sp.symbols('t')\n\n# define the position equation\nx = 2.0*t**3 + 4.0*t + 6.25\n\n# calculate the acceleration\na = sp.diff(x, t, 2)\n\n# substitute t = 1.50 s\na_at_t_150 = a.subs(t, 1.50)\n\n# print the result\nprint(a_at_t_150)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "A",
    "raw_ans": "68670.0",
    "question": "A man stands in an elevator as it begins to ascend. Does the normal force from the floor do work on the man?\nAnswer Choices: (A) Yes, and the work done will be positive. (B) Yes, and the work done will be negative. (C) Yes, but the sign can\u2019t be determined. (D) No. Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nelevator_acceleration = 9.81  # m/s^2\nnormal_force = 700  # N\ndisplacement = 10  # m\n\n# calculate the work done by the normal force\nwork_done = elevator_acceleration * normal_force * displacement\n\n# print the result\nprint(work_done)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "A",
    "raw_ans": "40.0",
    "question": "How long would it take a car, starting from rest and accelerating uniformly in a straight line at 5 m/s^2, to cover a distance of 200 m ?\nAnswer Choices: (A) 9.0 s (B) 10.5 s (C) 12.0 s (D) 15.5 s Let's write a program.",
    "output": "time = 200/5\nprint(time)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "D",
    "err": false,
    "question": "Which of the following conditions are necessary for an object to be in static equilibrium? I. The vector sum of all torques on the object must equal zero. II. The vector sum of all forces on the object must equal zero. III. The sum of the object\u2019s potential and kinetic energies must be zero.\nAnswer Choices: (A) I only (B) II only (C) III only (D) I and II only Let's write a program.",
    "output": "Let's check each statement:\nI. The vector sum of all torques on the object must equal zero. This is true. For an object to be in static equilibrium, the net torque on it must be zero.\nII. The vector sum of all forces on the object must equal zero. This is not necessarily true. The vector sum of all forces on an object in static equilibrium is indeed zero, but it's only a necessary condition, not a sufficient condition.\nIII. The sum of the object\u2019s potential and kinetic energies must be zero. This is not necessarily true. The sum of an object\u2019s potential and kinetic energies is only zero for an object that is at rest. But, again, this is a necessary condition, not a sufficient one.\nThe answer is A.",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "A",
    "raw_ans": "The net force is in the positive direction, because the student\u2019s push caused the puck to speed up in the positive direction",
    "question": "A student pushes a puck across a table, moving it from position x = 0 to position x = 0.2 m. After he lets go, the puck continues to travel across the table, coming to rest at position x = 1.2 m. When the puck is at position x = 1.0 m, which of the following is a correct assertion about the net force on the puck?\nAnswer Choices: (A) The net force is in the negative direction, because the puck is moving in the positive direction but slowing down. (B) The net force is down, because the puck is near the Earth, where gravitational acceleration is 10 m/s^2 downward. (C) The net force is in the positive direction, because the student\u2019s push caused the puck to speed up in the positive direction. (D) The net force is zero, because the student\u2019s push in the positive direction must equal the force of friction in the negative direction. Let's write a program.",
    "output": "x = 0.2\r\nx1 = 1.0\r\nx2 = 1.2\r\n\r\nif x1>x2:\r\n  print('The net force is in the negative direction, because the puck is moving in the positive direction but slowing down.')\r\nelif x1<x2:\r\n  print('The net force is in the positive direction, because the student\u2019s push caused the puck to speed up in the positive direction.')\r\nelse:\r\n  print('The net force is zero, because the student\u2019s push in the positive direction must equal the force of friction in the negative direction.')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "B",
    "err": false,
    "question": "Experimenter A uses a very small test charge qo, and experimenter B uses a test charge 2qo to measure an electric field produced by two parallel plates. A finds a field that is\nAnswer Choices: (A) greater than the field found by B (B) the same as the field found by B (C) less than the field found by B (D) either greater or less than the field found by B, depending on the accelerations of the test charges Let's write a program.",
    "output": "qo = 1 # Experimenter A's test charge\r\nqo_2 = 2 * qo # Experimenter B's test charge\r\n\r\nif qo_2 > qo:\r\n  print('A.')\r\nelif qo_2 < qo:\r\n  print('C.')\r\nelse:\r\n  print('B.')",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "D",
    "raw_ans": "",
    "question": "Two objects, A and B, have equal charge and equal mass. Neither body is in motion because the gravitational and electrostatic forces between them are equal. If the mass of Object A is halved, equilibrium will be maintained if\nAnswer Choices: (A) the charge on Object A were doubled (B) the charge on Object B were halved (C) the charge on Object B were doubled (D) the mass on Object B were halved Let's write a program.",
    "output": "from sympy import Eq, Symbol, solve\r\n\r\n# m = mass of A\r\n# q = charge of A\r\n# r = distance between A and B\r\n\r\nm, q, r = Symbol('m'), Symbol('q'), Symbol('r')\r\n\r\neq1 = Eq((m/2)*q, (m*q)/2)\r\n\r\neq2 = Eq((m*q)/r, (m*q)/(r/2))\r\n\r\nanswer = solve((eq1, eq2), (m, q))\r\n\r\nfor i in answer:\r\n    if i == 2:\r\n        print(\"The charge on Object B were doubled.\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "11.11111111111111",
    "question": "A 2 \u03bcF capacitor is connected directly to a battery. When the capacitor is fully charged, it stores 600 \u03bcC of charge. An experimenter replaces the 2 \u03bcF capacitor with three 18 \u03bcF capacitors in series connected to the same battery. Once the capacitors are fully charged, what charge is stored on each capacitor?\nAnswer Choices: (A) 100 \u03bcC (B) 200 \u03bcC (C) 600 \u03bcC (D) 1800 \u03bcC Let's write a program.",
    "output": "initial_capacitance = 2  # in microfarads\ninitial_charge = 600  # in microcoulombs\n\n# define the capacitance of the individual capacitors\ncapacitor_1 = 18  # in microfarads\ncapacitor_2 = 18  # in microfarads\ncapacitor_3 = 18  # in microfarads\n\n# calculate the charge stored on the individual capacitors\nfinal_charge_per_capacitor = initial_charge / (capacitor_1 + capacitor_2 + capacitor_3)\n\nprint(final_charge_per_capacitor)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "B",
    "raw_ans": "0",
    "question": "A particle's kinetic energy is changing at a rate of \u20136.0 J/s when its speed is 3.0 m/s. What is the magnitude of the force on the particle at this moment?\nAnswer Choices: (A) 0.5 N (B) 2.0 N (C) 4.5 N (D) 9.0 N Let's write a program.",
    "output": "kinetic_energy = -6.0 # changing rate of kinetic energy in joule per second\nspeed = 3.0 # speed of the particle in meter per second\n\n# formula of kinetic energy: KE = 0.5 * mass * speed^2\n# solving for mass: mass = -2 * KE / speed^2\n# force is equal to the product of mass and acceleration: F = mass * acceleration\n# acceleration is equal to the derivative of speed with respect to time: a = d/dt(v)\n# since the particle's speed is not changing, we can say that a = 0\n# therefore, F = 0\n\nforce = 0\nprint(force)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 21, in <module>\n  File \"<string>\", line 10, in run_it\nNameError: name 'angle_of_the_road' is not defined\n",
    "question": "A car rounds a banked curve of uniform radius. Three forces act on the car: a friction force between the tires and the road, the normal force from the road, and the weight of the car. Which provides the centripetal force which keeps the car in circular motion?\nAnswer Choices: (A) the friction force alone (B) the normal force alone (C) the weight alone (D) a combination of the normal force and the friction force Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nm = sp.symbols('m')  # mass of the car\nr = sp.symbols('r')  # radius of the curve\ng = sp.symbols('g')  # acceleration due to gravity\n\n# calculate the normal force (which is the component of the weight force perpendicular to the road)\nnormal_force = m * g * sp.cos(angle_of_the_road)\n\n# calculate the friction force (which is the component of the weight force parallel to the road)\nfriction_force = m * g * sp.sin(angle_of_the_road)\n\n# the centripetal force is the net force in the radial direction which must be equal to the weight of the car\n# since the curve is uniform, the net force in the radial direction is the difference between the normal force and the friction force\ncentripetal_force = normal_force - friction_force\n\n# print the answer\nprint(centripetal_force)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "49.394104911416306",
    "question": "A stone is thrown horizontally with an initial speed of 30 m/s from a bridge. Find the stone's total speed when it enters the water 4 seconds later, assuming that air resistance is negligible.\nAnswer Choices: (A) 30 m/s (B) 40 m/s (C) 50 m/s (D) 60 m/s Let's write a program.",
    "output": "initial_speed = 30 # m/s\r\ntime = 4 # seconds\r\n\r\n# horizontal speed does not change\r\nhorizontal_speed = initial_speed\r\n\r\n# vertical speed is given by -9.81t (where t is time in seconds)\r\nvertical_speed = -9.81 * time\r\n\r\n# total speed is the hypotenuse of the horizontal and vertical speed\r\ntotal_speed = ((horizontal_speed)**2 + (vertical_speed)**2)**0.5\r\n\r\nprint(total_speed)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 10, in run_it\nNameError: name 'G' is not defined\n",
    "question": "What happens to the force of gravitational attraction between two small objects if the mass of each object is doubled and the distance between their centers is doubled?\nAnswer Choices: (A) It is doubled. (B) It is quadrupled. (C) It is halved. (D) It remains the same. Let's write a program.",
    "output": "import math\n\n# define the initial conditions\nm1 = 1  # mass of one object\nm2 = 1  # mass of the other object\nr = 1  # distance between their centers\n\n# calculate the initial force\nF1 = (G * m1 * m2) / r**2\n\n# define the new conditions\nm1_new = 2 * m1\nm2_new = 2 * m2\nr_new = 2 * r\n\n# calculate the new force\nF2 = (G * m1_new * m2_new) / r_new**2\n\n# calculate the ratio of the new force to the initial force\nratio = F2 / F1\n\n# print the result\nprint(ratio)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "gt": "B",
    "err": false,
    "question": "How much current does a 60 W light bulb draw if it operates at a voltage of 120 V ?\nAnswer Choices: (A) 0.25 A (B) 0.5 A (C) 2:00 AM (D) 4:00 AM Let's write a program.",
    "output": "Let's solve the multi-choice question step by step.\nCurrent = Power / Voltage\nCurrent = 60 / 120\nCurrent = 0.5 A\nThe answer is B",
    "correct": true
  },
  {
    "ans": "A",
    "gt": "B",
    "err": false,
    "question": "What happens to the pressure, P, of an ideal gas if the temperature is increased by a factor of 2 and the volume is increased by a factor of 8 ?\nAnswer Choices: (A) P decreases by a factor of 16. (B) P decreases by a factor of 4. (C) P decreases by a factor of 2. (D) P increases by a factor of 4. Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nP = sp.symbols('P')\n\n# The pressure of an ideal gas is given by the equation P = n*R*T\n# n is the number of moles, R is the gas constant, and T is the temperature\n# If the temperature is increased by a factor of 2 and the volume is increased by a factor of 8, then the new pressure is P*2*8\n\nP_new = P * 2 * 8\n\n# The ratio of the new pressure to the old pressure is P_new/P = 2*8 = 16\n# The answer is A.",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "C",
    "err": false,
    "question": "A beam of monochromatic light entering a glass window pane from the air will experience a change in\nAnswer Choices: (A) frequency and wavelength (B) frequency and speed (C) speed and wavelength (D) speed only Let's write a program.",
    "output": "speed = 1\nwavelength = 1\nfrequency = 1\n\nanswer = \"A\"\n\nif frequency == 1 and wavelength == 1:\n    answer = \"A\"\nelif frequency == 1:\n    answer = \"B\"\nelif wavelength == 1:\n    answer = \"C\"\nelse:\n    answer = \"D\"\n\nprint(answer)",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "The False is not true.\nThe False is not true",
    "question": "A rigid, solid container of constant volume holds an ideal gas of volume v1 and temperature T1 and pressure P1. The temperature is increased in an isochoric process. Which of the following is NOT true?\nAnswer Choices: (A) The average speed of the molecules increases. (B) The pressure increases. (C) The kinetic energy of the system increases. (D) The volume increases. Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nv1, T1, P1 = sp.symbols('v1 T1 P1')\n\n# ideal gas law\nP1 = v1*T1 / (sp.Rational(1, 2))\n\n# temperature increases\nT2 = T1 + 1\n\n# constant volume\nv2 = v1\n\n# ideal gas law\nP2 = v2*T2 / (sp.Rational(1, 2))\n\n# pressure increases\nbool_pres = P2 > P1\n\n# average speed of the molecules\n# it's inversely proportional to the square root of the pressure.\n# so, if the pressure increases, the average speed decreases\nbool_speed = False\n\n# kinetic energy of the system\n# it's directly proportional to the square of the average speed.\n# so, if the average speed decreases, the kinetic energy decreases\nbool_kinet = False\n\n# volume increases\nbool_vol = v2 > v1\n\n# check which options are not true\nfor i in [bool_pres, bool_speed, bool_kinet, bool_vol]:\n  if i == False:\n    print('The ' + str(i) + ' is not true.')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "A",
    "raw_ans": "The wave speed on the string is fixed",
    "question": "A string of fixed tension and linear mass density is attached to a vibrating speaker. It is observed that a speaker frequency of 60 Hz does not produce standing waves in the string. Which explanation for this phenomenon is correct?\nAnswer Choices: (A) The string length is not a multiple of half the wavelength of the wave. (B) The wave speed on the string is fixed. (C) 60 Hz is in the lowest range of audible sound. (D) The wavelength of the wave produced by the speaker is equal to the speed of waves on the string divided by 60 Hz. Let's write a program.",
    "output": "string_tension = 60\r\naudible_sound = 60\r\n\r\nif string_tension == audible_sound:\r\n    print('The wave speed on the string is fixed.')\r\nelse:\r\n    print('The speaker frequency of 60 Hz does not produce standing waves in the string.')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "gt": "D",
    "err": false,
    "question": "A spherical charge distribution varies with the radius r by the equation \u03c1 = ar, where \u03c1 is the volume charge density and a is a positive constant. The distribution goes out to a radius R. Which of the following is true of the electric field strength due to this charge distribution at a distance r from the center?\nAnswer Choices: (A) It increases as r approaches infinity. (B) It decreases linearly for r > R. (C) It increases linearly for r > R. (D) It increases non-linearly for r < R. Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nr, R, a = sp.symbols('r R a')\n\n# calculate the volume charge density\nrho = a*r\n\n# calculate the volume of the sphere\nV = sp.pi*R**2\n\n# calculate the total charge\nQ = V*rho.subs(r,R)\n\n# calculate the electric field strength\nE = Q/(4*sp.pi*r**2)\n\n# E increases linearly for r > R\n# E decreases linearly for r < R\n# E approaches 0 as r approaches infinity\n\n# hence, The answer is B.",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "C",
    "raw_ans": "appears higher than 400 Hz and the frequency decreases as it falls",
    "question": "An alarm whose frequency is 400 Hz is dropped out of a third-floor window. The student who drops it measures the frequency with a very sensitive oscilloscope. The measured frequency\nAnswer Choices: (A) appears higher than 400 Hz and the frequency increase as it falls (B) appears higher than 400 Hz and the frequency decreases as it falls (C) appears lower than 400 Hz and the frequency decreases as it falls (D) appears lower than 400 Hz and the frequency increases as it falls Let's write a program.",
    "output": "AlarmFreq = 400\r\nSensitiveOscilloscopeFreq = 100\r\nif AlarmFreq>SensitiveOscilloscopeFreq:\r\n print(\"appears higher than 400 Hz and the frequency decreases as it falls\")\r\nelif AlarmFreq<SensitiveOscilloscopeFreq:\r\n print(\"appears lower than 400 Hz and the frequency increases as it falls\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "98.69604401089357",
    "question": "Heat is added to a cylindrical aluminum rod of radius Q and length \u2113. The temperature difference between the two ends of the rod varies from 10\u00b0C to 20\u00b0C. What geometric factors will influence the rate heat is transferred along the rod?\nAnswer Choices: (A) Only the length (B) Only the area of the rod (C) Both the length and area (D) Neither the length nor area Let's write a program.",
    "output": "import math\n\n# define the variables\nradius = 1  # in cm\nlength = 10  # in cm\n\n# calculate the area of the rod\narea = math.pi * radius**2\n\n# calculate the volume of the rod\nvolume = math.pi * radius**2 * length\n\n# calculate the rate of heat transfer\n# assuming that the heat transfer is directly proportional to the area, volume, and the temperature difference\n# since the temperature difference is relatively small, we can ignore it\nrate = area * volume\n\n# print the result\nprint(rate)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "B",
    "raw_ans": "An inverted, real image about 20 cm behind her eyes",
    "question": "Optometrists use a linear scale of lens power, measured in diopters, to prescribe corrective lenses. Sufferers of myopia, or nearsightedness, have difficulty resolving distant objects because the lenses in their eyes are too strong. If a myopic person has a prescription of -5 diopters, what image do her corrective lenses create for distant objects?\nAnswer Choices: (A) An upright, real image about 20 cm in front of her eyes (B) An upright, virtual image about 20 cm in front of her eyes (C) An inverted, real image about 20 cm behind her eyes (D) An inverted, virtual image 5 cm behind her eyes Let's write a program.",
    "output": "lens_power = -5\r\nimage_distance = 20\r\n\r\nif lens_power > 0:\r\n  print('An upright, real image about 20 cm in front of her eyes.')\r\nelse:\r\n  print('An inverted, real image about 20 cm behind her eyes.')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "The spheres will experience an electrostatic attraction",
    "question": "A nonconducting sphere is given a nonzero net electric charge, +Q, and then brought close to a neutral conducting sphere of the same radius. Which of the following will be true?\nAnswer Choices: (A) An electric field will be induced within the conducting sphere. (B) The conducting sphere will develop a net electric charge of \u2013Q. (C) The spheres will experience an electrostatic attraction. (D) The spheres will experience an electrostatic repulsion. Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nQ = sp.symbols('Q')\n\n# the net electric charge of the nonconducting sphere\n# is given as +Q. It will distribute itself on the\n# surface of the conducting sphere.\n\n# The conducting sphere will develop a net electric charge\n# of -Q due to induction of an electric field within it.\n\n# Hence, the conducting sphere will experience an electrostatic attraction\n# with the nonconducting sphere.\n\nC = 'The spheres will experience an electrostatic attraction.'\n\nprint(C)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "4*charge*mass*velocity",
    "question": "A charged particle moves through a magnetic field and experiences a force f. New particles are sent into the same magnetic field. If the new particles have twice the charge, twice the mass, and twice the velocity, the new force would be\nAnswer Choices: (A) 4F (B) 2F (C) F (D) 1/2 F Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\ncharge = sp.symbols('charge')\nmass = sp.symbols('mass')\nvelocity = sp.symbols('velocity')\n\n# define the force equation\nforce = (charge * mass * velocity) / 2\n\n# it is given that twice the charge, twice the mass, and twice the velocity\nnew_force = (2*charge * 2*mass * 2*velocity) / 2\n\n# the new force would be\nnew_force = sp.simplify(new_force)\n\nprint(new_force)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "2.5e-06",
    "question": "An electric dipole consists of a pair of equal but opposite point charges of magnitude 4.0 nC separated by a distance of 2.0 cm. What is the electric field strength at the point midway between the charges?\nAnswer Choices: (A) 0 (B) 9.0 \u00d7 10^4 V/m (C) 1.8 \u00d7 10^5 V/m (D) 7.2 \u00d7 10^5 V/m Let's write a program.",
    "output": "import math\n\n# define the charges and distance\nq = 4.0e-9 # in Coulomb\nd = 2.0e-2 # in metres\n\n# calculate the electric field strength at the midpoint\nE = (q/d**2) * (1/4) # in V/m\n\nprint(E)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "C",
    "raw_ans": "4.0",
    "question": "Two isolated particles, A and B, are 4 m apart. Particle A has a net charge of 2Q, and B has a net charge of Q. The ratio of the magnitude of the electric force on A to that on B is\nAnswer Choices: (A) 4:01 (B) 2:01 (C) 1:01 (D) 1:02 Let's write a program.",
    "output": "import math\n\n# define the distance between the particles\ndistance = 4\n\n# define the charges\nQ_A = 2\nQ_B = 1\n\n# calculate the forces\nforce_A = math.pow(Q_A, 2) / (4*math.pi*math.pow(distance, 2))\nforce_B = math.pow(Q_B, 2) / (4*math.pi*math.pow(distance, 2))\n\n# calculate the ratio\nratio = force_A / force_B\n\n# print the ratio\nprint(ratio)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "D",
    "err": false,
    "question": "A rock drops onto a pond with a smooth surface. A few moments later, the wave produced by the rock\u2019s impact arrives at the shore, touching the ankles of a wading child. Which of the following observations provides evidence that the portion of the wave hitting the child\u2019s ankles carries less energy than the wave did when it was first created by the rock\u2019s impact?\nAnswer Choices: (A) The wave is moving more slowly. (B) The wave pulse\u2019s width has become greater. (C) The wave pulse\u2019s width has become smaller. (D) The wave\u2019s height has become smaller. Let's write a program.",
    "output": "Let's analyze each of these:\nA. The wave is moving more slowly.\nThis is true, as the wave will travel slower once it has reached the shallow water near the shore. The energy in the wave will be proportional to the velocity of the wave times the height of the wave. Since the velocity is lower, the energy is lower.\nB. The wave pulse\u2019s width has become greater.\nThis is not true. The width of the wave is a measure of the spread of the water. As the wave travels, it becomes more narrow, as the water becomes more focused. This is not the correct answer.\nC. The wave pulse\u2019s width has become smaller.\nThis is not true. The width of the wave is a measure of the spread of the water. As the wave travels, it becomes more narrow, as the water becomes more focused. This is not the correct answer.\nD. The wave\u2019s height has become smaller.\nThis is not true. The height of the wave is a measure of how much energy the wave has. As the wave travels, its height decreases, but its energy remains the same. This is not the correct answer.\nThe correct answer is A.",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "20.0",
    "question": "Physics students are checking the constant acceleration equations of kinematics by measuring the velocity of a tennis ball that is dropped and falls 6 meters and then passes through a photogate. The predicted velocity is 20% above the velocity measured by the photogate. Which of the following best describes the cause of the large percent difference?\nAnswer Choices: (A) The ball changes its shape while falling. (B) The acceleration of gravity varies as the ball is falling. (C) Air resistance increases the acceleration of the ball. (D) The acceleration of the balls varies with the velocity. Let's write a program.",
    "output": "import math\n\n# define the variables\nheight = 6 # meters\n\n# calculate the velocity using the constant acceleration equations\nvelocity = math.sqrt(2*height/0.2) # 0.2 is the coefficient of restitution\n\n# the predicted velocity is 20% above the velocity measured by the photogate\npredicted_velocity = velocity * 1.2\n\n# calculate the percent difference\npercent_difference = abs(predicted_velocity - velocity) / velocity * 100\n\n# print the result\nprint(percent_difference)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "1.2",
    "question": "Mercury orbits the sun in about one-fifth of an Earth year. If 1 AU is defined as the distance from the Earth to the sun, what is the approximate distance between Mercury and the sun?\nAnswer Choices: (A) (1/25) AU (B) (1/9) AU (C) (1/5) AU (D) (1/3) AU Let's write a program.",
    "output": "distance_from_earth_to_sun = 1 # AU\norbit_of_mercury = 1/5\ndistance_from_mercury_to_sun = distance_from_earth_to_sun + orbit_of_mercury\nprint(distance_from_mercury_to_sun)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "D",
    "raw_ans": "0.1019367991845056",
    "question": "The Gravitron is a carnival ride that looks like a large cylinder. People stand inside the cylinder against the wall as it begins to spin. Eventually, it is rotating fast enough that the floor can be removed without anyone falling. Given then the coefficient of friction between a person\u2019s clothing and the wall is \u03bc, the tangential speed is v, and the radius of the ride is R, what is greatest mass that a person can be to safely go on this ride?\nAnswer Choices: (A) \u03bcv^2/(rg) (B) r^2v^2/(\u03bcg) (C) rg/(\u03bcv^2) (D) None of the above. Let's write a program.",
    "output": "import math\n\n# define the variables\nmu, v, R, g = 1, 1, 1, 9.81\n\n# calculate the greatest mass\nmax_mass = mu * v**2 / (R * g)\n\nprint(max_mass)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "B",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 24, in <module>\n  File \"<string>\", line 17, in run_it\nAttributeError: module 'math' has no attribute 'g'\n",
    "question": "An artificial satellite orbits Earth just above the atmosphere in a circle with constant speed. A small meteor collides with the satellite at point P in its orbit, increasing its speed by 1%, but not changing the instantaneous direction of the satellite\u2019s velocity. Which of the following describes the satellite\u2019s new orbit?\nAnswer Choices: (A) The satellite now orbits in an ellipse, with P as the farthest approach to Earth. (B) The satellite now orbits in an ellipse, with P as the closest approach to Earth. (C) The satellite now orbits in a circle of larger radius. (D) The satellite now orbits in a circle of smaller radius. Let's write a program.",
    "output": "import math\n\n# Define the initial radius of the satellite\nr_initial = math.inf\n\n# Define the speed of the satellite\nv_initial = 0\n\n# Define the increase in speed\nincrease = 0.01\n\n# Calculate the new speed\nv_new = v_initial + increase * v_initial\n\n# The new radius is given by the formula for the centripetal force\nr_new = v_new**2 / (2 * math.g)\n\n# The orbit now has a larger radius if the new radius is greater than the initial radius\nif r_new > r_initial:\n    print('C')\nelse:\n    print('D')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "an average of 10 times, with an rms deviation of about 3",
    "question": "The quantum efficiency of a photon detector is 0.1. If 100 photons are sent into the detector, one after the other, the detector will detect photons\nAnswer Choices: (A) an average of 10 times, with an rms deviation of about 4 (B) an average of 10 times, with an rms deviation of about 3 (C) an average of 10 times, with an rms deviation of about 1 (D) an average of 10 times, with an rms deviation of about 0.1 Let's write a program.",
    "output": "import math\n\n# define the variables\nqe = 0.1\nnum_photons = 100\n\n# calculate the average number of photons detected\navg_detected = qe * num_photons\n\n# calculate the rms deviation\nrms_deviation = math.sqrt(qe * (1 - qe) * num_photons)\n\n# print the result\nprint(\"an average of\", round(avg_detected), \"times, with an rms deviation of about\", round(rms_deviation))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "C",
    "raw_ans": "500",
    "question": "White light is normally incident on a puddle of water (index of refraction 1.33). A thin (500 nm) layer of oil (index of refraction 1.5) floats on the surface of the puddle. Of the following, the most strongly reflected wavelength is\nAnswer Choices: (A) 500 nm (B) 550 nm (C) 600 nm (D) 650 nm Let's write a program.",
    "output": "import math\n\n# define the wavelengths\nwavelengths = [500, 550, 600, 650]\n\n# calculate the reflection coefficient for each wavelength\nreflection_coefficients = [((1.33**2 - 1.5**2) / (1.33**2 + 1.5**2))**2 for wavelength in wavelengths]\n\n# find the wavelength with the highest reflection coefficient\nmax_reflection_wavelength = max(zip(wavelengths, reflection_coefficients), key=lambda x: x[1])\n\nprint(max_reflection_wavelength[0])",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "gt": "C",
    "err": false,
    "question": "Which of the following is true about any system that undergoes a reversible thermodynamic process?\nAnswer Choices: (A) There are no changes in the internal energy of the system. (B) The temperature of the system remains constant during the process. (C) The entropy of the system and its environment remains unchanged. (D) The entropy of the system and its environment must increase. Let's write a program.",
    "output": "The answer is C",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "A",
    "raw_ans": "1",
    "question": "The best type of laser with which to do spectroscopy over a range of visible wavelengths is\nAnswer Choices: (A) a dye laser (B) a helium-neon laser (C) an excimer laser (D) a ruby laser Let's write a program.",
    "output": "a=1\r\nb=2\r\nc=3\r\nd=4\r\nlaser_type=1\r\nprint(laser_type)\r\n",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "gt": "B",
    "err": false,
    "question": "Excited states of the helium atom can be characterized as para- (antiparallel electron spins) and ortho- (parallel electron spins). The observation that an ortho- state has lower energy than the corresponding para- state can be understood in terms of which of the following?\nAnswer Choices: (A) The Heisenberg uncertainty principle (B) The Pauli exclusion principle (C) The Bohr model of the atom (D) Nuclear hyperfine coupling Let's write a program.",
    "output": "Let's denote the ground state (para) as p and the excited state (ortho) as o.\nThe ortho state is higher in energy than the para state because the excited electron is subject to the influence of the electric field of the nucleus, which polarizes the electron spins.\nThe answer is D.",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "C",
    "raw_ans": "8.151388888888889",
    "question": "Which of the following gives the total spin quantum number of the electrons in the ground state of neutral nitrogen (Z = 7)?\nAnswer Choices: (A) 1/2 (B) 1 (C) 3/2 (D) 5/2 Let's write a program.",
    "output": "from math import factorial\n\n# define the number of electrons and the atomic number\nn_electrons = 7\nZ = 7\n\n# calculate the total spin quantum number\ntotal_spin = sum([(2*Z - 2*i + 1) / (factorial(Z-i)) for i in range(1, Z+1)])\n\nprint(total_spin)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "V_0/3",
    "question": "Consider three identical, ideal capacitors. The first capacitor is charged to a voltage and then disconnected from the battery. The other two capacitors, initially uncharged and connected in series, are then connected across the first capacitor. What is the final voltage on the first capacitor?\nAnswer Choices: (A) V_0/5 (B) V_0/3 (C) V_0/2 (D) 2V_0/3 Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nV_0 = sp.symbols('V_0')\n\n# The voltage on the first capacitor after the two other capacitors are connected in series is given by the formula for the voltage on a capacitor in series with two other capacitors: V_final = V_0 * (C_total - C_1) / (C_total)\n# Here, C_total = 2*C_1 (since the other two capacitors are identical and in series) and C_1 = C_1\n# Therefore, we have V_final = V_0 * (2*C_1 - C_1) / (2*C_1) = V_0/3\n\nprint(V_0/3)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "A",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 11, in <module>\n  File \"<string>\", line 5, in run_it\nAttributeError: module 'math' has no attribute 'speed_of_light'\n",
    "question": "Protons used in cancer therapy are typically accelerated to about 0.6c. How much work must be done on a particle of mass m in order for it to reach this speed, assuming it starts at rest?\nAnswer Choices: (A) 0.25mc^2 (B) 0.60mc^2 (C) 0.67mc^2 (D) 1.25mc^2 Let's write a program.",
    "output": "import math\n\n# define the speed in terms of the speed of light\nv = 0.6 * math.speed_of_light\n\n# calculate the work using the formula W = m*v^2\nwork = m * v**2\n\nprint(work)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "A",
    "err": false,
    "question": "De Broglie hypothesized that the linear momentum and wavelength of a free massive particle are related by which of the following constants?\nAnswer Choices: (A) Planck\u2019s constant (B) Boltzmann\u2019s constant (C) The Rydberg constant (D) The speed of light Let's write a program.",
    "output": "de Broglie hypothesized that the linear momentum and wavelength of a free massive particle are related by Planck\u2019s constant. Hence, the correct constant is A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "2.8284271247461903",
    "question": "If the total energy of a particle of mass m is equal to twice its rest energy, then the magnitude of the particle\u2019s relativistic momentum is\nAnswer Choices: (A) mc/2 (B) mc/(2^(1/2)) (C) mc (D) (3^(1/2))mc Let's write a program.",
    "output": "import math\n\n# define the rest energy\nrest_energy = 2\n\n# define the mass\nmass = 2\n\n# calculate the speed\nspeed = math.sqrt(2*rest_energy/mass)\n\n# calculate the relativistic momentum\nrelativistic_momentum = mass * speed\n\nprint(relativistic_momentum)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "4 * N\n\n#",
    "question": "In the diamond structure of elemental carbon, the nearest neighbors of each C atom lie at the corners of a\nAnswer Choices: (A) square (B) hexagon (C) cube (D) tetrahedron Let's write a program.",
    "output": "import math\n\n# number of atoms in a unit cell\nn = 4\n\n# the distance between two nearest neighbors in a unit cell\nd = math.sqrt(3)\n\n# the volume of a unit cell\nV = n * (math.pow(d, 3))\n\n# the number of atoms in a unit cell\nN = V / (math.pow(d, 3))\n\n# the number of edges in a unit cell\nE = 4 * N\n\n# the number of faces in a unit cell\nF = 6 * N\n\n# the number of tetrahedra in a unit cell\nT = 4 * N\n\n# the number of octahedra in a unit cell\nO = 2 * N\n\n# the number of cubes in a unit cell\nC = N\n\n# the number of hexagons in a unit cell\nH = 2 * N\n\n# the number of squares in a unit cell\nS = 4 * N\n\n# the number of pyramids in a unit cell\nP = 4 * N\n\n# the number of prisms in a unit cell\nPr = 2 * N\n\n# the number of tetrahedra in a unit cell\nT = 4 * N\n\n# the number of octahedra in a unit cell\nO = 2 * N\n\n# the number of cubes in a unit cell\nC = N\n\n# the number of hexagons in a unit cell\nH = 2 * N\n\n# the number of squares in a unit cell\nS = 4 * N\n\n# the number of pyramids in a unit cell\nP = 4 * N\n\n# the number of prisms in a unit cell\nPr = 2 * N\n\n# the number of tetrahedra in a unit cell\nT = 4 * N\n\n# the number of octahedra in a unit cell\nO = 2 * N\n\n# the number of cubes in a unit cell\nC = N\n\n# the number of hexagons in a unit cell\nH = 2 * N\n\n# the number of squares in a unit cell\nS = 4 * N\n\n# the number of pyramids in a unit cell\nP = 4 * N\n\n# the number of prisms in a unit cell\nPr = 2 * N\n\n# the number of tetrahedra in a unit cell\nT = 4 * N\n\n# the number of octahedra in a unit cell\nO = 2 * N\n\n# the number of cubes in a unit cell\nC = N\n\n# the number of hexagons in a unit cell\nH = 2 * N\n\n# the number of squares in a unit cell\nS = 4 * N\n\n# the number of pyramids in a unit cell\nP = 4 * N\n\n# the number of prisms in a unit cell\nPr = 2 * N\n\n# the number of tetrahedra in a unit cell\nT = 4 * N\n\n# the number of octahedra in a unit cell\nO = 2 * N\n\n# the number of cubes in a unit cell\nC = N\n\n# the number of hexagons in a unit cell\nH = 2 * N\n\n# the number of squares in a unit cell\nS = 4 * N\n\n# the number of pyramids in a unit cell\nP = 4 * N\n\n# the number of prisms in a unit cell\nPr = 2 * N\n\n# the number of tetrahedra in a unit cell\nT = 4 * N\n\n# the number of octahedra in a unit cell\nO = 2 * N\n\n# the number of cubes in a unit cell\nC = N\n\n# the number of hexagons in a unit cell\nH = 2 * N\n\n# the number of squares in a unit cell\nS = 4 * N\n\n# the number of pyramids in a unit cell\nP = 4 * N\n\n# the number of prisms in a unit cell\nPr = 2 * N\n\n# the number of tetrahedra in a unit cell\nT = 4 * N\n\n# the number of octahedra in a unit cell\nO = 2 * N\n\n# the number of cubes in a unit cell\nC = N\n\n# the number of hexagons in a unit cell\nH = 2 * N\n\n# the number of squares in a unit cell\nS = 4 * N\n\n# the number of pyramids in a unit cell\nP = 4 * N\n\n# the number of prisms in a unit cell\nPr = 2 * N\n\n# the number of tetrahedra in a unit cell\nT = 4 * N\n\n# the number of octahedra in a unit cell\nO = 2 * N\n\n# the number of cubes in a unit cell\nC = N\n\n# the number of hexagons in a unit cell\nH = 2 * N\n\n# the number of squares in a unit cell\nS = 4 * N\n\n# the number of pyramids in a unit cell\nP = 4 * N\n\n# the number of prisms in a unit cell\nPr = 2 * N\n\n# the number of tetrahedra in a unit cell\nT = 4 * N\n\n# the number of octahedra in a unit cell\nO = 2 * N\n\n# the number of cubes in a unit cell\nC = N\n\n# the number of hexagons in a unit cell\nH = 2 * N\n\n# the number of squares in a unit cell\nS = 4 * N\n\n# the number of pyramids in a unit cell\nP = 4 * N\n\n# the number of prisms in a unit cell\nPr = 2 * N\n\n# the number of tetrahedra in a unit cell\nT = 4 * N\n\n# the number of octahedra in a unit cell\nO = 2 * N\n\n# the number of cubes in a unit cell\nC = N\n\n# the number of hexagons in a unit cell\nH = 2 * N\n\n# the number of squares in a unit cell\nS = 4 * N\n\n# the number of pyramids in a unit cell\nP = 4 * N\n\n# the number of prisms in a unit cell\nPr = 2 * N\n\n# the number of tetrahedra in a unit cell\nT = 4 * N\n\n#",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "0.08602969896859208",
    "question": "The coefficient of static friction between a small coin and the surface of a turntable is 0.30. The turntable rotates at 33.3 revolutions per minute. What is the maximum distance from the center of the turntable at which the coin will not slide?\nAnswer Choices: (A) 0.024 m (B) 0.048 m (C) 0.121 m (D) 0.242 m Let's write a program.",
    "output": "import math\n\n# define the variables\ncoefficient_of_static_friction = 0.30\nrevolutions_per_minute = 33.3\n\n# calculate the angular speed in radians per second\nangular_speed = (2 * math.pi * revolutions_per_minute) / 60\n\n# calculate the maximum distance from the center of the turntable\nmax_distance = coefficient_of_static_friction / angular_speed\n\n# print the result\nprint(max_distance)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "gt": "D",
    "err": false,
    "question": "The sign of the charge carriers in a doped semiconductor can be deduced by measuring which of the following properties?\nAnswer Choices: (A) Specific heat (B) Thermal conductivity (C) Electrical resistivity (D) Hall coefficient Let's write a program.",
    "output": "l = ['A', 'B', 'C', 'D']\nd = ['heat', 'conductivity', 'resistivity', 'Hall coefficient']\n\nfor i in range(4):\n  print(l[i] + ': ' + d[i])",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "4",
    "question": "The primary source of the Sun\u2019s energy is a series of thermonuclear reactions in which the energy produced is c^2 times the mass difference between\nAnswer Choices: (A) two hydrogen atoms and one helium atom (B) four hydrogen atoms and one helium atom (C) six hydrogen atoms and two helium atoms (D) three helium atoms and one carbon atom Let's write a program.",
    "output": "Hydrogen = 1\r\nHelium = 4\r\nprint(Helium)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "gt": "A",
    "err": false,
    "question": "Electromagnetic radiation provides a means to probe aspects of the physical universe. Which of the following statements regarding radiation spectra is NOT correct?\nAnswer Choices: (A) Lines in the infrared, visible, and ultraviolet regions of the spectrum reveal primarily the nuclear structure of the sample. (B) The wavelengths identified in an absorption spectrum of an element are among those in its emission spectrum. (C) Absorption spectra can be used to determine which elements are present in distant stars. (D) Spectral analysis can be used to identify the composition of galactic dust. Let's write a program.",
    "output": "A. Lines in the infrared, visible, and ultraviolet regions of the spectrum reveal primarily the nuclear structure of the sample.\nIn the infrared region, the radiation is emitted by molecules and dust. The absorption and emission of radiation is dependent on the structure of the molecule or the size of the dust grain. Thus, the infrared region can be used to probe the nuclear structure of the sample.\nB. The wavelengths identified in an absorption spectrum of an element are among those in its emission spectrum.\nThe wavelengths that are absorbed in an absorption spectrum are the same as those emitted in an emission spectrum. This is because the atom or molecule that absorbs the radiation is the same as the one that emits it.\nC. Absorption spectra can be used to determine which elements are present in distant stars.\nThe absorption spectra of stars can be used to determine the elements present in them because each element has a unique absorption spectrum.\nD. Spectral analysis can be used to identify the composition of galactic dust.\nThe composition of galactic dust can be identified using spectral analysis. This is because each element has a unique emission spectrum, which can be used to identify the elements in the dust.\nThe answer is B.",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "True",
    "question": "Which of the following statements about bosons and/or fermions is true?\nAnswer Choices: (A) Bosons have symmetric wave functions and obey the Pauli exclusion principle. (B) Bosons have antisymmetric wave functions and do not obey the Pauli exclusion principle. (C) Fermions have symmetric wave functions and obey the Pauli exclusion principle. (D) Fermions have antisymmetric wave functions and obey the Pauli exclusion principle. Let's write a program.",
    "output": "def check_statement(statement):\n    if statement == 'Bosons have symmetric wave functions and obey the Pauli exclusion principle.':\n        return True\n    elif statement == 'Bosons have antisymmetric wave functions and do not obey the Pauli exclusion principle.':\n        return False\n    elif statement == 'Fermions have symmetric wave functions and obey the Pauli exclusion principle.':\n        return True\n    elif statement == 'Fermions have antisymmetric wave functions and do not obey the Pauli exclusion principle.':\n        return False\n\nprint(check_statement('Bosons have symmetric wave functions and obey the Pauli exclusion principle.'))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "gt": "B",
    "err": false,
    "question": "Excited states of the helium atom can be characterized as para- (antiparallel electron spins) and ortho- (parallel electron spins). The observation that an ortho- state has lower energy than the corresponding para- state can be understood in terms of which of the following?\nAnswer Choices: (A) The Heisenberg uncertainty principle (B) The Pauli exclusion principle (C) The Bohr model of the atom (D) Nuclear hyperfine coupling Let's write a program.",
    "output": "Let's denote the ground state (para) as A and the excited state (ortho) as B. If the ortho state has lower energy than the para state, then the energy of the ortho state (B) is lower than the energy of the para state (A). In this case, the system would be in state B, and the probability of finding the system in state A would be very small but non-zero. This is a violation of the principle of equal a priori probabilities, a fundamental principle in statistical mechanics. The principle of equal a priori probabilities states that at the beginning of a process, all possible outcomes are equally likely.\nThe answer is B.",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "0.00277125",
    "question": "One end of a horizontal, massless spring is attached to a wall. A mass of 0.30 kg is attached to the other end of the spring and rests on a table. The mass is displaced 0.030 m from its equilibrium position and released. It has a speed of 0.040 m/s as it passes through its equilibrium position. In the absence of friction, what is the total mechanical energy of the system?\nAnswer Choices: (A) 0.24 mJ (B) 0.38 mJ (C) 0.48 mJ (D) 0.75 mJ Let's write a program.",
    "output": "import math\n\n# define the variables\nm = 0.30  # mass of the mass\nx = 0.030  # displacement from the equilibrium position\nv = 0.040  # velocity at the equilibrium position\n\n# calculate the spring constant\nk = m * x / v**2\n\n# calculate the total mechanical energy\nE = 0.5 * m * v**2 + 0.5 * k * x**2\n\nprint(E)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "0.5555555555555556",
    "question": "A meter stick with a speed of 0.8c moves past an observer. In the observer\u2019s reference frame, how long does it take the stick to pass the observer ?\nAnswer Choices: (A) 1.6 ns (B) 2.5 ns (C) 4.2 ns (D) 6.9 ns Let's write a program.",
    "output": "import math\n\n# define the speed of the meter stick\nspeed = 0.8\n# define the speed of light\nc = 1\n\n# calculate the time it takes for the meter stick to pass the observer\ntime = 1 / (speed + c)\n\n# print the result\nprint(time)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": true,
    "gt": "A",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 8, in run_it\nTypeError: unsupported operand type(s) for ^: 'float' and 'int'\n",
    "question": "Protons used in cancer therapy are typically accelerated to about 0.6c . How much work must be done on a particle of mass m in order for it to reach this speed, assuming it starts at rest?\nAnswer Choices: (A) 0.25mc^2 (B) 0.60mc^2 (C) 0.67mc^2 (D) 1.25mc^2 Let's write a program.",
    "output": "import math\n\n# define the speed\nv = 0.6 # in c\n\n# convert to m/s\nv_in_m_s = v * 10^8\n\n# define the mass\nm = 1 # in kg\n\n# calculate the work\nwork = math.pow(v_in_m_s, 2) * m\n\nprint(work)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "C",
    "raw_ans": "Electrons producing \u010cerenkov radiation",
    "question": "Characteristic X rays, appearing as sharp lines on a continuous background, are produced when high-energy electrons bombard a metal target. Which of the following processes results in the characteristic X rays?\nAnswer Choices: (A) Electrons producing \u010cerenkov radiation (B) Electrons colliding with phonons in the metal (C) Electrons filling inner shell vacancies that are created in the metal atoms (D) Electrons combining with protons to form neutrons Let's write a program.",
    "output": "def find_process():\n\n    # process A:\n    A = \"Electrons producing \u010cerenkov radiation\"\n    # process B:\n    B = \"Electrons colliding with phonons in the metal\"\n    # process C:\n    C = \"Electrons filling inner shell vacancies that are created in the metal atoms\"\n    # process D:\n    D = \"Electrons combining with protons to form neutrons\"\n\n    # as per the options, we are looking for a process that produces a continuous background and sharp lines.\n    # characteristic X rays are produced when electrons are accelerated to a high speed. This causes them to emit UV radiation called \"Cerenkov radiation\", which is a process A.\n\n    return A\n\nprint(find_process())",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "gt": "D",
    "err": false,
    "question": "An atom has filled n = 1 and n = 2 levels. How many electrons does the atom have?\nAnswer Choices: (A) 2 (B) 4 (C) 6 (D) 10 Let's write a program.",
    "output": "n=1=2\nn=2=2\n--------------------\nTotal=4\nThe answer is B",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "B",
    "raw_ans": "2.0",
    "question": "Light from a laser falls on a pair of very narrow slits separated by 0.5 micrometer, and bright fringes separated by 1.0 millimeter are observed on a distant screen. If the frequency of the laser light is doubled, what will be the separation of the bright fringes?\nAnswer Choices: (A) 0.25 mm (B) 0.5 mm (C) 1.0 mm (D) 2.0 mm Let's write a program.",
    "output": "import math\n\n# define the variables\nd = 0.5  # micrometer\nD = 1.0  # millimeter\n\n# calculate the wavelength of the laser light\nlambda_ = D / (2*math.pi)\n\n# calculate the separation of the bright fringes for the new frequency\nD_new = lambda_ * (2*math.pi) / d\n\n# print the result\nprint(D_new)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "C",
    "raw_ans": "3000",
    "question": "Assume that the solar flux at Earth\u2019s surface is 1,000 W/m^2 and that the sunlight is normal to a completely reflecting surface with an area of 3 m^2. What is the total radiation force exerted on the surface?\nAnswer Choices: (A) 2 x 10^-6 N (B) 1 x 10^-5 N (C) 2 x 10^-5 N (D) 3 N Let's write a program.",
    "output": "import math\n\n# define the variables\nsolar_flux = 1000  # W/m^2\narea = 3  # m^2\n\n# calculate the total radiation force\ntotal_force = solar_flux * area\n\n# print the result\nprint(total_force)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "gt": "B",
    "err": false,
    "question": "The sign of the charge carriers in a doped semiconductor can be deduced by measuring which of the following properties?\nAnswer Choices: (A) Magnetic susceptibility (B) Hall coefficient (C) Electrical resistivity (D) Thermal conductivity Let's write a program.",
    "output": "A = Magnetic susceptibility\r\nB = Hall coefficient\r\nC = Electrical resistivity\r\nD = Thermal conductivity\r\n\r\ncharge_carriers_doped_semiconductor=B",
    "correct": true
  },
  {
    "ans": "B",
    "gt": "D",
    "err": false,
    "question": "Which of the following ions CANNOT be used as a dopant in germanium to make an n-type semiconductor?\nAnswer Choices: (A) As (B) P (C) Sb (D) B Let's write a program.",
    "output": "As = 31.84\r\nP = 31.16\r\nSb = 35.07\r\nB = 10.81\r\nif B<31.84:\r\n  print('B')\r\nelse:\r\n  print('As')",
    "correct": false
  },
  {
    "ans": "D",
    "gt": "A",
    "err": false,
    "question": "An astronomer observes a very small moon orbiting a planet and measures the moon\u2019s minimum and maximum distances from the planet\u2019s center and the moon\u2019s maximum orbital speed. Which of the following CANNOT be calculated from these measurements?\nAnswer Choices: (A) Mass of the moon (B) Mass of the planet (C) Minimum speed of the moon (D) Period of the orbit Let's write a program.",
    "output": "Let's calculate the necessary information from the given measurements.\nFrom the given data, we can find out the radius of the planet and the speed of the moon.\nIf r is the radius of the planet and v is the speed of the moon, then\nr = v*t, where t is the time taken by the moon to complete one orbit.\nThe time taken can be calculated from the difference in the minimum and maximum distances.\nThus, we can find out the mass of the planet (G*Mp = rv2, where Mp is the mass of the planet and G is the gravitational constant) and the minimum speed of the moon.\nWe can also find out the period of the orbit (t = 2*pi*r/v).\nThus, the answer cannot be D.",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "0.5999999999999999",
    "question": "A rod measures 1.00 m in its rest system. How fast must an observer move parallel to the rod to measure its length to be 0.80 m?\nAnswer Choices: (A) 0.50c (B) 0.60c (C) 0.70c (D) 0.80c Let's write a program.",
    "output": "import math\n\n# define the rest length of the rod\nrest_length = 1.00\n\n# define the measured length of the rod\nmeasured_length = 0.80\n\n# calculate the speed of the observer using the formula for length contraction\nspeed = math.sqrt(1 - (measured_length / rest_length)**2)\n\n# print the result\nprint(speed)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "B",
    "raw_ans": "deflected_in_y_direction",
    "question": "A proton moves in the +z-direction after being accelerated from rest through a potential difference V. The proton then passes through a region with a uniform electric field E in the +x-direction and a uniform magnetic field B in the +y-direction, but the proton\u2019s trajectory is not affected. If the experiment were repeated using a potential difference of 2V, the proton would then be\nAnswer Choices: (A) deflected in the +x-direction (B) deflected in the -x-direction (C) deflected in the +y-direction (D) deflected in the -y-direction Let's write a program.",
    "output": "proton_moves_in_direction=z\naccelerated_from_rest=z\npotential_difference=V\npasses_through_electric_field=x\nmagnetic_field=y\nanswer=deflected_in_x_direction\nsuper_answer=deflected_in_y_direction",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "10.0",
    "question": "A magnetic field is directed perpendicular to the plane of a circular coil of area 0.2 m^2 and 250 turns. If the magnetic field is increased from 0.01 T to 0.06 T during a time interval of 0.25 s, the average induced EMF in the coil is\nAnswer Choices: (A) 0.04 V (B) 0.1 V (C) 2.5 V (D) 10 V Let's write a program.",
    "output": "area = 0.2\r\nturns = 250\r\nmagnetic_field_initial = 0.01\r\nmagnetic_field_final = 0.06\r\ntime = 0.25\r\n\r\nemf = (magnetic_field_final - magnetic_field_initial) * turns * area / time\r\n\r\nprint(emf)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "gt": "D",
    "err": false,
    "question": "Light of variable frequency shines on the metal surface of a photoelectric tube. Einstein\u2019s theory of the photoelectric effect predicts that the\nAnswer Choices: (A) work function of the metal is proportional to the frequency (B) work function of the metal is proportional to the wavelength (C) current in the tube is a linear function of the wavelength (D) potential difference necessary to stop the emitted electrons is a linear function of the frequency above the threshold frequency Let's write a program.",
    "output": "Einstein's theory of the photoelectric effect predicts that the work function of the metal is proportional to the frequency.\nThe answer is A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 21, in <module>\n  File \"<string>\", line 9, in run_it\nNameError: name 'G' is not defined\n",
    "question": "If the Sun were suddenly replaced by a black hole of the same mass, it would have a Schwarzschild radius of 3,000 m. What effect, if any, would this change have on the orbits of the planets?\nAnswer Choices: (A) The planets would move directly toward the Sun. (B) The planets would move in spiral orbits. (C) The planets would oscillate about their former elliptical orbits. (D) The orbits would remain unchanged. Let's write a program.",
    "output": "import math\n\n# define the mass of the sun and the radius of the black hole\nM_sun = 1.989e30\nR_hole = 3000\n\n# calculate the Schwarzschild radius of the black hole\nr_s = 2*G*M_sun/c**2\n\n# calculate the change in the radius of the sun\ndelta_r = abs(r_s - R_hole)\n\n# calculate the change in the orbital radius of the earth\ndelta_r_earth = delta_r * math.pow(60/14, 2/3)\n\n# the change in the orbital radius of the earth is very small (~0.01%)\n# therefore, the orbits would remain unchanged\n\nprint('The orbits would remain unchanged.')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "gt": "B",
    "err": false,
    "question": "At 20\u00b0C, a pipe open at both ends resonates at a frequency of 440 hertz. At what frequency does the same pipe resonate on a particularly cold day when the speed of sound is 3 percent lower than it would be at 20\u00b0C ?\nAnswer Choices: (A) 414 Hz (B) 427 Hz (C) 433 Hz (D) 440 Hz Let's write a program.",
    "output": "Let's solve the multi-choice question step by step.\nThe speed of sound is given by\nThe speed of sound is given by\nThe speed of sound at 20\u00b0C is 343 m/s.\nThe speed of sound at a particular cold day is 343 x 97/100 = 331 m/s.\nAt 20\u00b0C, a pipe open at both ends resonates at a frequency of 440 hertz.\nThe wavelength of the sound at 20\u00b0C is 440 x 343 / 331 = 446 m.\nThe wavelength of the sound at the particular cold day is 446 x 331/343 = 433 m.\nThe frequency at the particular cold day is 331/433 x 440 = 427 Hz.\nThe answer is B.",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "10",
    "question": "The quantum efficiency of a photon detector is 0.1. If 100 photons are sent into the detector, one after the other, the detector will detect photons\nAnswer Choices: (A) exactly 10 times (B) an average of 10 times, with an rms deviation of about 0.1 (C) an average of 10 times, with an rms deviation of about 1 (D) an average of 10 times, with an rms deviation of about 3 Let's write a program.",
    "output": "import math\n\n# define the variables\nquantum_efficiency = 0.1\nphotons_sent = 100\n\n# calculate the number of times the detector will detect the photons\ndetected_photons = quantum_efficiency * photons_sent\n\n# calculate the average number of times the detector will detect the photons\naverage_detected_photons = math.floor(detected_photons)\n\n# calculate the rms deviation\nrms_deviation = math.sqrt((detected_photons - average_detected_photons)**2 / photons_sent)\n\n# print the result\nprint(average_detected_photons)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "8.279999999999999e-22",
    "question": "A three-dimensional harmonic oscillator is in thermal equilibrium with a temperature reservoir at temperature T. The average total energy of the oscillator is\nAnswer Choices: (A) (1/2) k T (B) kT (C) (3/2) k T (D) 3kT Let's write a program.",
    "output": "k = 1.38e-23  # Boltzmann constant\nT = 20  # temperature\n\n# For a 3D harmonic oscillator, the average total energy is 3kT\naverage_total_energy = 3 * k * T\n\nprint(average_total_energy)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 26, in <module>\n  File \"<string>\", line 18, in run_it\nNameError: name 'measurement' is not defined\n",
    "question": "A student makes 10 one-second measurements of the disintegration of a sample of a long-lived radioactive isotope and obtains the following values: 3, 0, 2, 1, 2, 4, 0, 1, 2, 5. How long should the student count to establish the rate to an uncertainty of 1 percent?\nAnswer Choices: (A) 80 s (B) 160 s (C) 2,000 s (D) 5,000 s Let's write a program.",
    "output": "import math\n\n# The data is a list of the number of disintegrations during 10 one-second intervals\n# The rate is the number of disintegrations per second, and it can be approximated by the total number of disintegrations divided by the total time in seconds\n# The uncertainty is 1 percent, or 0.01\n\n# The student wants to count for long enough to achieve an uncertainty of 1 percent, so we need to find the time it takes to get the standard deviation of the rate to less than 0.01\n\n# The standard deviation of the rate is the square root of the sum of the squared deviations from the mean divided by the total number of measurements\n# The deviation from the mean for each measurement is (mean - measurement) / standard deviation\n# So, the standard deviation of the rate is sqrt((sum(((mean - measurement) / standard_deviation)**2)) / total_measurements)\n\n# Let's calculate it\n\nmeasurements = [3, 0, 2, 1, 2, 4, 0, 1, 2, 5]\nmean = sum(measurements) / len(measurements)\nstandard_deviation = math.sqrt(sum(((mean - measurement) / standard_deviation)**2) / len(measurements))\n\n# Now, we need to find the time it takes to get the standard deviation of the rate to less than 0.01\n# We also know that the time is proportional to the number of measurements (which is proportional to the time), so we can estimate the time by multiplying the standard deviation of the rate by the total number of measurements divided by the uncertainty\n\ntotal_time = standard_deviation * len(measurements) / 0.01\n\nprint(int(total_time))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "displacement current is proportional to the rate of change of the electric flux",
    "question": "By definition, the electric displacement current through a surface S is proportional to the\nAnswer Choices: (A) magnetic flux through S (B) rate of change of the magnetic flux through S (C) time integral of the magnetic flux through S (D) rate of change of the electric flux through S Let's write a program.",
    "output": "a=1\r\nb=2\r\nc=3\r\nd=4\r\nif a==1:\r\n    print(\"displacement current is proportional to the rate of change of the electric flux\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "D",
    "err": true,
    "gt": "A",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 50, in <module>\n  File \"<string>\", line 6, in run_it\nTypeError: unsupported operand type(s) for ^: 'float' and 'int'\n",
    "question": "The negative muon, mu^-, has properties most similar to which of the following?\nAnswer Choices: (A) Electron (B) Meson (C) Photon (D) Boson Let's write a program.",
    "output": "muon = {\n    'mass': 105.6583745,\n    'charge': -1,\n    'spin': 1/2,\n    'lifetime': 2.2*10^-6,\n    'decay_products': 'electron + electron_antineutrino',\n    'interactions': 'weak, electromagnetic'\n}\n\nelectron = {\n    'mass': 0.5109989461,\n    'charge': -1,\n    'spin': 1/2,\n    'lifetime': 4.2*10^-17,\n    'decay_products': 'photon + electron_neutrino',\n    'interactions': 'electromagnetic'\n}\n\nphoton = {\n    'mass': 0,\n    'charge': 0,\n    'spin': 1,\n    'lifetime': 0,\n    'decay_products': 'none',\n    'interactions': 'electromagnetic'\n}\n\nboson = {\n    'mass': 'variable',\n    'charge': 'variable',\n    'spin': 1,\n    'lifetime': 'variable',\n    'decay_products': 'variable',\n    'interactions': 'strong, weak, electromagnetic'\n}\n\nsimilarities = {\n    'mass': 2,\n    'charge': 2,\n    'spin': 2,\n    'lifetime': 1,\n    'decay_products': 1,\n    'interactions': 3\n}\n\nans = 'C' if max(similarities.values()) == similarities['mass'] else 'D'\n\nprint(ans)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "C",
    "raw_ans": "75000000.0",
    "question": "The speed of light inside of a nonmagnetic dielectric material with a dielectric constant of 4.0 is\nAnswer Choices: (A) 1.2 x 10^9 m/s (B) 3.0 x 10^8 m/s (C) 1.5 x 10^8 m/s (D) 1.0 x 10^8 m/s Let's write a program.",
    "output": "c = 3e8 # speed of light in vacuum\r\ndielectric_constant = 4\r\n\r\n# speed of light inside a non-magnetic dielectric material\r\nspeed_inside = c / dielectric_constant\r\n\r\nprint(speed_inside)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "D",
    "err": false,
    "question": "The energy from electromagnetic waves in equilibrium in a cavity is used to melt ice. If the Kelvin temperature of the cavity is increased by a factor of two, the mass of ice that can be melted in a fixed amount of time is increased by a factor of\nAnswer Choices: (A) 2 (B) 4 (C) 8 (D) 16 Let's write a program.",
    "output": "Energy from electromagnetic waves in equilibrium in a cavity is used to melt ice.\nIf the Kelvin temperature of the cavity is increased by a factor of two, the mass of ice that can be melted in a fixed amount of time is increased by a factor of\nLet's assume the initial temperature of the cavity as T1 and the initial mass of ice as m1.\nFrom the principle of equivalence, it can be written as\nm1 = kT1^n\nWhere k and n are the constants.\nIf the Kelvin temperature of the cavity is increased by a factor of two, the mass of ice that can be melted in a fixed amount of time is increased by a factor of\nm2 = k(2T1)^n\nm2 = 2^n * m1\nThe answer is A",
    "correct": false
  },
  {
    "ans": "D",
    "gt": "D",
    "err": false,
    "question": "A resistor in a circuit dissipates energy at a rate of 1 W. If the voltage across the resistor is doubled, what will be the new rate of energy dissipation?\nAnswer Choices: (A) 0.25 W (B) 0.5 W (C) 1 W (D) 4 W Let's write a program.",
    "output": "Explanatory Answer\nThe energy dissipated by the resistor is given by the product of the voltage across the resistor and the current through it.\nIf current 'I' is flowing through the resistor, the rate of energy dissipation is given by,\nRate of energy dissipation = (I) x (V) Watts.\nIf the voltage is doubled, the rate of energy dissipation would be\nNew rate of energy dissipation = (I) x (2V) Watts.\n= 2 x (I) x (V) Watts.\n= 2 x Rate of energy dissipation.\nTherefore, the new rate of energy dissipation will be 2 times the original rate.\nChoice D",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "B",
    "raw_ans": "633.2",
    "question": "A gas cell with an optical path length of 10 cm is placed in one arm of a Michelson interferometer. If the light source for the interferometer is a laser with wavelength 632.2 nm, then 100 fringes are counted as the gas cell is evacuated. What is the index of refraction of the original gas?\nAnswer Choices: (A) 1.00063 (B) 1.00032 (C) 1.00016 (D) 0.99968 Let's write a program.",
    "output": "L = 10 # in cm\nn = 100\nlamda = 632.2 # in nm\n\n# calculate the path difference\npath_difference = (n*lamda*L)/100 # in cm\n\n# calculate the index of refraction\nrefractive_index = 1 + (path_difference/L)\n\nprint(refractive_index)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "3099.6",
    "question": "Under certain conditions, a beam of electrons impinging on a crystal surface will diffract and a scattering pattern of the beam can be obtained. What is the approximate kinetic energy of the electrons needed in order to see the pattern? (Assume the lattice spacing of the crystal to be 0.4 nm.)\nAnswer Choices: (A) 0.1 eV (B) 1 eV (C) 10 eV (D) 100 eV Let's write a program.",
    "output": "import math\n\n# Lattice spacing\na = 0.4  # in nm\n\n# Conversion factor: 1 nm = 10^(-9) m\na *= 10**(-9)  # converting lattice spacing from nm to m\n\n# Planck's constant\nh = 6.62607004 * 10**(-34)  # in Joules\n\n# Speed of light\nc = 299792458  # in m/s\n\n# Conversion factor: 1 eV = 1.60217662 * 10^(-19) Joules\n\n# Calculating the minimum kinetic energy needed to see the pattern\n# As the wavelength of the electron is equal to the lattice spacing, and the condition for diffraction is satisfied when the wavelength of the electron is equal to the lattice spacing, the minimum kinetic energy needed is equal to the kinetic energy of an electron with wavelength equal to the lattice spacing\n\n# Wavelength of the electron\nlambda_e = a\n\n# Kinetic energy of the electron\nE_k = (h*c)/lambda_e\n\n# Converting the kinetic energy from Joules to eV\nE_k_eV = E_k / (1.60217662 * 10**(-19))\n\nprint(round(E_k_eV, 2))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "B",
    "raw_ans": "1.00000000000000",
    "question": "A uniform solid disk starts from rest and rolls down an inclined plane without slipping. After some time, what fraction of the disk\u2019s total kinetic energy is rotational kinetic energy?\nAnswer Choices: (A) 1/4 (B) 1/3 (C) 1/2 (D) 2/3 Let's write a program.",
    "output": "import sympy as sp\n\n# Define the total mass and radius of the disk\nm = 1  # kg\nr = 1  # m\n\n# The total kinetic energy of the disk is given by\n# KE = 1/2 * I * omega^2\n# where I is the moment of inertia of the disk and omega is the angular velocity.\n# For a solid disk, I = 1/2 * m * r^2 and omega = v/r where v is the translational velocity of the disk.\n# The rotational kinetic energy is given by\n# KE_rot = 1/2 * I * omega^2\n\n# First, let's calculate the total kinetic energy\n\n# Calculate the translational velocity of the disk\nv = m * r * sp.pi  # m/s\n\n# Calculate the total kinetic energy\nKE = 1/2 * 1/2 * m * r**2 * v**2  # J\n\n# Now, calculate the rotational kinetic energy\nKE_rot = 1/2 * 1/2 * m * r**2 * v**2  # J\n\n# The fraction of the disk's total kinetic energy that is rotational kinetic energy is\nfraction = KE_rot / KE\n\nprint(fraction)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "200.0",
    "question": "Blue light of wavelength 480 nanometers is most strongly reflected off a thin film of oil on a glass slide when viewed near normal incidence. Assuming that the index of refraction of the oil is 1.2 and that of the glass is 1.6, what is the minimum thickness of the oil film (other than zero) ?\nAnswer Choices: (A) 150 nm (B) 200 nm (C) 300 nm (D) 400 nm Let's write a program.",
    "output": "import math\n\n# define the wavelength of the light\nwavelength = 480  # in nanometers\n\n# define the refractive indices\nn_oil = 1.2\nn_glass = 1.6\n\n# calculate the minimum thickness of the oil film\n# for normal incidence, the condition for constructive interference is d = (m + 1/2) * lambda / n_oil\n# we start from m = 0, so d = lambda / (2 * n_oil)\nd = wavelength / (2 * n_oil)\n\n# print the minimum thickness of the oil film\nprint(d)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": true,
    "gt": "B",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 295, in execute_code\n    code = black.format_str(code_str, mode=black.FileMode())\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1079, in format_str\n    dst_contents = _format_str_once(src_contents, mode=mode)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1089, in _format_str_once\n    src_node = lib2to3_parse(src_contents.lstrip(), mode.target_versions)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/parsing.py\", line 127, in lib2to3_parse\n    raise exc from None\nblack.parsing.InvalidInput: Cannot parse: 1:11: Q1 = 15000 Joules\n",
    "question": "A heat pump is to extract heat from an outdoor environment at 7\u00b0C and heat the environment indoors to 27\u00b0C. For each 15,000 J of heat delivered indoors, the smallest amount of work that must be supplied to the heat pump is approximately\nAnswer Choices: (A) 500 J (B) 1,000 J (C) 1,100 J (D) 2,000 J Let's write a program.",
    "output": "Q1 = 15000 Joules\nQ2 = 300 KJoules\nQ2 = Cp*dT = 4.187*26 = 1100 Joules\nWork = Q1-Q2 = 15000-1100 = 13900 Joules\nprint(13900)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "gt": "C",
    "err": false,
    "question": "The driver of a police car hears an echo of the car\u2019s siren from a wall toward which the car is moving with a speed of 3.5 m/s. If the speed of sound is 350 m/s and the frequency of the siren is 600 Hz, the driver hears the echo at a frequency nearest to which of the following?\nAnswer Choices: (A) 600 Hz (B) 606 Hz (C) 612 Hz (D) 618 Hz Let's write a program.",
    "output": "speed_of_car = 3.5 # m/s\r\nspeed_of_sound = 350 # m/s\r\nfrequency_of_siren = 600 # Hz\r\n\r\n# The driver hears the echo at a frequency nearest to which of the following?\r\n# 1. It will be always equal to the frequency of the siren because the siren frequency does not change\r\n# 2. It will be higher than the frequency of the siren because the car is moving towards the wall\r\n# 3. It will be lower than the frequency of the siren because the car is moving away from the wall\r\n\r\n# As the car is moving towards the wall, the frequency heard by the driver will increase because the wavelength of the sound is reduced due to the movement of the car.\r\n# As the frequency increases, the driver will hear an echo at a frequency higher than the frequency of the siren.\r\n# Hence, The answer is B.",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "0.96",
    "question": "A particle decays in 2.0 ms in its rest frame. If the same particle moves at v=0.60c in the lab frame, how far will it travel in the lab before decaying?\nAnswer Choices: (A) 150 m (B) 288 m (C) 360 m (D) 450 m Let's write a program.",
    "output": "import math\n\n# define the rest frame decay time\ntau_rest = 2.0 # in ms\n\n# define the speed of the particle in the lab frame\nv = 0.60 # in c\n\n# calculate the decay time in the lab frame\n# tau_lab = sqrt(1 - v^2) * tau_rest\ntau_lab = math.sqrt(1 - v**2) * tau_rest\n\n# calculate the distance the particle travels in the lab before decaying\n# d = v * tau_lab\nd = v * tau_lab\n\nprint(d)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "gt": "D",
    "err": false,
    "question": "A tube of water is traveling at 1/2 c relative to the lab frame when a beam of light traveling in the same direction as the tube enters it. What is the speed of light in the water relative to the lab frame? (The index of refraction of water is 4/3.)\nAnswer Choices: (A) 1/2 c (B) 2/3 c (C) 5/6 c (D) 10/11 c Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nc = sp.symbols('c')  # speed of light in vacuum\n\n# The speed of light in the water relative to the lab frame is given by the formula:\n# v_r = (v_s - u) / (1 - (v_s * u) / c^2)\n\n# where:\n\n# v_r = speed of light in the water relative to the lab frame\n# v_s = speed of the tube relative to the lab frame (1/2 c)\n# u = speed of the light beam relative to the tube (c)\n\nv_s = 1/2 * c  # speed of the tube relative to the lab frame\nu = c  # speed of the light beam relative to the tube\n\nv_r = (v_s - u) / (1 - (v_s * u) / c**2)\n\n# substitute the given values\nv_r_sub = v_r.subs(c, sp.symbols('c'))\n\n# simplify the expression\nv_r_simplified = sp.simplify(v_r_sub)\n\n# print the result\nprint(v_r_simplified)",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "0.9949874371066174",
    "question": "The rest mass of a particle with total energy 5.0 GeV and momentum 4.9 GeV/c is approximately\nAnswer Choices: (A) 0.1 GeV/c^2 (B) 0.2 GeV/c^2 (C) 0.5 GeV/c^2 (D) 1.0 GeV/c^2 Let's write a program.",
    "output": "import math\n\n# define the total energy and momentum\ntotal_energy = 5.0  # in GeV\nmomentum = 4.9  # in GeV/c\n\n# calculate the rest mass using the formula E^2 = p^2 + m^2\nrest_mass = math.sqrt(total_energy**2 - momentum**2)\n\nprint(rest_mass)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "B",
    "raw_ans": "0.004",
    "question": "A grating spectrometer can just barely resolve two wavelengths of 500 nm and 502 nm, respectively. Which of the following gives the resolving power of the spectrometer?\nAnswer Choices: (A) 2 (B) 250 (C) 5,000 (D) 10,000 Let's write a program.",
    "output": "lambda1 = 500\r\nlambda2 = 502\r\n\r\n# formula for resolving power = (lambda1 - lambda2) / lambda1\r\n\r\nresolving_power = (lambda2 - lambda1) / lambda1\r\n\r\nprint(resolving_power)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "A",
    "raw_ans": "1",
    "question": "The best type of laser with which to do spectroscopy over a range of visible wavelengths is\nAnswer Choices: (A) a dye laser (B) a helium-neon laser (C) an excimer laser (D) a ruby laser Let's write a program.",
    "output": "a=1\r\nb=2\r\nc=3\r\nd=4\r\nlaser_type=1\r\nprint(laser_type)\r\n",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "A",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in run_it\nAttributeError: module 'sympy' has no attribute 'Re'\n",
    "question": "The eigenvalues of a Hermitian operator are always\nAnswer Choices: (A) real (B) imaginary (C) degenerate (D) linear Let's write a program.",
    "output": "import sympy as sp\n\n# define the eigenvalues of a Hermitian operator\neigenvalues = sp.symbols('eigenvalues')\n\n# eigenvalues of a Hermitian operator are always real\neigenvalues_Hermitian_operator = sp.Re(eigenvalues)\n\n# print the result\nprint(eigenvalues_Hermitian_operator)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "D",
    "raw_ans": "2*F_A",
    "question": "A net force F_A acts on object A, and a net force F_B acts on object B. The mass of object B is twice the mass of object A, and the acceleration of object B is twice that of object A. Which of the following is true of forces F_A and F_B?\nAnswer Choices: (A) F_B = 1/4 F_A (B) F_B = 1/2 F_A (C) F_B = 2F_A (D) F_B = 4F_A Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nF_A = sp.symbols('F_A')\nF_B = sp.symbols('F_B')\n\n# Given that mass of object B is twice that of object A, and the acceleration of object B is twice that of object A.\n# So, the net force F_B on object B is twice that of object A.\n# So, F_B = 2F_A\n\nF_B = 2*F_A\n\nprint(F_B)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "C",
    "err": false,
    "question": "Under ideal conditions, the electric and magnetic fields inside a superconductor are zero. Maxwell\u2019s equations imply that which of the following must be true just outside the surface of the superconductor?\nAnswer Choices: (A) B = 0 (B) B is perpendicular to the surface. (C) B is tangential to the surface. (D) B is time independent. Let's write a program.",
    "output": "import sympy as sp\n\n# Define the variables\nB, B_0, B_dot, B_dot_0, E, E_0, E_dot, E_dot_0, H, H_0, H_dot, H_dot_0, J, J_0, J_dot, J_dot_0, M, M_0, M_dot, M_dot_0, N, N_0, N_dot, N_dot_0, P, P_0, P_dot, P_dot_0, Q, Q_0, Q_dot, Q_dot_0, R, R_0, R_dot, R_dot_0, S, S_0, S_dot, S_dot_0, T, T_0, T_dot, T_dot_0, U, U_0, U_dot, U_dot_0, V, V_0, V_dot, V_dot_0, W, W_0, W_dot, W_dot_0 = sp.symbols('B B_0 B_dot B_dot_0 E E_0 E_dot E_dot_0 H H_0 H_dot H_dot_0 J J_0 J_dot J_dot_0 M M_0 M_dot M_dot_0 N N_0 N_dot N_dot_0 P P_0 P_dot P_dot_0 Q Q_0 Q_dot Q_dot_0 R R_0 R_dot R_dot_0 S S_0 S_dot S_dot_0 T T_0 T_dot T_dot_0 U U_0 U_dot U_dot_0 V V_0 V_dot V_dot_0 W W_0 W_dot W_dot_0')\n\n# The electric and magnetic fields inside a superconductor are zero. Maxwell\u2019s equations imply that which of the following must be true just outside the surface of the superconductor?\n\n# B is perpendicular to the surface.\nB_dot_0 = 0\nB_dot = 0\nB = B_0\n\n# B is tangential to the surface.\nB_dot_0 = 0\nB_dot = 0\nB = B_0\n\n# B is time independent.\nB_dot_0 = 0\nB_dot = 0\nB = B_0\n\n# B is zero.\nB_dot_0 = 0\nB_dot = 0\nB = 0\n\n# The answer is A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "0.9800000000000002",
    "question": "Two students perform an experiment in which they drop a ball from rest from a known height above the ground and measure the speed of the ball just before it strikes the ground. From repeated measurement, the students estimate the uncertainty in the measured speed of the ball to be 10 percent. Which of the following gives the uncertainty in the kinetic energy of the ball? (Assume the uncertainty in the ball\u2019s mass is negligibly small.)\nAnswer Choices: (A) 5% (B) 10% (C) 15% (D) 20% Let's write a program.",
    "output": "import math\n\n# define the variables\nmass = 1  # kg\nheight = 10  # m\n\n# calculate the speed of the ball\nspeed = math.sqrt(2*9.8*height)\n\n# calculate the uncertainty in the speed\nuncertainty_speed = 0.10 * speed\n\n# calculate the uncertainty in the kinetic energy\nuncertainty_kinetic_energy = 0.5 * mass * (uncertainty_speed)**2\n\n# print the result\nprint(uncertainty_kinetic_energy)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "C",
    "raw_ans": "0.0",
    "question": "A particle is constrained to move in a circle with a 10-meter radius. At one instant, the particle\u2019s speed is 10 meters per second and is increasing at a rate of 10 meters per second squared. The angle between the particle\u2019s velocity and acceleration vectors is\nAnswer Choices: (A) 0\u00b0 (B) 30\u00b0 (C) 45\u00b0 (D) 60\u00b0 Let's write a program.",
    "output": "import math\n\n# define the radius of the circle\nr = 10\n\n# define the speed and its rate of change\nv = 10\na = 10\n\n# calculate the acceleration vector\na_vector = math.sqrt(a**2)\n\n# calculate the velocity vector\nv_vector = math.sqrt(v**2)\n\n# calculate the angle between the velocity and acceleration vectors\nangle = math.acos(v_vector/a_vector)\n\n# print the angle\nprint(angle)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "D",
    "err": false,
    "question": "If the absolute temperature of a blackbody is increased by a factor of 3, the energy radiated per second per unit area does which of the following?\nAnswer Choices: (A) Decreases by a factor of 81. (B) Decreases by a factor of 9. (C) Increases by a factor of 9. (D) Increases by a factor of 81. Let's write a program.",
    "output": "import math\n\n# function to calculate the energy radiated per second per unit area\ndef energy_radiated(T):\n    return (2 * math.pi * math.pow(T, 4)) / (15 * math.pow(math.e, 5))\n\n# initial temperature\nT1 = 1\n\n# initial energy radiated\nE1 = energy_radiated(T1)\n\n# final temperature\nT2 = 3 * T1\n\n# final energy radiated\nE2 = energy_radiated(T2)\n\n# calculate the factor by which the energy radiated increases\nfactor = E2 / E1\n\n# print the answer\nif factor > 1:\n    print(\"Increases by a factor of \" + str(factor))\nelse:\n    print(\"Decreases by a factor of \" + str(1/factor))",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "10.0",
    "question": "A magnetic field is directed perpendicular to the plane of a circular coil of area 0.2 m^2 and 250 turns. If the magnetic field is increased from 0.01 T to 0.06 T during a time interval of 0.25 s, the average induced EMF in the coil is\nAnswer Choices: (A) 0.04 V (B) 0.1 V (C) 2.5 V (D) 10 V Let's write a program.",
    "output": "import math\n\n# define the variables\narea = 0.2  # m^2\nturns = 250\ntime_interval = 0.25  # s\n\n# initial and final magnetic fields\nB_initial = 0.01  # T\nB_final = 0.06  # T\n\n# average induced EMF formula\naverage_EMF = (B_final - B_initial) * turns * area / time_interval\n\n# print the result\nprint(average_EMF)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "gt": "C",
    "err": false,
    "question": "Which of the following is true about any system that undergoes a reversible thermodynamic process?\nAnswer Choices: (A) There are no changes in the internal energy of the system. (B) The temperature of the system remains constant during the process. (C) The entropy of the system and its environment remains unchanged. (D) The entropy of the system and its environment must increase. Let's write a program.",
    "output": "The answer is C",
    "correct": true
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "None",
    "question": "The first five harmonics produced by an organ pipe open at both ends are 50 Hz, 100 Hz, 150 Hz, 200 Hz, and 250 Hz. Which of the harmonics, if any, will survive once the pipe is closed at one end?\nAnswer Choices: (A) 50 Hz, 150 Hz, and 250 Hz only (B) 100 Hz and 200 Hz only (C) 150 Hz and 250 Hz only (D) None Let's write a program.",
    "output": "pipe_open_both_ends = [50, 100, 150, 200, 250]\r\n\r\n# Harmonics survived when the pipe is closed at one end\r\npipe_closed_one_end = [50, 150, 250]\r\n\r\n# Check if the harmonics produced by the pipe open at both ends are present in the survived harmonics\r\nif all(i in pipe_closed_one_end for i in pipe_open_both_ends):\r\n    print(\"150 Hz and 250 Hz only\")\r\nelse:\r\n    print(\"None\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "gt": "A",
    "err": false,
    "question": "Electromagnetic radiation emitted from a nucleus is most likely to be in the form of\nAnswer Choices: (A) gamma rays (B) microwaves (C) ultraviolet radiation (D) visible light Let's write a program.",
    "output": "gamma_rays = 0\nmicrowaves = 0\nultraviolet = 0\nvisible_light = 0\n\nfor i in range(1, 9):\n    if i == 1:\n        gamma_rays = 1\n    elif i == 2:\n        microwaves = 1\n    elif i == 3:\n        ultraviolet = 1\n    else:\n        visible_light = 1\n\nprint(gamma_rays, microwaves, ultraviolet, visible_light)\n\nif gamma_rays == 1:\n    print('A')\nelif microwaves == 1:\n    print('B')\nelif ultraviolet == 1:\n    print('C')\nelse:\n    print('D')",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "D",
    "raw_ans": "262",
    "question": "An organ pipe, closed at one end and open at the other, is designed to have a fundamental frequency of C (131 Hz). What is the frequency of the next higher harmonic for this pipe?\nAnswer Choices: (A) 44 Hz (B) 196 Hz (C) 262 Hz (D) 393 Hz Let's write a program.",
    "output": "fundamental_frequency = 131\nnumber_of_harmonics = 2\n\nfrequency_of_next_higher_harmonic = fundamental_frequency * number_of_harmonics\n\nprint(frequency_of_next_higher_harmonic)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "gt": "D",
    "err": false,
    "question": "A single-electron atom has the electron in the l = 2 state. The number of allowed values of the quantum number m_l is\nAnswer Choices: (A) 1 (B) 2 (C) 3 (D) 5 Let's write a program.",
    "output": "l=2 \nm_l=-2,-1,0,1,2\n5 allowed values\nThe answer is D",
    "correct": true
  },
  {
    "ans": "A",
    "gt": "A",
    "err": false,
    "question": "Two simple pendulums A and B consist of identical masses suspended from strings of length L_A and L_B, respectively. The two pendulums oscillate in equal gravitational fields. If the period of pendulum B is twice the period of pendulum A, which of the following is true of the lengths of the two pendulums?\nAnswer Choices: (A) L_B = 4L_A (B) L_B = 2L_A (C) L_B = L_A (D) L_B = 1/2 L_A Let's write a program.",
    "output": "Let's denote the period of pendulum A as TA.\nThe period of pendulum B is TB=2TA.\nThe time it takes for a pendulum to complete a swing is proportional to the square root of the length of the pendulum.\nThus, sqrt(L_A)/sqrt(L_B)=2.\nSquaring both sides of the equation, we get L_A/L_B=4.\nThus, L_B=L_A/4.\nThe answer is A.",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "strong nuclear force",
    "question": "According to the BCS theory, the attraction between Cooper pairs in a superconductor is due to\nAnswer Choices: (A) the weak nuclear force (B) the strong nuclear force (C) vacuum polarization (D) interactions with the ionic lattice Let's write a program.",
    "output": "sc_theory_attraction_Cooper_pair=['weak nuclear force','strong nuclear force','vacuum polarization','interactions with the ionic lattice']\r\nprint(sc_theory_attraction_Cooper_pair[1])",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "0.5999999999999999",
    "question": "A rod measures 1.00 m in its rest system. How fast must an observer move parallel to the rod to measure its length to be 0.80 m?\nAnswer Choices: (A) 0.50c (B) 0.60c (C) 0.70c (D) 0.80c Let's write a program.",
    "output": "import math\n\n# define the rest length of the rod\nrest_length = 1.00\n\n# define the measured length of the rod\nmeasured_length = 0.80\n\n# calculate the speed of the observer using the formula for length contraction\nspeed = math.sqrt(1 - (measured_length / rest_length)**2)\n\n# print the result\nprint(speed)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "A",
    "raw_ans": "39.5",
    "question": "The energy required to remove both electrons from the helium atom in its ground state is 79.0 eV. How much energy is required to ionize helium (i.e., to remove one electron)?\nAnswer Choices: (A) 24.6 eV (B) 39.5 eV (C) 51.8 eV (D) 54.4 eV Let's write a program.",
    "output": "ground_state_helium_atom_energy = 79.0 # in eV\r\n\r\n# The energy required to remove both electrons from the helium atom in its ground state\r\n# is 79.0 eV. How much energy is required to ionize helium (i.e., to remove one electron)?\r\n\r\n# As the energy required to remove both electrons from the helium atom in its ground state\r\n# is 79.0 eV, the energy required to remove one electron from helium will be half of that.\r\n\r\n# calculate the energy required to remove one electron\r\nenergy_to_remove_one_electron = ground_state_helium_atom_energy / 2\r\n\r\nprint(energy_to_remove_one_electron)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": true,
    "gt": "A",
    "raw_ans": "",
    "question": "At the present time, the temperature of the universe (i.e., the microwave radiation background) is about 3 K. When the temperature was 12 K, typical objects in the universe, such as galaxies, were\nAnswer Choices: (A) one-quarter as distant as they are today (B) one-half as distant as they are today (C) separated by about the same distances as they are today (D) two times as distant as they are today Let's write a program.",
    "output": "temp=3\r\ntemp12=12\r\ntemp12temp=temp12-temp\r\ntemp12temp=3-temp12temp\r\nif temp12temp==1/4:\r\n  print(\"one-quarter as distant as they are today\")\r\nelif temp12temp==1/2:\r\n  print(\"one-half as distant as they are today\")\r\nelif temp12temp==1:\r\n  print(\"separated by about the same distances as they are today\")\r\nelif temp12temp==2:\r\n  print(\"two times as distant as they are today\")\r",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "A",
    "raw_ans": "1",
    "question": "By definition, the electric displacement current through a surface S is proportional to the\nAnswer Choices: (A) rate of change of the electric flux through S (B) electric flux through S (C) time integral of the magnetic flux through S (D) rate of change of the magnetic flux through S Let's write a program.",
    "output": "rate_of_change_of_the_electric_flux=1\r\nelectric_flux=2\r\ntime_integral_of_the_magnetic_flux=3\r\nrate_of_change_of_the_magnetic_flux=4\r\n\r\ndisplacement_current_proportional_to=rate_of_change_of_the_electric_flux\r\n\r\nprint(displacement_current_proportional_to)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "D",
    "raw_ans": "1250000.0",
    "question": "The suspension cable of a 1,000 kg elevator snaps, sending the elevator moving downward through its shaft. The emergency brakes of the elevator stop the elevator shortly before it reaches the bottom of the shaft. If the elevator fell a distance of 100 m starting from rest, the heat that the brakes must dissipate to bring the elevator safely to rest is\nAnswer Choices: (A) 100 J (B) 1,000 J (C) 10,000 J (D) 1,000,000 J Let's write a program.",
    "output": "elevator_mass = 1000\r\ndistance_fallen = 100\r\n\r\ninitial_energy = 0.5 * elevator_mass * (distance_fallen/2) ** 2\r\n\r\nfinal_energy = 0\r\n\r\nheat_dissipated = initial_energy - final_energy\r\n\r\nprint(heat_dissipated)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "C",
    "err": false,
    "question": "The hydrogen lines observed in the spectrum of the quasar 3C9 are shifted so far into the red that their wavelengths are three times as long as those observed in the light from hydrogen atoms at rest in a laboratory on Earth. If it is assumed that the shift is entirely due to the relative motion of 3C9 and Earth, the relative speed of the quasar is\nAnswer Choices: (A) 2c (B) c (C) 0.8c (D) 0.5c Let's write a program.",
    "output": "Let's denote the rest wavelength as l, and the observed wavelength as l_obs. The shift is then l_obs = l + v/c*l. If we assume that the shift is entirely due to the relative motion of 3C9 and Earth, then v is the relative speed of 3C9 and Earth. We are given that l_obs = 3*l. This implies that v/c = 2, and so v = 2c. The answer is A.",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "C",
    "err": false,
    "question": "A 10 kg box slides horizontally without friction at a speed of 1 m/s. At one point, a constant force is applied to the box in the direction of its motion. The box travels 5 m with the constant force applied. The force is then removed, leaving the box with a speed of 2 m/s. Which of the following gives the magnitude of the applied force?\nAnswer Choices: (A) 1 N (B) 2 N (C) 3 N (D) 4 N Let's write a program.",
    "output": "Initial velocity = 1 m/s\nFinal velocity = 2 m/s\nTime = 5/1 = 5 seconds\nForce = Mass x Acceleration\nAcceleration = (Final velocity - Initial velocity) / Time\nForce = 10 x (2 - 1) / 5 = 1 N\nThe answer is A",
    "correct": false
  },
  {
    "ans": "A",
    "err": true,
    "gt": "B",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 24, in <module>\n  File \"<string>\", line 17, in run_it\nNameError: name 'c' is not defined\n",
    "question": "Two spaceships approach Earth with equal speeds, as measured by an observer on Earth, but from opposite directions. A meterstick on one spaceship is measured to be 60 cm long by an occupant of the other spaceship. What is the speed of each spaceship, as measured by the observer on Earth?\nAnswer Choices: (A) 0.4c (B) 0.5c (C) 0.6c (D) 0.7c Let's write a program.",
    "output": "import math\n\n# define the length of the meterstick on one spaceship as measured by an occupant of the other spaceship\nmeterstick_length = 60 # in cm\n\n# convert the length to m\nmeterstick_length_m = meterstick_length / 100\n\n# the speed of each spaceship, as measured by the observer on Earth, is the length of the meterstick divided by the time it takes to travel it\n# since the spaceships approach each other, the time it takes to travel the meterstick is half the time it takes to travel the distance from one spaceship to the other\n\n# calculate the distance between the two spaceships\ndistance = 2 * meterstick_length_m\n\n# calculate the time it takes to travel the distance\ntime = distance / c\n\n# calculate the speed of each spaceship\nspeed = meterstick_length_m / time\n\n# print the speed of each spaceship, as measured by the observer on Earth\nprint(speed)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "C",
    "raw_ans": "5000000.0",
    "question": "The suspension cable of a 1,000 kg elevator snaps, sending the elevator moving downward through its shaft. The emergency brakes of the elevator stop the elevator shortly before it reaches the bottom of the shaft. If the elevator fell a distance of 100 m starting from rest, the heat that the brakes must dissipate to bring the elevator safely to rest is\nAnswer Choices: (A) 10,000 J (B) 100,000 J (C) 1,000,000 J (D) 10,000,000 J Let's write a program.",
    "output": "elevator_mass = 1000\r\ndistance_fallen = 100\r\n\r\ninitial_energy = 0.5 * elevator_mass * (distance_fallen) ** 2\r\n\r\nprint(initial_energy)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "C",
    "err": false,
    "question": "The mean kinetic energy of the conduction electrons in metals is ordinarily much higher than kT because\nAnswer Choices: (A) electrons have many more degrees of freedom than atoms do (B) the electrons and the lattice are not in thermal equilibrium (C) the electrons form a degenerate Fermi gas (D) electrons in metals are highly relativistic Let's write a program.",
    "output": "electrons = 100\natoms = 10\n\nif electrons > atoms:\n  print('A')\nelse:\n  print('B')",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "C",
    "err": false,
    "question": "A 10 kg box slides horizontally without friction at a speed of 1 m/s. At one point, a constant force is applied to the box in the direction of its motion. The box travels 5 m with the constant force applied. The force is then removed, leaving the box with a speed of 2 m/s. Which of the following gives the magnitude of the applied force?\nAnswer Choices: (A) 1 N (B) 2 N (C) 3 N (D) 4 N Let's write a program.",
    "output": "Initial velocity = 1 m/s\nFinal velocity = 2 m/s\nTime = 5/1 = 5 seconds\nForce = Mass x Acceleration\nAcceleration = (Final velocity - Initial velocity) / Time\nForce = 10 x (2 - 1) / 5 = 1 N\nThe answer is A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "D",
    "err": false,
    "question": "Light of variable frequency shines on the metal surface of a photoelectric tube. Einstein\u2019s theory of the photoelectric effect predicts that the\nAnswer Choices: (A) work function of the metal is proportional to the frequency (B) work function of the metal is proportional to the wavelength (C) current in the tube is a linear function of the wavelength (D) potential difference necessary to stop the emitted electrons is a linear function of the frequency above the threshold frequency Let's write a program.",
    "output": "Einstein's theory of the photoelectric effect predicts that the work function of the metal is proportional to the frequency.\nThe answer is A",
    "correct": false
  },
  {
    "ans": "A",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 5, in <module>\n  File \"<string>\", line 2, in run_it\nNameError: name 'k' is not defined\n",
    "question": "A spring of force constant k is stretched a certain distance. It takes twice as much work to stretch a second spring by half this distance. The force constant of the second spring is\nAnswer Choices: (A) k (B) 2k (C) 4k (D) 8k Let's write a program.",
    "output": "FirstSprng = k\r\nSecondSprng = 2*FirstSprng\r\nprint(SecondSprng)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "gt": "C",
    "err": false,
    "question": "An observer O at rest midway between two sources of light at x = 0 and x = 10 m observes the two sources to flash simultaneously. According to a second observer O', moving at a constant speed parallel to the x-axis, one source of light flashes 13 ns before the other. Which of the following gives the speed of O' relative to O?\nAnswer Choices: (A) 0.13c (B) 0.15c (C) 0.36c (D) 0.53c Let's write a program.",
    "output": "Let's solve the multi-choice question step by step.\nThe second observer is moving at a speed u relative to the first observer. The distance between the two sources is 10 m. The difference in the time of arrival of the two signals according to the two observers is 13 ns.\nThe question is asking for the value of u.\nWe can use the formula for the addition of velocities given by v = (u + v)/(1 + uv/c^2) to solve this problem.\nu = (13/10)c\nThe answer is C.",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "4.7959229250131126e-05",
    "question": "The surface of the Sun has a temperature close to 6,000 K and it emits a blackbody (Planck) spectrum that reaches a maximum near 500 nm. For a body with a surface temperature close to 300 K, at what wavelength would the thermal spectrum reach a maximum?\nAnswer Choices: (A) 10:00 PM (B) 100 Pm (C) 10 mm (D) 100 mm Let's write a program.",
    "output": "import scipy.constants as spc\n\n# define the variables\nT_sun = 6000  # temperature of the sun in K\nT_body = 300   # temperature of the body in K\n\n# calculate the maximum wavelength of the sun's thermal spectrum\nlambda_max_sun = spc.h * spc.c / (spc.k * T_sun)\n\n# calculate the maximum wavelength of the body's thermal spectrum\nlambda_max_body = spc.h * spc.c / (spc.k * T_body)\n\n# print the result\nprint(lambda_max_body)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "gt": "B",
    "err": false,
    "question": "Consider an electron in the n = 4, l = 1 state in hydrogen. Which of the following final states can NOT be reached by an allowed transition?\nAnswer Choices: (A) n = 3, l = 2 (B) n = 3, l = 1 (C) n = 3, l = 0 (D) n = 2, l = 0 Let's write a program.",
    "output": "from math import factorial\n\n# The selection rules for hydrogen are:\n# 1. The change in the principal quantum number (n) must be 0 or 1.\n# 2. The change in the azimuthal quantum number (l) must be 0 or 1.\n\n# Let's consider the initial state to be n = 4, l = 1.\n# We will calculate the possible final states using the selection rules.\n\ninitial_n = 4\ninitial_l = 1\nfinal_n = 3\nfinal_l = 2\n\n# Calculate the number of possible final states\npossible_final_states = factorial(final_n) * (2*final_l + 1)\n\n# The total number of possible final states is 5, so one of the states can't be reached.\n# The state that can't be reached is n = 3, l = 2 (option A).\n\nprint(\"A\")",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "A",
    "err": false,
    "question": "A single-electron atom has the electron in the l = 2 state. The number of allowed values of the quantum number m_l is\nAnswer Choices: (A) 5 (B) 4 (C) 3 (D) 2 Let's write a program.",
    "output": "l=2 \nm_l=-2,-1,0,1,2\nnumber of allowed values = 5\nThe answer is A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "594",
    "question": "The driver of a police car hears an echo of the car\u2019s siren from a wall toward which the car is moving with a speed of 3.5 m/s. If the speed of sound is 350 m/s and the frequency of the siren is 600 Hz, the driver hears the echo at a frequency nearest to which of the following?\nAnswer Choices: (A) 588 Hz (B) 594 Hz (C) 600 Hz (D) 612 Hz Let's write a program.",
    "output": "speed_of_car = 3.5 # m/s\r\nspeed_of_sound = 350 # m/s\r\nfrequency_of_siren = 600 # Hz\r\n\r\n# The driver of a police car hears an echo of the car\u2019s siren from a wall toward which the car is moving.\r\n# The echo is heard at the same frequency as the sound from the siren, but it is a little higher because the sound has to travel an extra distance. \r\n# The extra distance is the distance from the wall to the car, which is the length of the car plus the distance from the front of the car to the wall.\r\n# This distance is the car's speed times the time it takes the sound to travel from the car to the wall.\r\n# The time it takes the sound to travel from the car to the wall is the distance from the car to the wall divided by the speed of sound.\r\n\r\ndistance_to_wall = speed_of_car * (speed_of_sound / (speed_of_car + speed_of_sound))\r\n\r\n# The frequency heard by the driver is the frequency of the siren divided by the distance ratio.\r\nheard_frequency = frequency_of_siren / (1 + (distance_to_wall / speed_of_sound))\r\n\r\nprint(round(heard_frequency))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "A",
    "raw_ans": "122.39999999999999",
    "question": "The emission spectrum of the doubly ionized lithium atom Li++ (Z = 3, A = 7) is identical to that of a hydrogen atom in which all the wavelengths are\nAnswer Choices: (A) decreased by a factor of 9 (B) decreased by a factor of 49 (C) decreased by a factor of 81 (D) increased by a factor of 9 Let's write a program.",
    "output": "Ry = 13.6\nLi = 9\nH = 1\nprint(Li/H*Ry)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 21, in <module>\n  File \"<string>\", line 8, in run_it\nAttributeError: module 'sympy' has no attribute 'c'\n",
    "question": "A photon strikes an electron of mass m that is initially at rest, creating an electron-positron pair. The photon is destroyed and the positron and two electrons move off at equal speeds along the initial direction of the photon. The energy of the photon was\nAnswer Choices: (A) mc^2 (B) 2mc^2 (C) 3mc^2 (D) 4mc^2 Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nm = sp.symbols('m')\n\n# the total energy of the photon\nE_photon = m*sp.c**2\n\n# the total energy of the electron-positron pair\nE_pair = 2*m*sp.c**2\n\n# since the photon is destroyed, the energy of the positron and two electrons is the same\n# so the total energy is 3 times the energy of the electron-positron pair\nE_total = 3*E_pair\n\n# the equation E_total = E_photon gives the energy of the photon\nE_photon = E_total - E_pair\n\nprint(E_photon)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "5",
    "question": "Which of the following lasers utilizes transitions that involve the energy levels of free atoms?\nAnswer Choices: (A) Diode laser (B) Dye laser (C) Free-electron laser (D) Gas laser Let's write a program.",
    "output": "Diode = 1\r\nDye = 2\r\nFreeElectron = 3\r\nGas = 4\r\nLaser = 5\r\nAnswer = 5\r\nprint(Answer)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "25.0",
    "question": "Unpolarized light is incident on a pair of ideal linear polarizers whose transmission axes make an angle of 45q with each other. The transmitted light intensity through both polarizers is what percentage of the incident intensity?\nAnswer Choices: (A) 100% (B) 75% (C) 50% (D) 25% Let's write a program.",
    "output": "theta = 45\n# Unpolarized light intensity is 1. \n# After passing through the first polarizer, the light becomes partially polarized. \n# The intensity becomes 1/2. \n# When this light is incident on the second polarizer, the light intensity becomes 1/2 * 1/2 = 1/4. \n# Therefore, the transmitted light intensity is 1/4 of the incident intensity. \n\ntransmitted_light_intensity = (1/2) * (1/2)\npercentage_transmitted_light = transmitted_light_intensity / 1 * 100\nprint(percentage_transmitted_light)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "0.7071067811865475",
    "question": "Sound waves moving at 350 m/s diffract out of a speaker enclosure with an opening that is a long rectangular slit 0.14 m across. At about what frequency will the sound first disappear at an angle of 45q from the normal to the speaker face?\nAnswer Choices: (A) 500 Hz (B) 1,750 Hz (C) 2,750 Hz (D) 3,500 Hz Let's write a program.",
    "output": "import math\n\n# define the variables\nspeed_of_sound = 350  # m/s\nslit_width = 0.14  # m\nangle = 45  # degrees\n\n# convert the angle to radians\nangle_in_radians = math.radians(angle)\n\n# calculate the wavelength of the sound\nwavelength = speed_of_sound / math.sin(angle_in_radians)\n\n# calculate the frequency of the sound\nfrequency = speed_of_sound / wavelength\n\nprint(frequency)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "A",
    "err": false,
    "question": "The emission spectrum of the doubly ionized lithium atom Li++ (Z = 3, A = 7) is identical to that of a hydrogen atom in which all the wavelengths are\nAnswer Choices: (A) decreased by a factor of 9 (B) decreased by a factor of 49 (C) decreased by a factor of 81 (D) increased by a factor of 9 Let's write a program.",
    "output": "Rydberg formula is given by 1/\u03bb = RZ2(1/n12 - 1/n22)\nHere Z is the atomic number of the element\nn1 and n2 are the energy levels\n\u03bb is the wavelength\nR is the Rydberg constant\nSince the emission spectrum of Li++ and H are same, we can say that the Rydberg constant for Li++ is 3 times that of H.\nTherefore the wavelength \u03bb will decrease by a factor of 9.\nHence A is the correct answer.",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "B",
    "raw_ans": "1.00000000000000",
    "question": "A uniform solid disk starts from rest and rolls down an inclined plane without slipping. After some time, what fraction of the disk\u2019s total kinetic energy is rotational kinetic energy?\nAnswer Choices: (A) 1/4 (B) 1/3 (C) 1/2 (D) 2/3 Let's write a program.",
    "output": "import sympy as sp\n\n# Define the total mass and radius of the disk\nm = 1  # kg\nr = 1  # m\n\n# The total kinetic energy of the disk is given by\n# KE = 1/2 * I * omega^2\n# where I is the moment of inertia of the disk and omega is the angular velocity.\n# For a solid disk, I = 1/2 * m * r^2 and omega = v/r where v is the translational velocity of the disk.\n# The rotational kinetic energy is given by\n# KE_rot = 1/2 * I * omega^2\n\n# First, let's calculate the total kinetic energy\n\n# Calculate the translational velocity of the disk\nv = m * r * sp.pi  # m/s\n\n# Calculate the total kinetic energy\nKE = 1/2 * 1/2 * m * r**2 * v**2  # J\n\n# Now, calculate the rotational kinetic energy\nKE_rot = 1/2 * 1/2 * m * r**2 * v**2  # J\n\n# The fraction of the disk's total kinetic energy that is rotational kinetic energy is\nfraction = KE_rot / KE\n\nprint(fraction)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 7, in <module>\n  File \"<string>\", line 2, in run_it\nNameError: name 'speed_of_light_in_vacuum' is not defined\n",
    "question": "The speed of light inside of a nonmagnetic dielectric material with a dielectric constant of 4.0 is\nAnswer Choices: (A) 1.2 * 10^9 m/s (B) 3.0 * 10^8 m/s (C) 1.5 * 10^8 m/s (D) 1.0 * 10^8 m/s Let's write a program.",
    "output": "speed_of_light_inside_nonmagnetic_dielectric_material = speed_of_light_in_vacuum / sqrt(dielectric_constant)\n\nspeed_of_light_inside_nonmagnetic_dielectric_material = speed_of_light_in_vacuum / sqrt(4.0)\n\nprint(speed_of_light_inside_nonmagnetic_dielectric_material)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "A",
    "raw_ans": "405000.0",
    "question": "A 3-microfarad capacitor is connected in series with a 6-microfarad capacitor. When a 300-volt potential difference is applied across this combination, the total energy stored in the two capacitors is\nAnswer Choices: (A) 0.09 J (B) 0.18 J (C) 0.27 J (D) 0.41 J Let's write a program.",
    "output": "import math\n\n# define the capacitances and the potential difference\nC1 = 3\nC2 = 6\nV = 300\n\n# calculate the total energy\nE = (1/2) * (C1 + C2) * V**2\n\nprint(E)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "C",
    "raw_ans": "3.0996049364578764e+22",
    "question": "Under certain conditions, a beam of electrons impinging on a crystal surface will diffract and a scattering pattern of the beam can be obtained. What is the approximate kinetic energy of the electrons needed in order to see the pattern? (Assume the lattice spacing of the crystal to be 0.4 nm.)\nAnswer Choices: (A) 0.1 eV (B) 1 eV (C) 10 eV (D) 100 eV Let's write a program.",
    "output": "import math\n\n# Lattice spacing\na = 0.4  # in nm\n\n# Conversion factor: 1 nm = 10^(-9) m\na *= 10**(-9)  # converting lattice spacing from nm to m\n\n# Planck's constant\nh = 6.62607004 * 10**(-34)  # in Joules\n\n# Speed of light\nc = 299792458  # in m/s\n\n# Conversion factor: 1 eV = 1.60217662 * 10^(-19) Joules\n\n# Minimum kinetic energy needed to see the pattern\nE_min = (h*c) / (a * 1.60217662 * 10**(-19))\n\n# Convert to eV\nE_min_eV = E_min / 10**(-19)\n\nprint(round(E_min_eV, 2))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "1.414213562373095",
    "question": "Two identical satellites, A and B, are in circular orbits around Earth. The orbital radius of A is twice that of B. Which of the following gives the ratio of the angular momentum of A to the angular momentum of B?\nAnswer Choices: (A) 4 (B) 2 (C) sqrt(2) (D) 1/sqrt(2) Let's write a program.",
    "output": "import math\n\n# define the radius of the orbit of B\nr_B = 1\n\n# calculate the radius of the orbit of A\nr_A = 2 * r_B\n\n# calculate the angular momenta of A and B\nh_A = math.sqrt(r_A * math.pi)\nh_B = math.sqrt(r_B * math.pi)\n\n# calculate the ratio of the angular momenta\nratio = h_A / h_B\n\nprint(ratio)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "D",
    "raw_ans": "40.0",
    "question": "An object is thrown horizontally from the open window of a building. If the initial speed of the object is 20 m/s and it hits the ground 2.0 s later, from what height was it thrown? (Neglect air resistance and assume the ground is level.)\nAnswer Choices: (A) 4.9 m (B) 9.8 m (C) 10.0 m (D) 19.6 m Let's write a program.",
    "output": "import math\n\n# Given values\ninitial_speed = 20 # m/s\ntime = 2 # s\n\n# The horizontal distance (x) is equal to the speed (v) times time (t)\nhorizontal_distance = initial_speed * time\n\n# The height (h) of the building can be calculated using the formula: h = 1/2*g*t^2\n# g is the acceleration due to gravity, which is 9.8 m/s^2\nheight = 0.5 * 9.8 * time**2\n\n# The total distance (d) from where the object was thrown is equal to the horizontal distance plus the height\ndistance = horizontal_distance + height\n\n# The initial height from which the object was thrown is equal to the total distance minus the height\ninitial_height = distance - height\n\nprint(initial_height)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "gt": "C",
    "err": false,
    "question": "In a nonrelativistic, one-dimensional collision, a particle of mass 2m collides with a particle of mass m at rest. If the particles stick together after the collision, what fraction of the initial kinetic energy is lost in the collision?\nAnswer Choices: (A) 0 (B) 1/4 (C) 1/3 (D) 1/2 Let's write a program.",
    "output": "Initial total energy = 2*2m*v^2 (where v is the speed of the particle with mass 2m)\nAfter collision, the speed of the combined particle is v1 = v1 + v2\nTotal energy after collision = (2m + m)*v1^2\nLost energy = (2*2m*v^2) - (2m + m)*v1^2\nLost energy as a fraction of initial total energy = (2*2m*v^2 - (2m + m)*v1^2)/(2*2m*v^2)\nWe can simplify this to (2m*v^2 - (2m + m)*v1^2)/(2m*v^2) which is equivalent to (2m*v^2 - 2m*v^2 - m*v^2)/(2m*v^2)\nThis simplifies to -m*v^2/(2m*v^2) which is -1/2\nThe answer is D",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "C",
    "raw_ans": "500",
    "question": "White light is normally incident on a puddle of water (index of refraction 1.33). A thin (500 nm) layer of oil (index of refraction 1.5) floats on the surface of the puddle. Of the following, the most strongly reflected wavelength is\nAnswer Choices: (A) 500 nm (B) 550 nm (C) 600 nm (D) 650 nm Let's write a program.",
    "output": "import math\n\n# define the wavelengths\nwavelengths = [500, 550, 600, 650]\n\n# calculate the reflection coefficient for each wavelength\nreflection_coefficients = [((1.33**2 - 1.5**2) / (1.33**2 + 1.5**2))**2 for wavelength in wavelengths]\n\n# find the wavelength with the highest reflection coefficient\nmost_strongly_reflected_wavelength = wavelengths[reflection_coefficients.index(max(reflection_coefficients))]\n\nprint(most_strongly_reflected_wavelength)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "A",
    "raw_ans": "165127.8562979814",
    "question": "A nonrelativistic particle with a charge twice that of an electron moves through a uniform magnetic field. The field has a strength of \u03c0/4 tesla and is perpendicular to the velocity of the particle. What is the particle\u2019s mass if it has a cyclotron frequency of 1,600 hertz?\nAnswer Choices: (A) 2.5 * 10^-23 kg (B) 1.2 * 10^-22 kg (C) 3.3 * 10^-22 kg (D) 5.0 * 10^-21 kg Let's write a program.",
    "output": "import math\n\n# define the variables\ncharge_ratio = 2 # the charge of the particle is twice that of an electron\nfield_strength = math.pi/4 # in tesla\ncyclotron_frequency = 1600 # in hertz\n\n# calculate the speed of the particle\nspeed = cyclotron_frequency * charge_ratio / (2 * math.pi) # formula for cyclotron frequency\n\n# calculate the mass of the particle\nmass = speed**2 / (field_strength * charge_ratio) # formula for relativistic mass\n\n# print the result\nprint(mass)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "-300 down",
    "question": "An airplane drops a payload while traveling due north, parallel to the ground, at a constant speed of 100 m/s. If air resistance is neglected, what is the velocity of the payload relative to the plane 4.0 s after it is released?\nAnswer Choices: (A) 0 (B) 40 m/s down (C) 80 m/s down (D) 100 m/s north and 40 m/s down Let's write a program.",
    "output": "import math\n\n# define the variables\nspeed = 100 # m/s\ntime = 4 # seconds\n\n# calculate the distance the payload travels in 4 seconds\ndistance = speed * time\n\n# the velocity of the payload relative to the plane is the speed of the plane minus the speed of the payload\nvelocity_relative = speed - distance\n\n# the direction of the velocity is down, because the payload is below the plane\ndirection = \"down\"\n\n# print the result\nprint(f\"{velocity_relative} {direction}\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "-12.1",
    "question": "Positronium is an atom formed by an electron and a positron (antielectron). It is similar to the hydrogen atom, with the positron replacing the proton. If a positronium atom makes a transition from the state with n=3 to a state with n=1, the energy of the photon emitted in this transition is closest to\nAnswer Choices: (A) 6.0 e (B) 6.8 eV (C) 12.2 eV (D) 13.6 eV Let's write a program.",
    "output": "import math\n\n# define the values of n\nn1 = 3\nn2 = 1\n\n# calculate the energy of the photon emitted\nE_photon = (13.6 / (n1**2)) - (13.6 / (n2**2))\n\n# print the result\nprint(round(E_photon, 1))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "gt": "D",
    "err": false,
    "question": "A satellite of mass m orbits a planet of mass M in a circular orbit of radius R. The time required for one revolution is\nAnswer Choices: (A) independent of M (B) proportional to m^(1/2) (C) linear in R (D) proportional to R^(3/2) Let's write a program.",
    "output": "import sympy as sp\n\n# define the symbols\nm, M, R = sp.symbols('m M R')\n\n# The time required for one revolution is given by the formula: T = 2*pi*sqrt(R^3/GM)\n# It is independent of the mass of the satellite (m).\n\n# So, the answer is A.",
    "correct": false
  }
]