[
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "0.01",
    "question": "The plates of a capacitor are charged to a potential difference of 5 V. If the capacitance is 2 mF, what is the charge on the positive plate?\nAnswer Choices: (A) 0.005 C (B) 0.01 C (C) 0.02 C (D) 0.5 C Let's write a program.",
    "output": "import math\n\n# define the variables\npotential_difference = 5  # in V\ncapacitance = 2  # in mF\n\n# convert capacitance to F\ncapacitance_in_F = capacitance / 1000\n\n# calculate the charge on the positive plate\ncharge_on_positive_plate = capacitance_in_F * potential_difference\n\n# print the result\nprint(charge_on_positive_plate)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "A",
    "raw_ans": "0.0001",
    "question": "Which of these quantities decreases as the inverse square of distance for distances far from the objects producing the fields?\nAnswer Choices: (A) the electric field produced by a finite-length charged rod (B) the electric field produced by an infinitely long charged cylinder (C) the electric field produced by an infinite plane of charge (D) the magnetic field produced by an infinitely long, straight current-carrying wire Let's write a program.",
    "output": "def inverse_square(distance):\n    return 1 / (distance ** 2)\n\nrod_length = 1\n\n# The electric field produced by a finite-length charged rod is proportional to 1/distance and decreases as the inverse of distance.\n# So, it does not follow an inverse square law.\n\n# The electric field produced by an infinitely long charged cylinder is proportional to 1/distance and decreases as the inverse of distance.\n# So, it does not follow an inverse square law.\n\n# The electric field produced by an infinite plane of charge is constant and does not depend on distance.\n# So, it does not follow an inverse square law.\n\n# The magnetic field produced by an infinitely long, straight current-carrying wire is proportional to 1/distance and decreases as the inverse of distance.\n# So, it does follow an inverse square law.\n\ndistance = 100  # Far from the wire\nfield = inverse_square(distance)\nprint(field)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "E",
    "gt": "D",
    "err": false,
    "question": "A solid, metal object is isolated from other charges and has charge distributed on its surface. The charge distribution is not uniform. It may be correctly concluded that the\nAnswer Choices: (A) electric field outside the object is zero (B) the electric field outside the object is equal to the electric field inside the object (C) the electric field outside the object is directly proportional to the distance away from the center of mass of the object (D) the electric field outside the object, but very close to the surface, is equal to the surface charge density at any location divided by the permittivity of free space Let's write a program.",
    "output": "from sympy import symbols, Eq, solve\r\n\r\n# charge = charge distribution\r\nq = symbols('charge')\r\n\r\n# electric field = electric field outside the object\r\nE = symbols('E')\r\n\r\n# The charge distribution is not uniform.\r\n# It may be correctly concluded that the electric field outside the object is directly proportional to the distance away from the center of mass of the object\r\neq = Eq(E, q/E)\r\n\r\nanswer = solve(eq)\r\n\r\nprint(answer[0])",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 26, in <module>\n  File \"<string>\", line 22, in run_it\nZeroDivisionError: division by zero\n",
    "question": "Standing waves are produced by a 100-Hz generator in a string of fixed length. The tension in the string is increased until a new set of standing waves is produced. Will the wavelength of the new standing waves be greater than or less than the wavelength of the original standing waves?\nAnswer Choices: (A) Less, because the tension in the string varies directly with the wave speed, which varies inversely with the wavelength. (B) Greater, because the tension in the string varies directly with the wave speed, which varies inversely with the wavelength. (C) Greater, because the tension in the string varies directly with the wave speed, which varies directly with the wavelength. (D) Less, because the tension in the string varies directly with the wave speed, which varies directly with the wavelength. Let's write a program.",
    "output": "import sympy as sp\n\n# define the symbols\nT, v, L, f = sp.symbols('T v L f')\n\n# The speed of the wave in a string is given by v = f*sqrt(T/L)\n# where T is the tension, L is the length of the string and f is the frequency\n# The wavelength is given by L = v/f\n# So, the wavelength is inversely proportional to the square root of the tension\n\n# Initial tension is 0\nT1 = 0\n\n# Initial wavelength\nL1 = 10 # arbitrary value\n\n# Increased tension\nT2 = 100\n\n# The new wavelength will be\nL2 = L1 * sp.sqrt(T2/T1)\n\n# Greater wavelength means less frequency\nprint(L2 > L1)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "D",
    "err": false,
    "question": "Two identical capacitors are hooked in parallel to an external circuit. Which of the following quantities must be the same for both capacitors? I. the charge stored on the capacitor II.  the voltage across the capacitor III. the capacitance of the capacitor\nAnswer Choices: (A) I only (B) II only (C) II and III only (D) (E) I, II, and III Let's write a program.",
    "output": "Let's consider that we have two identical capacitors and some external source of voltage.\nWhen we say that capacitors are hooked in parallel, it means that they are connected together. The voltage across them will be same and as it is mentioned that they are identical, their charges will be same.\nLet's say that we have two capacitors connected in parallel to a battery. Now, if we were to connect a wire between the two capacitors, the total charge on the two capacitors will flow to the newly connected wire.\nThis means that the charge on each capacitor is fixed and it cannot be changed. Hence, as the options mention charge, it will be the same for both capacitors.\nThe answer is A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 21, in <module>\n  File \"<string>\", line 6, in run_it\nNameError: name 'sin' is not defined\n",
    "question": "A 1-kg object is released from rest at the top of a rough-surfaced incline. The object slides without rotating to the bottom of the incline. The object\u2019s kinetic energy at the bottom must be\nAnswer Choices: (A) Equal to the block\u2019s gravitational potential energy when it was released, because total mechanical energy must be conserved. (B) Equal to the block\u2019s gravitational potential energy when it was released, because the gain in kinetic energy compensates for the mechanical energy lost to thermal energy on the rough incline. (C) Less than the block\u2019s gravitational potential energy when it was released, because the gravitational potential energy was converted both to thermal energy and to kinetic energy. (D) Less than the block\u2019s gravitational potential energy when it was released, because the work done by the friction force must be greater than the block\u2019s gain in kinetic energy. Let's write a program.",
    "output": "Total_ME_initial = 0\nTotal_ME_final = 0\n\n# At the top of the incline\nPE_initial = 1*9.8*sin(30)\nKE_initial = 0\nTotal_ME_initial = PE_initial + KE_initial\n\n# At the bottom of the incline\nPE_final = 1*9.8*sin(30)\nKE_final = 1/2*1*9.8*sin(30)\nTotal_ME_final = PE_final + KE_final\n\nif Total_ME_initial == Total_ME_final:\n    print('A')\nelif Total_ME_final > Total_ME_initial:\n    print('C')\nelif Total_ME_final < Total_ME_initial:\n    print('D')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "gt": "A",
    "err": false,
    "question": "A student is experimenting with a simple spring-block oscillator of spring constant k and amplitude A. The block attached to the spring has a mass of m. If the student places a small block of mass m on top of the original block, which of the following is true?\nAnswer Choices: (A) The small block is most likely to slide off when the original block is at maximum displacement from the equilibrium position, but will not slide off as long as the coefficient of static friction between the blocks is greater than kA/[(M+m)g]. (B) The small block is most likely to slide off when the original block is at the equilibrium position, but will not slide off as long as the coefficient of static friction between the blocks is greater than kA/[(M+m)g]. (C) The small block is most likely to slide off when the original block is at maximum displacement from the equilibrium position, but will not slide off as long as the coefficient of static friction between the blocks is greater than (M+m)g/(kA). (D) The small block is most likely to slide off when the original block is at the equilibrium position, but will not slide off as long as the coefficient of static friction between the blocks is greater than (M+m)g/(kA). Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nm, M, k, A, g = sp.symbols('m M k A g')\n\n# coefficient of static friction\nmu = sp.symbols('mu')\n\n# maximum displacement from the equilibrium position\nx_max = A\n\n# the small block is most likely to slide off when the original block is at maximum displacement from the equilibrium position\n# so the condition for the small block to slide off is x_max > mu*m*g/(k+m*g)\nslide_off_cond1 = sp.Eq(x_max, mu*m*g/(k+m*g))\n\n# the small block is most likely to slide off when the original block is at the equilibrium position\n# so the condition for the small block to slide off is mu*m*g/(k+m*g) < x_max\nslide_off_cond2 = sp.Eq(mu*m*g/(k+m*g), x_max)\n\n# the small block will not slide off as long as the coefficient of static friction between the blocks is greater than kA/[(M+m)g]\nno_slide_cond = sp.Eq(mu, k*A/(M+m)*g)\n\n# check if the conditions for the small block to slide off are mutually exclusive\nslide_off_cond1_and_no_slide_cond = sp.And(slide_off_cond1, no_slide_cond)\n\n# if the conditions for the small block to slide off are not mutually exclusive, the small block is most likely to slide off when the original block is at maximum displacement from the equilibrium position\nmost_likely_slide_off_cond1 = sp.Not(slide_off_cond1_and_no_slide_cond)\n\n# the answer is B",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "C",
    "raw_ans": "1.0",
    "question": "How much work is required to charge a 10 \u00b5F capacitor to a potential difference of 100 V ?\nAnswer Choices: (A) 0.005 J (B) 0.01 J (C) 0.05 J (D) 0.1 J Let's write a program.",
    "output": "import math\n\n# define the variables\ncapacitance = 10  # in \u00b5F\npotential_difference = 100  # in V\n\n# calculate the work required\nwork = (potential_difference * capacitance) / 1000  # in J\n\nprint(work)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "A",
    "raw_ans": "-8.229098090849243",
    "question": "A box of mass m slides on a horizontal surface with initial speed v0. It feels no forces other than gravity and the force from the surface. If the coefficient of kinetic friction between the box and the surface is \u03bc, how far does the box slide before coming to rest?\nAnswer Choices: (A) v0^2/(2\u03bcg) (B) v0^2/(\u03bcg) (C) 2v0^2/(\u03bcg) (D) mv0^2/(\u03bcg) Let's write a program.",
    "output": "import math\n\n# define the variables\nm = 10  # mass of the box in kg\nv0 = 5  # initial speed in m/s\n\u03bc = 0.2  # coefficient of kinetic friction\ng = 9.81  # acceleration due to gravity in m/s^2\n\n# calculate the distance the box slides before coming to rest\n# the equation of motion is v = v0 - \u03bcg*t, but we need to solve for t first\n# so we rearrange the equation to t = v0 / (\u03bcg - v)\n# then we substitute t into the equation for the distance\n\nt = v0 / (\u03bc*g - v0)\ndistance = t * v0\n\nprint(distance)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "B",
    "raw_ans": "4.081632653061225",
    "question": "A soccer ball, at rest on the ground, is kicked with an initial velocity of 10 m/s at a launch angle of 30\u00b0. Calculate its total flight time, assuming that air resistance is negligible.\nAnswer Choices: (A) 0.5 s (B) 1 s (C) 2 s (D) 4 s Let's write a program.",
    "output": "import math\n\n# define the initial velocity and the launch angle\nV = 10  # m/s\ntheta = 30  # degrees\n\n# convert the launch angle to radians\ntheta = math.radians(theta)\n\n# calculate the time it takes for the soccer ball to reach its maximum height\nt_max = V / (9.8 * math.sin(theta))\n\n# calculate the total flight time\nT = 2 * t_max\n\n# print the result\nprint(T)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "gt": "D",
    "err": false,
    "question": "Two identical containers are filled with different gases. Container 1 is filled with hydrogen and container 2 is filled with nitrogen. Each container is set on a lab table and allowed to come to thermal equilibrium with the room. Which of the following correctly compares the properties of the two gases?\nAnswer Choices: (A) The average kinetic energy of the hydrogen gas is greater than the nitrogen gas. (B) The average force exerted on the container by the hydrogen gas is greater than the nitrogen gas. (C) The density of the hydrogen gas is less than the nitrogen gas. (D) The pressures of the gases cannot be compared without knowing the number of molecules in each container. Let's write a program.",
    "output": "We can determine the properties of the gases by using the Ideal Gas Law. The ideal gas law can be expressed as follows:\nPV = nRT\nwhere P is the pressure, V is the volume, n is the number of moles, R is the gas constant, and T is the temperature. Since the two containers are identical, the volume is the same. The number of moles can be determined by dividing the mass of the gas by the molar mass. The molar mass of hydrogen is 1 g/mol and the molar mass of nitrogen is 14 g/mol. Since the containers are identical, the pressure and temperature are the same for both gases.\nWe can now substitute the given values into the ideal gas law and solve for the pressure.\nP = (m/M)RT / V\nwhere m is the mass of the gas and M is the molar mass. Since the number of moles is proportional to the mass, we can say that for the same number of moles, the pressure is inversely proportional to the molar mass.\nLet's assume that the temperature and volume are 100 K and 100 L, respectively.\nFor hydrogen, the pressure is (1/1) * 100 * 100 / 100 = 100 Pa\nFor nitrogen, the pressure is (14/1) * 100 * 100 / 100 = 1400 Pa\nThe nitrogen gas has a higher pressure than the hydrogen gas. Therefore, the average force exerted on the container by the hydrogen gas is greater than the nitrogen gas.\nThe answer is B.",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "False",
    "question": "A girl of mass m and a boy of mass 2m are sitting on opposite sides of a see-saw with its fulcrum in the center. Right now, the boy and girl are equally far from the fulcrum, and it tilts in favor of the boy. Which of the following would NOT be a possible method to balance the see-saw?\nAnswer Choices: (A) Move the boy to half his original distance from the fulcrum. (B) Move the girl to double her original distance from the fulcrum. (C) Allow a second girl of mass m to join the first. (D) Move the fulcrum to half its original distance from the boy. Let's write a program.",
    "output": "import math\n\n# define the masses\nm_girl = 1\nm_boy = 2\n\n# initial distance of boy and girl from fulcrum\nr_boy = 1\nr_girl = 1\n\n# initial torque\nT_initial = (m_boy * r_boy) - (m_girl * r_girl)\n\n# methods\nmethod_1 = 2 * m_boy * (r_boy / 2) - (m_girl * r_girl)\nmethod_2 = (m_boy * r_boy) - (2 * m_girl * (r_girl * 2))\nmethod_3 = (m_boy * r_boy) - (m_girl * (r_girl * 2)) + (m_girl * r_girl)\nmethod_4 = (m_boy * (r_boy / 2)) - (m_girl * r_girl) + (m_girl * r_girl)\n\n# check if the methods are equal\nif T_initial == method_1 and T_initial == method_2 and T_initial == method_3 and T_initial == method_4:\n    print(True)\nelse:\n    print(False)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "The water molecules collide with the alcohol molecules, transferring energy until the average kinetic energy of both the water and alcohol molecules are the same",
    "question": "When hot water is poured into a beaker containing cold alcohol, the temperature of the mixture will eventually reach the same temperature. Considering the scale of the size of the molecules of the fluids, which of the following is the primary reason for this phenomenon?\nAnswer Choices: (A) The high temperature water will rise to the top of the container until it has cooled and then mixes with the alcohol. (B) The molecules of the water continue to have a higher kinetic energy than the molecules of the alcohol, but the two liquids mix until the energy is spread evenly throughout the container. (C) The hot water produces thermal radiation that is absorbed by the cold alcohol until the kinetic energy of all the molecules is the same. (D) The water molecules collide with the alcohol molecules, transferring energy until the average kinetic energy of both the water and alcohol molecules are the same. Let's write a program.",
    "output": "import random\n\n# Define the initial temperatures of the water and alcohol\nT_water = 100  # in degrees Celsius\nT_alcohol = 0  # in degrees Celsius\n\n# Define the temperatures at which the mixture reaches thermal equilibrium\nT_equilibrium = 27  # in degrees Celsius\n\n# Calculate the total energy of the water and alcohol\nE_water = T_water * 100  # in Joules\nE_alcohol = T_alcohol * 100  # in Joules\n\n# Calculate the total energy of the mixture\nE_mixture = E_water + E_alcohol  # in Joules\n\n# Calculate the number of times the water and alcohol need to collide to reach thermal equilibrium\nn = E_mixture / (2 * T_equilibrium * 100)  # in Joules\n\n# Print the primary reason for this phenomenon\nprint(\"The water molecules collide with the alcohol molecules, transferring energy until the average kinetic energy of both the water and alcohol molecules are the same.\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "2.0",
    "question": "A solid sphere (I = 0.06 kg\u00b7m^2) spins freely around an axis through its center at an angular speed of 20 rad/s. It is desired to bring the sphere to rest by applying a friction force of magnitude 2.0 N to the sphere\u2019s outer surface, a distance of 0.30 m from the sphere\u2019s center. How much time will it take the sphere to come to rest?\nAnswer Choices: (A) 4 s (B) 2 s (C) 0.06 s (D) 0.03 s Let's write a program.",
    "output": "import math\n\n# define the variables\nI = 0.06 # moment of inertia in kg\u00b7m^2\nomega = 20 # angular speed in rad/s\n\n# calculate the angular momentum\nL = I * omega\n\n# friction force magnitude in N\nf = 2\n\n# distance from the sphere's center to the surface in m\nr = 0.30\n\n# calculate the torque\ntau = f * r\n\n# calculate the time it will take for the sphere to come to rest\n# using the formula t = L / tau\nt = L / tau\n\nprint(t)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "D",
    "err": false,
    "gt": "B",
    "raw_ans": "242331127.17",
    "question": "The radius of Mars is about half that of Earth; the mass of Mars is about one-tenth that of Earth. Which of the following is closest to the gravitational field at the surface of Mars?\nAnswer Choices: (A) 10 N/kg (B) 4 N/kg (C) 2 N/kg (D) 0.5 N/kg Let's write a program.",
    "output": "import math\n\n# define the radius and mass of Earth\nradius_Earth = 6378.14  # km\nmass_Earth = 5.9723673e24  # kg\n\n# calculate the radius and mass of Mars\nradius_Mars = radius_Earth / 2\nmass_Mars = mass_Earth / 10\n\n# calculate the gravitational field at the surface of Mars\ngravitational_field_Mars = math.sqrt(mass_Mars / (radius_Mars ** 2))\n\n# print the result\nprint(round(gravitational_field_Mars, 2))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "-sigma/(2*epsilon_o)",
    "question": "Above an infinitely large plane carrying charge density \u03c3, the electric field points up and is equal to \u03c3/2\u03b5o. What is the magnitude and direction of the electric field below the plane?\nAnswer Choices: (A) \u03c3/2\u03b5o, down (B) \u03c3/2\u03b5o, up (C) \u03c3/\u03b5o, down (D) \u03c3/\u03b5o, up Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\n\u03c3 = sp.symbols('sigma')\n\u03b5o = sp.symbols('epsilon_o')\n\n# define the electric field above the plane\nE_above = \u03c3/2/\u03b5o\n\n# the electric field below the plane is the same magnitude but in the opposite direction\nE_below = -E_above\n\n# print the result\nprint(E_below)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "3.1249999999999996e+25",
    "question": "A beam of electrons has speed 10^7 m/s. It is desired to use the magnetic field of the Earth, 5 \u00d7 10\u22125 T, to bend the electron beam into a circle. What will be the radius of this circle?\nAnswer Choices: (A) 1 nm (B) 1 \u03bcm (C) 1 mm (D) 1 m Let's write a program.",
    "output": "speed = 10**7 # m/s\nmagnetic_field = 5 * 10**-5 # T\ncharge = 1.6 * 10**-19 # C\n\nradius = (speed * magnetic_field * 10**4) / charge\n\nprint(radius)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "200",
    "question": "An object is placed 100 cm from a plane mirror. How far is the image from the object?\nAnswer Choices: (A) 50 cm (B) 100 cm (C) 200 cm (D) 300 cm Let's write a program.",
    "output": "object_distance = 100 # in cm\r\nimage_distance = object_distance * 2\r\nprint(image_distance)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "1",
    "question": "A horse is attached to a cart that is at rest behind it. Which force, or combination of forces, explains how the horse-cart system can accelerate from rest?\nAnswer Choices: (A) The forward static friction force of the ground on the horse is greater than any friction forces acting backward on the cart, providing a forward acceleration. (B) The forward force of the horse on the cart is greater than the backward force of the cart on the horse, providing a forward acceleration. (C) The force of the horse\u2019s muscles on the rest of the horse-cart system provides the necessary acceleration. (D) The upward normal force of the ground on the horse is greater than the horse\u2019s weight, providing an upward acceleration. Let's write a program.",
    "output": "from sympy import Eq, Symbol, solve\r\n\r\n# x = acceleration of the cart\r\nx = Symbol('x')\r\neq = Eq((x-1), 0)\r\n\r\nanswer = solve(eq)\r\n\r\nprint(answer[0])",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "-48.0",
    "question": "In a certain region, the electric field varies with the radius away from origin by the equation Er = \u20136r^2 + 4r + 3, where r is given in meters and E in N/C. The potential difference between the origin and the point (3, 4) is\nAnswer Choices: (A) \u2013165 V (B) \u2013120 V (C) 64 V (D) 185 V Let's write a program.",
    "output": "import math\n\n# define the equation for electric field\ndef Er(r):\n    return -6*r**2 + 4*r + 3\n\n# calculate the potential difference between the origin and the point (3, 4)\n# potential difference = integral of electric field from r=0 to r=3\npotential_difference = math.fsum(Er(r) for r in range(0, 4))\n\nprint(potential_difference)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "B",
    "raw_ans": "263.9162857830166",
    "question": "A gas undergoes an expansion-compression cycle. If, plotted on a P-V diagram, the cycle is counterclockwise and the work is 300 J in magnitude, what was the heat transfer during this cycle?\nAnswer Choices: (A) 300 J into the system (B) 300 J out of the system (C) 600 J into the system (D) 600 J out of the system Let's write a program.",
    "output": "import math\n\n# The work done in a cycle is the area enclosed by the cycle on a P-V diagram\n# If the cycle is counterclockwise, the area is positive, and if it is clockwise, the area is negative\n# In this case, the area is positive, so the work done is into the system\n\n# The heat transfer is the work done minus the change in internal energy\n# The change in internal energy is the area under the cycle on a T-S diagram\n# The work done is the area on a P-V diagram, so the heat transfer is the area on a P-V diagram minus the area on a T-S diagram\n\n# The area on a P-V diagram is 300 J\nwork_on_pv_diagram = 300\n\n# The area on a T-S diagram is the absolute value of the work divided by the gas constant\n# The absolute value of the work is the magnitude of the work, which is 300 J\nabsolute_work = math.fabs(work_on_pv_diagram)\n\n# The gas constant is 8.314 J/mol K\ngas_constant = 8.314\n\n# The area on a T-S diagram is absolute_work / gas_constant\narea_on_ts_diagram = absolute_work / gas_constant\n\n# The heat transfer is the work done minus the change in internal energy\nheat_transfer = work_on_pv_diagram - area_on_ts_diagram\n\nprint(heat_transfer)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "C",
    "raw_ans": "V**2/(2*R)",
    "question": "An ideal battery of constant voltage V supplies current to a circuit that has total resistance R. If R is doubled, what will happen to the total power dissipated by the circuit?\nAnswer Choices: (A) It will double. (B) It will quadruple. (C) It will be halved. (D) It will remain the same. Let's write a program.",
    "output": "import sympy as sp\n\n# define the symbols\nV, R = sp.symbols('V R')\n\n# calculate the power dissipated by the circuit\npower = V**2 / R\n\n# if R is doubled, the power will be halved\nnew_power = V**2 / (2*R)\n\n# print the result\nprint(new_power)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "4999999999999999.0",
    "question": "Ultraviolet light has a wavelength of about 6 \u00d7 10^-8 m. What is the frequency of this light?\nAnswer Choices: (A) 5 \u00d7 10^15 Hz (B) 0.5 Hz (C) 2 Hz (D) 20 Hz Let's write a program.",
    "output": "wavelength = 6 * 10**-8 # m\nspeed_of_light = 3 * 10**8 # m/s\n\nfrequency = speed_of_light / wavelength\n\nprint(frequency)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "1.5915494309189533",
    "question": "Each of the following ionized isotopes is projected with the same speed into a uniform magnetic field B such that the isotope's initial velocity is perpendicular to B. Which combination of mass and charge would result in a circular path with the largest radius?\nAnswer Choices: (A) m = 16 u, q = \u20135 e (B) m = 17 u, q = \u20134 e (C) m = 18 u, q = \u20133 e (D) m = 20 u, q = \u20131 e Let's write a program.",
    "output": "import math\n\n# define the mass and charge of each isotope\nisotope1 = {'mass': 16, 'charge': -5}\nisotope2 = {'mass': 17, 'charge': -4}\nisotope3 = {'mass': 18, 'charge': -3}\nisotope4 = {'mass': 20, 'charge': -1}\n\n# calculate the radius of each isotope's circular path\nradius1 = math.sqrt((isotope1['mass']*isotope1['charge'])**2 / (16*math.pi**2*isotope1['charge']**2))\nradius2 = math.sqrt((isotope2['mass']*isotope2['charge'])**2 / (16*math.pi**2*isotope2['charge']**2))\nradius3 = math.sqrt((isotope3['mass']*isotope3['charge'])**2 / (16*math.pi**2*isotope3['charge']**2))\nradius4 = math.sqrt((isotope4['mass']*isotope4['charge'])**2 / (16*math.pi**2*isotope4['charge']**2))\n\n# find the combination of mass and charge that results in the largest radius\nmax_radius = max(radius1, radius2, radius3, radius4)\n\nprint(max_radius)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "0.0",
    "question": "An electric dipole consists of a pair of equal but opposite point charges of magnitude 4.0 nC separated by a distance of 2.0 cm. What is the electric field strength at the point midway between the charges?\nAnswer Choices: (A) 0 (B) 9.0 \u00d7 10^4 N/C (C) 1.8 \u00d7 10^5 N/C (D) 7.2 \u00d7 10^5 N/C Let's write a program.",
    "output": "import math\n\n# define the charges and distance\nq1 = 4.0\nq2 = -4.0\nr = 2.0\n\n# calculate the electric field strength\nE = (q1 + q2) / (4 * math.pi * r**2)\n\nprint(E)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "D",
    "err": false,
    "question": "A person can stand outside on a cold day for hours without ill effect, but falling into a cold lake can kill a person in a matter of minutes. Which of the following is the primary reason for this phenomenon?\nAnswer Choices: (A) The molecules of the person are, on average, moving faster than those of the surroundings. (B) Thermal energy moves from high concentration areas (hot) to low concentration areas (cold). (C) As heat flows out of the person and warms the fluid surrounding the person, the warmer fluid rises, allowing fresh cool fluid to come in contact with the person and increasing the rate of heat transfer. (D) Water has more molecules per volume than air, increasing molecular contact with the person. Let's write a program.",
    "output": "person = 0.0001 # K/min\nlake = 0.0009 # K/min\n\nif person > lake:\n  print('A person can stand outside on a cold day for hours without ill effect')\nelse:\n  print('Falling into a cold lake can kill a person in a matter of minutes')",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 295, in execute_code\n    code = black.format_str(code_str, mode=black.FileMode())\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1079, in format_str\n    dst_contents = _format_str_once(src_contents, mode=mode)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1089, in _format_str_once\n    src_node = lib2to3_parse(src_contents.lstrip(), mode.target_versions)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/parsing.py\", line 127, in lib2to3_parse\n    raise exc from None\nblack.parsing.InvalidInput: Cannot parse: 1:3: Let's use the formula for the volume of a cylinder (the pipe can be considered to be a cylinder) which is V = \u03c0r^2h. Since the flow rate is constant, the volume of the cylinder is constant.\n",
    "question": "A liquid flows at a constant flow rate through a pipe with circular cross-sections of varying diameters. At one point in the pipe, the diameter is 2 cm and the flow speed is 18 m/s. What is the flow speed at another point in this pipe, where the diameter is 3 cm?\nAnswer Choices: (A) 4 m/s (B) 6 m/s (C) 8 m/s (D) 12 m/s Let's write a program.",
    "output": "Let's use the formula for the volume of a cylinder (the pipe can be considered to be a cylinder) which is V = \u03c0r^2h. Since the flow rate is constant, the volume of the cylinder is constant.\nradius1 = 2/2 # convert the diameter to radius\nradius2 = 3/2 # convert the diameter to radius\nflow_speed1 = 18 # m/s\n\n# calculate the height of the cylinder using the volume\nheight = 1 / (\u03c0 * radius1**2) * \u03c0 * radius2**2 * flow_speed1\n\n# calculate the flow speed at the second point\nflow_speed2 = height / (\u03c0 * radius2**2)\n\nprint(flow_speed2)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "C",
    "raw_ans": "2.0",
    "question": "An ideal fluid flows through a pipe with radius Q and flow speed V. If the pipe splits up into three separate paths, each with radius (Q/2), what is the flow speed through each of the paths?\nAnswer Choices: (A) 1/3 V (B) 2/3 V (C) 4/3 V (D) 4V Let's write a program.",
    "output": "import math\n\n# define the variables\nQ = 1 # radius of the pipe\nV = 1 # flow speed in the pipe\n\n# calculate the flow speed through each of the paths\nQ_paths = Q/2 # radius of each path\nV_paths = math.sqrt(V**2 / (Q_paths**2))\n\nprint(V_paths) # print the flow speed through each of the paths",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 57, in <module>\n  File \"<string>\", line 38, in run_it\nTypeError: object of type 'method' has no len()\n",
    "question": "A very slow-moving positron interacts with a stationary electron. Which of the following statements correctly describes a possible outcome of this reaction and why it would occur?\nAnswer Choices: (A) Conservation of mass indicates that if a single new particle were created in the reaction, it must have a total mass equal to the combined masses of the electron and positron. (B) Conservation of charge indicates that all new particles created in the reaction would have no electric charge. (C) Conservation of momentum indicates that two identical gamma rays moving off in opposite directions could be created. (D) Conservation of energy indicates that the antimatter positron could annihilate into energy, leaving the stationary electron behind. Let's write a program.",
    "output": "from sympy import Eq, symbols, solve\r\n\r\n# conservation of mass\r\nm_e = 1\r\nm_p = 1\r\nm_gamma = 0\r\n\r\nm_total = m_e + m_p\r\n\r\n# conservation of charge\r\nq_e = -1\r\nq_p = 1\r\nq_gamma = 0\r\n\r\nq_total = q_e + q_p\r\n\r\n# conservation of momentum\r\nv_e = 0\r\nv_p = 0\r\nv_gamma = v_e + v_p\r\n\r\n# conservation of energy\r\nE_e = 0\r\nE_p = 0\r\nE_gamma = 0\r\n\r\nE_total = E_e + E_p + E_gamma\r\n\r\n# all equations\r\neq1 = Eq(m_total, m_gamma*2)\r\neq2 = Eq(q_total, q_gamma*2)\r\neq3 = Eq(v_gamma, v_e + v_p)\r\neq4 = Eq(E_total, E_e + E_p + E_gamma)\r\n\r\nanswer_dict = {}\r\n\r\nfor i in range(len(eq1.subs)):\r\n    answer_dict[eq1.subs[i][0]] = eq1.subs[i][1]\r\n\r\nfor i in range(len(eq2.subs)):\r\n    answer_dict[eq2.subs[i][0]] = eq2.subs[i][1]\r\n\r\nfor i in range(len(eq3.subs)):\r\n    answer_dict[eq3.subs[i][0]] = eq3.subs[i][1]\r\n\r\nfor i in range(len(eq4.subs)):\r\n    answer_dict[eq4.subs[i][0]] = eq4.subs[i][1]\r\n\r\nanswer_dict['v_gamma'] = v_gamma\r\n\r\nanswer_dict['E_gamma'] = answer_dict['E_e'] + answer_dict['E_p']\r\n\r\nanswer_dict['E_total'] = answer_dict['E_gamma'] + answer_dict['E_e'] + answer_dict['E_p']\r\n\r\nprint(answer_dict)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "-80",
    "question": "A box sits on an inclined plane without sliding. As the angle of the plane (measured from the horizontal) increases, the normal force\nAnswer Choices: (A) increases linearly (B) decreases linearly (C) does not change (D) decreases nonlinearly Let's write a program.",
    "output": "theta = 0\nnormal_force = 100\nwhile theta < 180:\n    theta += 1\n    normal_force -= 1\nprint(normal_force)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "A",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 24, in <module>\n  File \"<string>\", line 9, in run_it\nNameError: name 'v' is not defined\n",
    "question": "A small cart of mass m is initially at rest. It collides elastically with a large cart of mass 4m and velocity v. The large cart loses half its kinetic energy to the little cart. The little cart now has a velocity of\nAnswer Choices: (A) 1.41v (B) v (C) 2v (D) 4v Let's write a program.",
    "output": "import math\n\n# define the masses\nm1 = 1 # mass of small cart\nm2 = 4 # mass of large cart\n\n# define the initial velocity of the large cart\nv2_initial = v\n\n# calculate the initial kinetic energy of the large cart\nKE2_initial = 0.5 * m2 * v2_initial**2\n\n# calculate the final kinetic energy of the large cart\nKE2_final = KE2_initial / 2\n\n# calculate the final velocity of the large cart\nv2_final = math.sqrt(KE2_final / m2)\n\n# calculate the final velocity of the small cart\nv1_final = v2_final - v2_initial\n\nprint(v1_final)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "initial_charge",
    "question": "A circuit consists of a battery and a light bulb. At first, the circuit is disconnected. Then, the circuit is connected, and the light bulb lights. After the light bulb has been lit for a few moments, how has the net charge residing on the circuit elements changed?\nAnswer Choices: (A) The net charge has become more positive. (B) The net charge has become more negative. (C) The net charge has not changed. (D) Whether the net charge becomes more positive or more negative depends on the initial net charge residing on the circuit elements before the bulb was lit. Let's write a program.",
    "output": "import sympy as sp\n\n# Define the initial net charge on the circuit elements\ninitial_charge = sp.symbols('initial_charge')\n\n# The light bulb will cause the net charge to become more positive or more negative\n# We don't know which situation we're in, but the net charge will definitely change\n\nfinal_charge = initial_charge\n\n# Print the answer\nprint(final_charge)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "It would continue rotating on its axis, but it would stop revolving around the Earth",
    "question": "If the force of gravity between the Moon and the Earth were to stop, which statement best describes the resulting motion of the moon?\nAnswer Choices: (A) It would continue rotating on its axis, and it would revolve around the Earth as usual. (B) It would continue rotating on its axis, but it would stop revolving around the Earth. (C) It would stop rotating on its axis, but it would revolve around the Earth as usual. (D) It would stop rotating on its axis, and it would stop revolving around the Earth. Let's write a program.",
    "output": "if_force_of_gravity_stopped = 'It would continue rotating on its axis, but it would stop revolving around the Earth.'\r\nprint(if_force_of_gravity_stopped)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": true,
    "gt": "B",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 32, in <module>\n  File \"<string>\", line 30, in run_it\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/sympy/core/relational.py\", line 510, in __bool__\n    raise TypeError(\"cannot determine truth value of Relational\")\nTypeError: cannot determine truth value of Relational\n",
    "question": "A person stands on a scale in an elevator. He notices that the scale reading is less than his usual weight. Which of the following could possibly describe the motion of the elevator?\nAnswer Choices: (A) It is moving downward and slowing down. (B) It is moving upward and slowing down. (C) It is moving upward at a constant speed. (D) It is moving downward at a constant speed. Let's write a program.",
    "output": "from sympy import symbols, Eq, solve\r\n\r\n# usual_weight = normal weight of the person standing in elevator\r\nuw, v, g = symbols('usual_weight, v, g')\r\n\r\neq1 = Eq(uw, v+g)\r\n\r\nmotion_of_elevator = [\r\n    \"It is moving downward and slowing down.\",\r\n    \"It is moving upward and slowing down.\",\r\n    \"It is moving upward at a constant speed.\",\r\n    \"It is moving downward at a constant speed.\"\r\n]\r\n\r\nfor i in motion_of_elevator:\r\n    if 'downward' in i:\r\n        if 'slowing' in i:\r\n            eq2 = Eq(v, g)\r\n        else:\r\n            eq2 = Eq(v, 0)\r\n    else:\r\n        if 'slowing' in i:\r\n            eq2 = Eq(v, -g)\r\n        else:\r\n            eq2 = Eq(v, g)\r\n\r\n    solution = solve((eq1,eq2), (v, g))\r\n\r\n    if solution[v] < 0:\r\n        print(i)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "C",
    "raw_ans": "I. The ball\u2019s speed is zero at the highest point.\nII is false.\nIII is false",
    "question": "A whiffle ball is tossed straight up, reaches a highest point, and falls back down. Air resistance is not negligible. Which of the following statements are true?\nI. The ball\u2019s speed is zero at the highest point.\nII. The ball\u2019s acceleration is zero at the highest point.\nIII. The ball takes a longer time to travel up to the highest point than to fall back down.\nAnswer Choices: (A) I only (B) II only (C) I & II only (D) I & III only Let's write a program.",
    "output": "import math\n\n# define the initial speed and height\nspeed = 0\nheight = 0\n\n# calculate the time to reach the highest point\ntime_up = math.sqrt(2 * height / 9.8)\n\n# calculate the time to fall back down\ntime_down = time_up\n\n# calculate the speed and acceleration at the highest point\nspeed_up = speed - 9.8 * time_up\nacceleration_up = -9.8\n\n# print the statements that are true\nprint(\"I. The ball\u2019s speed is zero at the highest point.\" if speed_up == 0 else \"I is false.\")\nprint(\"II. The ball\u2019s acceleration is zero at the highest point.\" if acceleration_up == 0 else \"II is false.\")\nprint(\"III. The ball takes a longer time to travel up to the highest point than to fall back down.\" if time_up > time_down else \"III is false.\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "1.0",
    "question": "If L, M, and T denote the dimensions of length, mass, and time, respectively, what are the dimensions of impulse?\nAnswer Choices: (A) LM/T^3 (B) LM/T^2 (C) LM/T (D) L^2M/T^2 Let's write a program.",
    "output": "def dimensions_of_impulse():\n    L = 1 # for length\n    M = 1 # for mass\n    T = 1 # for time\n    dimensions = L*M/T\n    return dimensions\n\nprint(dimensions_of_impulse())",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "C",
    "raw_ans": "1299035.105676658",
    "question": "Traveling at an initial speed of 1.5 \u00d7 10^6 m/s, a proton enters a region of constant magnetic field of magnitude 1.5 T. If the proton's initial velocity vector makes an angle of 30\u00b0 with the magnetic field, compute the proton's speed 4 s after entering the magnetic field.\nAnswer Choices: (A) 5.0 \u00d7 10^6 m/s (B) 7.5 \u00d7 10^6 m/s (C) 1.5 \u00d7 10^6 m/s (D) 3.0 \u00d7 10^6 m/s Let's write a program.",
    "output": "import math\n\n# define the initial speed and angle\ninitial_speed = 1.5e6\nangle = 30\n\n# calculate the initial velocity vector\ninitial_velocity = initial_speed * math.cos(math.radians(angle))\n\n# define the constant magnetic field\nmagnetic_field = 1.5\n\n# calculate the acceleration due to the magnetic field\nmagnetic_field_acceleration = -magnetic_field * math.sin(math.radians(angle))\n\n# calculate the speed 4 seconds after entering the magnetic field\ntime = 4\nfinal_speed = initial_velocity + magnetic_field_acceleration * time\n\nprint(final_speed)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 4, in <module>\n  File \"<string>\", line 2, in run_it\nNameError: name 'B' is not defined\n",
    "question": "A man stands on a platform scale in an elevator. The elevator moves upward, speeding up. What is the action-reaction force pair to the man\u2019s weight?\nAnswer Choices: (A) The force of the elevator cable on the man (B) The force of the man on the scale (C) The force of the elevator cable on the elevator (D) The force of the man on the Earth Let's write a program.",
    "output": "man_on_scale=B\r\nprint(man_on_scale)\r",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "A",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 2, in run_it\nModuleNotFoundError: No module named 'sympy.physics.thermodynamics'\n",
    "question": "During an isothermal expansion, a confined ideal gas does 150 J of work against its surroundings. Which of the following describes the heat transfer during this process?\nAnswer Choices: (A) 150 J of heat was added to the gas. (B) 150 J of heat was removed from the gas. (C) 300 J of heat was added to the gas. (D) 300 J of heat was removed from the gas. Let's write a program.",
    "output": "from sympy.physics.thermodynamics import isothermal_work\n\n# define the work\nwork = 150\n\n# calculate the heat transfer\nheat_transfer = isothermal_work(work)\n\n# print the result\nprint(heat_transfer)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "A",
    "raw_ans": "",
    "question": "An object carries a charge of \u20131 C. How many excess electrons does it contain?\nAnswer Choices: (A) 6.25 \u00d7 10^18 (B) 8.00 \u00d7 10^18 (C) 1.60 \u00d7 10^19 (D) 3.20 \u00d7 10^19 Let's write a program.",
    "output": "charge = -1\r\nno_of_electrons = 6.25e18\r\n\r\nif charge == 1:\r\n    print(no_of_electrons)\r\n",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "C",
    "raw_ans": "2",
    "question": "A guitar string creates a sound wave of known frequency. Which of the following describes a correct and practical method of measuring the wavelength of the sound wave with a meterstick?\nAnswer Choices: (A) Lightly touch the guitar string in the middle such that a single node is created. Measure the length of the string; this is the wavelength. (B) Measure the length of the guitar string; this is half the wavelength. (C) Adjust the length of a pipe placed near the string so that resonances are heard. Measure the difference between the pipe lengths for consecutive resonances; this is half the wavelength. (D) Measure the peak-to-peak distance of the wave as it passes; this is the wavelength. Let's write a program.",
    "output": "light_touch = 1\nmiddle_touch = 2\npipe_length = 3\npeak_to_peak = 4\n\n# The correct method is to measure the length of the guitar string. \n# This is half the wavelength. \n\ncorrect_method = middle_touch\n\nprint(correct_method)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "real",
    "question": "Which of the following statements about images is true?\nAnswer Choices: (A) Images produced by concave lenses are always real. (B) Images produced by concave mirros are always real. (C) Images produced by convex lenses can be both real and virtual. (D) Images produced by convex mirrors can be both real and virtual. Let's write a program.",
    "output": "def image_type(lens):\n    if lens == 'concave':\n        return 'real'\n    elif lens == 'convex':\n        return 'both real and virtual'\n\nprint(image_type('concave'))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "D",
    "err": false,
    "gt": "C",
    "raw_ans": "3192.0",
    "question": "Pretend someone actually managed to dig a hole straight through the center of the Earth all the way to the other side. If an object were dropped down that hole, which of the following would best describe its motion? Assume ideal conditions and that the object cannot be destroyed.\nAnswer Choices: (A) It would fall to the center of the Earth and stop there. (B) It would fall through the hole to the other side, continue past the opposite side\u2019s opening, and fly into space. (C) It would oscillate back and forth from one opening to the other indefinitely. (D) It would fall to the other side and stop there. Let's write a program.",
    "output": "import math\n\n# Define the radius of the Earth\nradius_earth = 6378  # in km\n\n# Define the radius of the hole\nradius_hole = 1  # in km\n\n# Calculate the distance from the center of the Earth to the center of the hole\ndistance = math.sqrt(radius_earth**2 - radius_hole**2)\n\n# Since the object is dropped from the hole, the initial distance from the center of the Earth is equal to the distance from the center of the Earth to the hole\ninitial_distance = distance\n\n# The object will fall towards the center of the Earth until it reaches the center of the hole\n# At this point, the distance from the center of the Earth to the hole will be equal to the radius of the hole\n# The object will then oscillate back and forth from the center of the hole to the other side of the Earth\n# The distance from the center of the Earth to the hole will increase by 2*radius_hole each oscillation\n\n# Calculate the total distance the object will travel\ntotal_distance = initial_distance + 2*radius_hole*(2*math.pi/math.sqrt(9.81))  # in km\n\n# Calculate the number of oscillations\nnum_oscillations = total_distance // (2*radius_hole)\n\n# If the total distance is not a multiple of 2*radius_hole, the object will make one more oscillation\nif total_distance % (2*radius_hole) != 0:\n    num_oscillations += 1\n\nprint(num_oscillations)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "D",
    "err": false,
    "question": "A horizontal spring-block oscillator is in motion when a second block of equal mass falls on top of the oscillating block. If the two blocks stick together, what effect will this have on the amplitude of the oscillations?\nAnswer Choices: (A) It will increase the amplitude. (B) It will decrease the amplitude. (C) It will have no effect. (D) It would depend on where the original block was in its cycle when the second block fell. Let's write a program.",
    "output": "import math\n\n# Define the initial amplitude\ninitial_amplitude = 1\n\n# Define the mass of the blocks\nmass = 1\n\n# Define the spring constant\nspring_constant = 1\n\n# Calculate the frequency of the oscillations\nfrequency = math.sqrt(spring_constant / mass)\n\n# The amplitude of the oscillations after the second block fell will be the initial amplitude times the factor 2\namplitude_after = initial_amplitude * 2\n\n# Calculate the difference in amplitude\ndifference = amplitude_after - initial_amplitude\n\n# If the difference is positive, the amplitude increased\nif difference > 0:\n    print('A')\n# If the difference is negative, the amplitude decreased\nelif difference < 0:\n    print('B')\n# If the difference is zero, the amplitude stayed the same\nelse:\n    print('C')",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "True\nFalse\nEq(zoo*source_speed, 1)\nEq((-detector_speed + source_speed)/(detector_speed + source_speed), 1)",
    "question": "In which of the following situations involving a source of sound and a detector of the sound is it possible that there is NO perceived Doppler shift?\nAnswer Choices: (A) The source travels toward the stationary detector. (B) The detector travels toward the stationary source. (C) Both the source and detector travel in the same direction. (D) Both the source and detector travel in opposite directions, with the source and detector moving away from each other. Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nsource_speed = sp.symbols('source_speed')\ndetector_speed = sp.symbols('detector_speed')\n\n# formula for Doppler shift\ndoppler_shift = (source_speed + detector_speed) / (source_speed - detector_speed)\n\n# situations involving a source of sound and a detector of the sound is it possible that there is NO perceived Doppler shift?\n# The source travels toward the stationary detector. (source_speed > 0, detector_speed = 0)\nsituation1 = sp.Eq(doppler_shift.subs({source_speed: source_speed, detector_speed: 0}), 1)\n\n# The detector travels toward the stationary source. (source_speed = 0, detector_speed > 0)\nsituation2 = sp.Eq(doppler_shift.subs({source_speed: 0, detector_speed: detector_speed}), 1)\n\n# Both the source and detector travel in the same direction. (source_speed > 0, detector_speed > 0)\nsituation3 = sp.Eq(doppler_shift.subs({source_speed: source_speed, detector_speed: source_speed}), 1)\n\n# Both the source and detector travel in opposite directions, with the source and detector moving away from each other. (source_speed > 0, detector_speed < 0)\nsituation4 = sp.Eq(doppler_shift.subs({source_speed: source_speed, detector_speed: -detector_speed}), 1)\n\n# print the situations where there is no Doppler shift\nprint(situation1)\nprint(situation2)\nprint(situation3)\nprint(situation4)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "B",
    "raw_ans": "0.08333333333333333",
    "question": "A solid plastic cube with uniform density (side length = 0.5 m) of mass 100 kg is placed in a vat of fluid whose density is 1200 kg/m^3. What fraction of the cube's volume floats above the surface of the fluid?\nAnswer Choices: (A) 1.0/9 (B) 1.0/3 (C) 2.0/3 (D) 4.0/5 Let's write a program.",
    "output": "import math\n\n# define the side length of the cube\nside_length = 0.5\n\n# calculate the volume of the cube\nvolume_cube = side_length ** 3\n\n# define the density of the cube\ndensity_cube = 100\n\n# calculate the weight of the cube\nweight_cube = volume_cube * density_cube\n\n# define the density of the fluid\ndensity_fluid = 1200\n\n# calculate the volume of the fluid that the cube floats on\nvolume_fluid = weight_cube / density_fluid\n\n# calculate the fraction of the cube's volume that floats above the surface of the fluid\nfraction_floats = volume_fluid / volume_cube\n\nprint(fraction_floats)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "B",
    "err": false,
    "question": "A person standing on a horizontal floor is acted upon by two forces: the downward pull of gravity and the upward normal force of the floor. These two forces\nAnswer Choices: (A) have equal magnitudes and form an action-reaction pair (B) have equal magnitudes and do not form an action-reaction pair (C) have unequal magnitudes and form an action-reaction pair (D) have unequal magnitudes and do not form an action-reaction pair Let's write a program.",
    "output": "Gravity = Downward force\nNormal Force = Upward force\nAction = Gravity\nReaction = Normal Force\nAnswer = A",
    "correct": false
  },
  {
    "ans": "E",
    "gt": "B",
    "err": false,
    "question": "A particle of mass m and charge Q and velocity V is directed toward a uniform electric field of strength E and travels a distance d. How far does the particle travel if the original velocity is doubled and the mass is cut in half?\nAnswer Choices: (A) 4d (B) 2d (C) d (D) 1/2d Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nm, Q, V, E, d = sp.symbols('m Q V E d')\n\n# define the original distance travelled by the particle\noriginal_distance = (2*m*V*d)/(2*Q*E)\n\n# if the original velocity is doubled and the mass is cut in half, the new distance travelled is\nnew_distance = (m/2*2*V*d)/(2*Q*E)\n\n# simplify the new distance travelled\nnew_distance = sp.simplify(new_distance)\n\n# print the result\nprint(new_distance)",
    "correct": false
  },
  {
    "ans": "A",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 23, in run_it\nTypeError: list indices must be integers or slices, not tuple\n",
    "question": "An object of mass m1 experiences a linear, elastic collision with a stationary object of unknown mass. In addition to m1, what is the minimum necessary information that would allow you to determine the mass of the second object?\nAnswer Choices: (A) The final speed of object 1 (B) The initial speed of object 1 (C) The final speed of object 2 (D) Any 2 of the above values Let's write a program.",
    "output": "from sympy import symbols, Eq, solve\n\n# define the symbols\nm1, v1i, v1f = symbols('m1 v1i v1f')\n\n# equation 1: conservation of momentum\neq1 = Eq(m1*v1i, m1*v1f)\n\n# equation 2: conservation of energy\neq2 = Eq((m1*v1i**2)/2, (m1*v1f**2)/2)\n\n# solve the system of equations\nsolution = solve((eq1,eq2), (v1f, m1))\n\n# The minimum necessary information that would allow you to determine the mass of the second object\n# is the initial speed of object 1 and the final speed of object 1.\n# So, we need to find the solution for v1f and m1.\n\nfor i in solution:\n    if i[0].is_Symbol and i[1] is not None:\n        v1f_sol = i[1]\n        m1_sol = solution[(v1f_sol, m1)]\n        print(m1_sol)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "gt": "D",
    "err": false,
    "question": "In an experiment designed to study the photoelectric effect, it is observed that low-intensity visible light of wavelength 550 nm produced no photoelectrons. Which of the following best describes what would occur if the intensity of this light were increased dramatically?\nAnswer Choices: (A) Almost immediately, photoelectrons would be produced with a kinetic energy equal to the energy of the incident photons. (B) Almost immediately, photoelectrons would be produced with a kinetic energy equal to the energy of the incident photons minus the work function of the metal. (C) After several seconds, necessary for the electrons to absorb sufficient energy from the incident light, photoelectrons would be produced with a kinetic energy equal to the energy of the incident photons minus the work function of the metal. (D) Nothing would happen. Let's write a program.",
    "output": "import constants as c\n\n# Define the wavelength of the light\nwavelength = 550 * c.NANO_TO_METER\n\n# Calculate the energy of the light\nlight_energy = c.PLANCK_CONSTANT * c.SPEED_OF_LIGHT / wavelength\n\n# The work function of the metal is the minimum energy required to remove a photoelectron\nwork_function = 0\n\n# The energy of the photoelectron is the difference between the energy of the incident light and the work function\nphotoelectron_energy = light_energy - work_function\n\n# The answer is B.",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "7.211102550927978",
    "question": "Two traveling waves of equal frequency, one of amplitude 4 cm and the other of amplitude 6 cm, superimpose in a single medium. Which of the following best describes the displacement, D, of the resultant wave?\nAnswer Choices: (A) 2 cm \u2264 D \u2264 10 cm (B) D = 5 cm (C) D = 10 cm (D) 10 cm \u2264 D \u2264 12 cm Let's write a program.",
    "output": "import math\n\n# define the amplitudes of the two waves\na1 = 4\na2 = 6\n\n# the amplitude of the resultant wave is the square root of the sum of the squares of the amplitudes of the two waves\nD = math.sqrt(a1**2 + a2**2)\n\n# print the result\nprint(D)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "gt": "B",
    "err": false,
    "question": "In Collision A, two carts collide and bounce off each other. In Collision B, a ball sticks to a rigid rod, which begins to rotate about the combined center of mass. Which of the following statements about quantities in each collision is correct?\nAnswer Choices: (A) Collision A: each cart experiences the same force, time of collision, and change in kinetic energy. Collision B: the ball and the rod each experience the same torque, time of collision, and change in rotational kinetic energy. (B) Collision A: each cart experiences the same force, time of collision, and change in linear momentum. Collision B: the ball and the rod each experience the same torque, time of collision, and change in angular momentum. (C) Collision A: each cart experiences the same force, time of collision, and change in kinetic energy. Collision B: the ball and the rod each experience the same torque, time of collision, and change in angular momentum. (D) Collision A: each cart experiences the same force, time of collision, and change in velocity. Collision B: the ball and the rod each experience the same torque, time of collision, and change in angular velocity Let's write a program.",
    "output": "cart_experiences_same=False\r\nball_rod_experience_same=True\r\nif cart_experiences_same==False and ball_rod_experience_same==True:\r\n  print(\"A\")\r\nelif cart_experiences_same==True and ball_rod_experience_same==False:\r\n  print(\"B\")\r\nelif cart_experiences_same==True and ball_rod_experience_same==True:\r\n  print(\"C\")\r\nelif cart_experiences_same==False and ball_rod_experience_same==False:\r\n  print(\"D\")\r",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "0",
    "question": "An object of mass 2 kg is acted upon by three external forces, each of magnitude 4 N. Which of the following could NOT be the resulting acceleration of the object?\nAnswer Choices: (A) 0 m/s^2 (B) 2 m/s^2 (C) 4 m/s^2 (D) 8 m/s^2 Let's write a program.",
    "output": "total_mass = 2\nforce = 4\nno_of_forces = 3\n\n# calculate the resulting acceleration\nresulting_acceleration = total_mass * force / no_of_forces\n\n# check which of the given options is not the resulting acceleration\nfor option in [0, 2, 4, 8]:\n    if option != resulting_acceleration:\n        print(option)\n        break",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "1.0",
    "question": "Spring scales are used to measure the net force applied to an object; a sonic motion detector is used to measure the object\u2019s resulting acceleration. A graph is constructed with the net force on the vertical axis and the acceleration on the horizontal axis. Which of the following quantities is directly measured using the slope of this graph?\nAnswer Choices: (A) Gravitational mass (B) Weight (C) Velocity (D) Inertial mass Let's write a program.",
    "output": "def spring_scale():\n    net_force = 1\n    acceleration = 1\n    slope = net_force/acceleration\n    return slope\n\nprint(spring_scale())",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "1.0",
    "question": "A wooden block experiences a frictional force, f, as it slides across a table. If a block of the same material with half the height and twice the length were to slide across the table, what would be the frictional force it experienced?\nAnswer Choices: (A) (1/2)f (B) f (C) 2f (D) 4f Let's write a program.",
    "output": "table_height = 1 # assuming the height of the table is 1 meter\nblock_height = 1/2 # the height of the block is 1/2 meter\nblock_length = 2 # the length of the block is 2 meters\nblock_mass = 1 # the mass of the block is 1 kg\n\n# calculate the weight of the block\nblock_weight = 9.8 * block_mass\n\n# calculate the normal force of the block\nnormal_force = table_height * block_weight\n\n# calculate the frictional force\nfrictional_force = 0.3 * normal_force\n\n# calculate the frictional force for the block with half the height and twice the length\nnew_block_height = 1/2\nnew_block_length = 2\nnew_block_weight = new_block_height * block_length * block_weight\nnew_normal_force = table_height * new_block_weight\nnew_frictional_force = 0.3 * new_normal_force\n\n# calculate the ratio of the frictional forces\nratio = new_frictional_force / frictional_force\n\nprint(ratio)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "-9.797958971132712",
    "question": "An object is placed 10 cm in front of a diverging mirror. What is the focal length of the mirror if the image appears 2 cm behind the mirror?\nAnswer Choices: (A) -3/5 cm (B) -5/3 cm (C) -2/5 cm (D) -5/2 cm Let's write a program.",
    "output": "import math\n\n# define the distance of the object from the mirror\nobject_distance = 10\n\n# define the distance of the image from the mirror\nimage_distance = 2\n\n# calculate the focal length of the mirror\nfocal_length = math.sqrt(object_distance**2 - image_distance**2)\n\n# print the result\nprint(-focal_length)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "C",
    "raw_ans": "627.0",
    "question": "A body moving in the positive x direction passes the origin at time t = 0. Between t = 0 and t = 1 second, the body has a constant speed of 24 meters per second. At t = 1 second, the body is given a constant acceleration of 6 meters per second squared in the negative x direction. The position x of the body at t = 11 seconds is\nAnswer Choices: (A) 99m (B) 36m (C) -36m (D) -99m Let's write a program.",
    "output": "import math\n\n# define the initial position and speed\nx0 = 0\nv0 = 24\n\n# define the acceleration and time\na = -6\nt = 11\n\n# calculate the position using the equation x = x0 + v0*t - 0.5*a*t^2\nx = x0 + v0*t - 0.5*a*t**2\n\nprint(x)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": true,
    "gt": "B",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 13, in run_it\nAttributeError: module 'math' has no attribute 'rho'\n",
    "question": "A fluid of density \u03c1 flows through a horizontal pipe with negligible viscosity. The flow is streamlined with constant flow rate. The diameter of the pipe at Point 1 is d and the flow speed is V. If the diameter of the pipe at Point 2 is d/3, then the pressure at Point 2 is\nAnswer Choices: (A) less than the pressure at Point 1 by 4 \u03c1v^2 (B) less than the pressure at Point 1 by 40 \u03c1v^2 (C) more than the pressure at Point 1 by 4 \u03c1v^2 (D) more than the pressure at Point 1 by 40 \u03c1v^2 Let's write a program.",
    "output": "import math\n\n# define the variables\nd1 = 1 # diameter at point 1 in meters\nv1 = 1 # velocity at point 1 in meters/second\nd2 = d1/3 # diameter at point 2 in meters\n\n# calculate the flow rate\nq = v1 * math.pi * (d1/2)**2 # flow rate in m^3/second\n\n# calculate the pressure difference\ndelta_p = 4*q*math.rho*v1**2 # pressure difference in Pascals\n\n# print the result\nprint(delta_p)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "A",
    "raw_ans": "1",
    "question": "In a spring-block oscillator, the maximum speed of the block is\nAnswer Choices: (A) proportional to amplitude (B) proportional to the square of amplitude (C) proportional to the square root of amplitude (D) inversely proportional to the square root of amplitude Let's write a program.",
    "output": "import math\n\n# define the amplitude\namplitude = 1\n\n# calculate the maximum speed using the formula\nmax_speed = amplitude**2\n\n# print the result\nprint(max_speed)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "16.0",
    "question": "The weight of a box on the Earth is 80 N. What is the weight of the box on the moon if the moon has 1/80th the mass and 1/4th the radius of the Earth?\nAnswer Choices: (A) 1 N (B) 10 N (C) 16 N (D) 20 N Let's write a program.",
    "output": "weight_on_earth = 80\nmass_of_moon = 1/80\nradius_of_moon = 1/4\n\n# The weight of a body on the moon is proportional to the mass of the moon and inversely proportional to the square of the radius of the moon.\n# weight_on_moon = mass_of_moon * weight_on_earth / (radius_of_moon * radius_of_moon)\n\nweight_on_moon = weight_on_earth * mass_of_moon / (radius_of_moon * radius_of_moon)\n\nprint(weight_on_moon)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "29.943829002801287",
    "question": "A textbook weighs 30 N at sea level. Earth\u2019s radius is 6,400 km. Which of the following is the best estimate of the textbook\u2019s weight on a mountain peak located 6,000 m above sea level?\nAnswer Choices: (A) 60 N (B) 15 N (C) 30 N (D) 7.5 N Let's write a program.",
    "output": "import math\n\n# define the weight of the textbook at sea level\nweight_sea_level = 30\n\n# define the radius of the earth in meters\nradius_earth = 6400000\n\n# define the height of the mountain peak above sea level\nheight_mountain = 6000\n\n# calculate the weight of the textbook on the mountain peak\n# The weight is inversely proportional to the square of the distance from the center of the earth\nweight_mountain = weight_sea_level * (radius_earth / (radius_earth + height_mountain))**2\n\n# print the result\nprint(weight_mountain)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "B",
    "raw_ans": "It will fall with increasing speed and increasing acceleration",
    "question": "Which of the following correctly describes the motion of a real object in free fall? Assume that the object experiences drag force proportional to speed and that it strikes the ground before reaching terminal sped.\nAnswer Choices: (A) It will fall with increasing speed and increasing acceleration. (B) It will fall with increasing speed and decreasing acceleration. (C) It will fall with decreasing speed and increasing acceleration. (D) It will fall with decreasing speed and decreasing acceleration. Let's write a program.",
    "output": "import sympy as sp\n\n# define the symbols\nt, v, a = sp.symbols('t v a')\n\n# equation for velocity in free fall\nv = a*t\n\n# equation for acceleration in free fall\na = sp.diff(v, t)\n\n# it will fall with increasing speed and increasing acceleration\ncorrect_answer = 'It will fall with increasing speed and increasing acceleration.'\n\nprint(correct_answer)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "A",
    "raw_ans": "3.00 cm",
    "question": "A bi-convex lens has a radius of curvature of magnitude 20 cm. Which of the following best describes the image formed of an object of height 2 cm placed 30 cm from the lens?\nAnswer Choices: (A) Real, inverted, height = 1 cm (B) Virtual, upright, height = 0.25 cm (C) Real, upright, height = 1 cm (D) Virtual, inverted, height = 0.25 cm Let's write a program.",
    "output": "import math\n\n# define the radius of curvature and the height of the object\nradius_of_curvature = 20  # in cm\nheight_of_object = 2  # in cm\n\n# calculate the focal length of the lens using the formula for a bi-convex lens\nfocal_length = radius_of_curvature / 2\n\n# calculate the distance of the object from the lens\ndistance_of_object = 30  # in cm\n\n# calculate the image distance using the formula for a thin lens\nimage_distance = (focal_length * distance_of_object) / (distance_of_object - focal_length)\n\n# calculate the height of the image using the formula for a thin lens\nheight_of_image = (height_of_object * image_distance) / focal_length\n\n# determine whether the image is real or virtual, and if it's upright or inverted\nif image_distance > 0:\n    print('Real, upright, height = %.2f cm' % height_of_image)\nelse:\n    print('Virtual, inverted, height = %.2f cm' % (-height_of_image))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "[]",
    "question": "Two spheres of net charge +5e and -6e briefly come into contact. Afterward, which of the following is a possible combination of net charges for the two spheres?\nAnswer Choices: (A) +3e and -4e (B) +1.5e and -2.5e (C) Both of the above (D) None of the above Let's write a program.",
    "output": "import math\n\n# Define the charges\nq1 = 5\nq2 = -6\n\n# Calculate the net charge after the spheres come into contact\nq_net = q1 + q2\n\n# The net charge can be split into two parts: one part for each sphere\n# The two parts must add up to the net charge\n# Therefore, we can find the possible charges by checking all combinations of charges that add up to the net charge\n\n# Initialize the possible charges\npossible_charges = []\n\n# Check all combinations of charges that add up to the net charge\nfor i in range(1, q_net + 1):\n    for j in range(i, q_net + 1):\n        if i + j == q_net:\n            possible_charges.append((i, j))\n\n# Print the possible charges\nprint(possible_charges)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "gt": "C",
    "err": false,
    "question": "The circumference of a helium-filled balloon is measured for three different conditions: at room temperature, after being in a warm oven for 30 minutes, and after being in a freezer for 30 minutes. A student plotting the circumference cubed C^3 as a function of temperature T, should expect to find which of the following?\nAnswer Choices: (A) a cubic relationship between C^3 and T (B) an indirect relationship between C^3 and T (C) an extrapolated temperature T where C^3 reaches zero (D) a maximum C^3 as the temperature T increases Let's write a program.",
    "output": "import numpy as np\n\n# define the temperature range\nT = np.linspace(-100, 100)\n\n# define the circumference for each temperature\nC = 100 * np.exp(-T**2 / 100)\n\n# calculate the circumference cubed\nC_cubed = C**3\n\n# plot the result\nimport matplotlib.pyplot as plt\nplt.plot(T, C_cubed)\nplt.xlabel('Temperature T')\nplt.ylabel('Circumference cubed C^3')\nplt.show()\n\nThe answer is A.",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "2.3999999999999997e-19",
    "question": "The charge on an oil drop is measured in the laboratory. Which of the following measurements should be rejected as highly unlikely to be correct?\nAnswer Choices: (A) 6.4 \u00d7 10^-19 C (B) 8.0 \u00d7 10^-19 C (C) 4.8 \u00d7 10^-19 C (D) 2.4 \u00d7 10^-19 C Let's write a program.",
    "output": "import math\n\n# Define the measurements\nmeasurement1 = 6.4 * (10 ** -19)\nmeasurement2 = 8.0 * (10 ** -19)\nmeasurement3 = 4.8 * (10 ** -19)\nmeasurement4 = 2.4 * (10 ** -19)\n\n# Calculate the probability of each measurement\nprobability1 = math.exp(-math.fabs(math.log(measurement1)))\nprobability2 = math.exp(-math.fabs(math.log(measurement2)))\nprobability3 = math.exp(-math.fabs(math.log(measurement3)))\nprobability4 = math.exp(-math.fabs(math.log(measurement4)))\n\n# The measurement with the lowest probability should be rejected\nrejected_measurement = min(measurement1, measurement2, measurement3, measurement4)\n\nprint(rejected_measurement)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "C",
    "raw_ans": "1499991.0",
    "question": "Traveling at an initial speed of 1.5 \u00d7 10^6 m/s, a proton enters a region of constant magnetic field, B, of magnitude 1.0 T. If the proton's initial velocity vector makes an angle of 30\u00b0 with the direction of B, compute the proton's speed 4 s after entering the magnetic field.\nAnswer Choices: (A) 5.0 \u00d7 10^5 m/s (B) 7.5 \u00d7 10^5 m/s (C) 1.5 \u00d7 10^6 m/s (D) 3.0 \u00d7 10^6 m/s Let's write a program.",
    "output": "B = 1 # Tesla\nv = 1.5 * 10**6 # m/s\ntheta = 30 # degree\n\n# after 4 seconds\nv_final = v * (1 - 4 * (B * theta) / (2 * 10**7))\n\nprint(v_final)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": true,
    "gt": "A",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 15, in run_it\nNameError: name 'A' is not defined\n",
    "question": "Which of the following changes to a circuit will always bring about an increase in the current?\nAnswer Choices: (A) Increased voltage and increased resistance (B) Decreased voltage and decreased resistance (C) Increased voltage and decreased resistance (D) Decreased voltage and increased resistance Let's write a program.",
    "output": "def find_current(voltage, resistance):\n    # Ohm's Law\n    current = voltage / resistance\n    return current\n\n# Increase in current due to increase in voltage or decrease in resistance\nincrease_current = find_current(10, 1) - find_current(10, 2)\n\n# Increase in current due to decrease in voltage or increase in resistance\ndecrease_current = find_current(1, 1) - find_current(1, 2)\n\n# If the current increases due to an increase in the voltage or a decrease in the resistance\nif increase_current > decrease_current:\n    print(A)\nelse:\n    print(C)",
    "matching_err": true,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "True",
    "question": "Which of the following concerning uniform circular motion is true?\nAnswer Choices: (A) The centrifugal force is the action-reaction pair of the centripetal force. (B) The centripetal acceleration and velocity point in the same direction. (C) The velocity of the object in motion changes whereas the acceleration of the object is constant. (D) A satellite undergoing uniform circular motion is falling toward the center in a circular path. Let's write a program.",
    "output": "acceleration = 'centripetal'\r\nvelocity = 'radial'\r\nif acceleration == 'centripetal' and velocity == 'radial':\r\n    print(True)\r\nelse:\r\n    print(False)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": true,
    "gt": "A",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in run_it\nTypeError: list indices must be integers or slices, not Symbol\n",
    "question": "It is known that a lab cart is moving east at 25 cm/s at time t1 = 0.10 s, and then moving east at 15 cm/s at t2 = 0.20 s. Is this enough information to determine the direction of the net force acting on the cart between t1 and t2?\nAnswer Choices: (A) Yes, since we know the cart is slowing down, its momentum change is opposite the direction of movement, and the net force is in the direction of momentum change. (B) No, because we don\u2019t know whether forces such as friction or air resistance might be acting on the cart. (C) No, because we don\u2019t know the mass of the cart. (D) Yes, since we know the cart keeps moving to the east, the net force must be in the direction of motion. Let's write a program.",
    "output": "from sympy import symbols, Eq, solve\r\n\r\n# cart_mass = mass of the lab cart\r\ncm = symbols('cart_mass')\r\n\r\neq1 = Eq(cm, 25)\r\neq2 = Eq(cm, 15)\r\n\r\nanswer = solve((eq1, eq2), (cm))\r\n\r\nif answer[cm] == 25:\r\n    print('Yes, since we know the cart keeps moving to the east, the net force must be in the direction of motion.')\r\nelse:\r\n    print('No, because we don\u2019t know the mass of the cart.')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "gt": "D",
    "err": false,
    "question": "An elevator is rising. In order to determine the tension in the cables pulling it, which values (for the elevator) would you need to know?\nAnswer Choices: (A) Mass, velocity, height, and acceleration (B) Mass, velocity, and acceleration (C) Mass and velocity (D) Mass and acceleration Let's write a program.",
    "output": "from sympy import symbols, Eq, solve\r\n\r\nm, v, a = symbols('m v a')  \r\n\r\neq1 = Eq(m, 10)\r\neq2 = Eq(v, 30)\r\neq3 = Eq(a, 5)\r\n\r\nanswer_dict = {'m': eq1, 'v': eq2, 'a': eq3}\r\n\r\nfor key in answer_dict:\r\n    print(key)\r\n",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "(-v2, v2)",
    "question": "If two non-zero vectors are added together, and the resultant vector is zero, what must be true of the two vectors?\nAnswer Choices: (A) They have equal magnitude and are pointed in the same direction. (B) They have equal magnitude and are pointed in opposite directions. (C) They have different magnitudes and are pointed in opposite directions. (D) It is not possible for the sum of two non-zero vectors to be zero. Let's write a program.",
    "output": "import sympy as sp\n\n# define the vectors\nv1 = sp.symbols('v1')\nv2 = sp.symbols('v2')\n\n# equation for the sum of the vectors\neq = sp.Eq(v1 + v2, 0)\n\n# solve the equation\nsolution = sp.solve(eq, (v1, v2))\n\n# check if the vectors are non-zero\nfor sol in solution:\n    if sol[0] != 0 and sol[1] != 0:\n        print(sol)\n        break",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "D",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 26, in <module>\n  File \"<string>\", line 15, in run_it\nNameError: name 'm' is not defined\n",
    "question": "A proton enters a solenoid. Upon entry, the proton is moving in a straight line along the axis of the solenoid. Which of the following is a correct description of the proton\u2019s motion within the solenoid?\nAnswer Choices: (A) The proton will be bent in a parabolic path. (B) The proton will be bent in a circular path. (C) The proton will continue in its straight path at constant velocity. (D) The proton will continue in its straight path and slow down. Let's write a program.",
    "output": "import numpy as np\n\n# Define the initial conditions\nv0 = 1  # initial speed\nr0 = 1  # initial radius\n\n# Define the parameters\nB0 = 1  # magnetic field\n\n# Calculate the centripetal force\nF = B0**2 * r0**2 / v0  # centripetal force\n\n# Calculate the acceleration\na = F / m  # m is the mass of the proton\n\n# Calculate the time it takes to complete one revolution\nT = 2 * np.pi * r0 / v0  # T is the period\n\n# Calculate the new speed and radius after one revolution\nv1 = v0 + a * T\nr1 = r0 + v0 * T\n\n# Print the new radius\nprint(r1)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": true,
    "gt": "B",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 295, in execute_code\n    code = black.format_str(code_str, mode=black.FileMode())\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1079, in format_str\n    dst_contents = _format_str_once(src_contents, mode=mode)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1089, in _format_str_once\n    src_node = lib2to3_parse(src_contents.lstrip(), mode.target_versions)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/parsing.py\", line 127, in lib2to3_parse\n    raise exc from None\nblack.parsing.InvalidInput: Cannot parse: 10:43: speed_second_sound = speed_first_sound * (4f/f)\n",
    "question": "A sound wave with frequency f travels through air at speed v. With what speed will a sound wave with frequency 4f travel through the air?\nAnswer Choices: (A) v/4 (B) v (C) 2v (D) 4v Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nf, v = sp.symbols('f v')\n\n# define the speed of the first sound wave\nspeed_first_sound = v\n\n# the speed of the second sound wave is\nspeed_second_sound = speed_first_sound * (4f/f)\n\nprint(speed_second_sound)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "A",
    "raw_ans": "Piecewise((Eq(net_electric_flux, charge), Eq(charge, 0)), (Eq(net_electric_flux, 0), Eq(charge, 1)))",
    "question": "Under what conditions is the net electric flux through a closed surface proportional to the enclosed charge?\nAnswer Choices: (A) under any conditions (B) only when the enclosed charge is symmetrically distributed (C) only when all nearby charges are symmetrically distributed (D) only when there are no charges outside the surface Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\ncharge = sp.symbols('charge')\n\n# define the conditions\ncondition1 = sp.Eq(charge, 0)\ncondition2 = sp.Eq(charge, 1)\n\n# calculate the net electric flux\nnet_electric_flux = sp.symbols('net_electric_flux')\n\n# if the enclosed charge is symmetrically distributed, then the net electric flux is proportional to the enclosed charge\nproportional_condition = sp.Eq(net_electric_flux, charge)\n\n# if there are no charges outside the surface, then the net electric flux is proportional to the enclosed charge\nnon_proportional_condition = sp.Eq(net_electric_flux, 0)\n\n# combine the conditions\nfinal_condition = sp.Piecewise((proportional_condition, condition1), (non_proportional_condition, condition2))\n\nprint(final_condition)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "B",
    "raw_ans": "wavelength only",
    "question": "A beam of monochromatic light entering a glass window pane from the air will experience a change in\nAnswer Choices: (A) frequency and wavelength (B) speed and wavelength (C) speed only (D) wavelength only Let's write a program.",
    "output": "light = 1\r\nair = 2\r\nglass = 3\r\nif light<air and light>glass:\r\n    print(\"frequency and wavelength\")\r\nelif light>air and light<glass:\r\n    print(\"speed and wavelength\")\r\nelse:\r\n    print(\"wavelength only\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "B",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 12, in run_it\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/sympy/plotting/plot.py\", line 1869, in plot\n    series = [LineOver1DRangeSeries(*arg, **kwargs) for arg in plot_expr]\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: 'NoneType' object is not iterable\n",
    "question": "Data is collected in an experiment preformed on an ideal gas. In the experiment, temperature (in K) is the independent variable and volume (in m^3) is the dependent variable. If a plot is produced where the dependent variable is on the vertical axis, which of the following is true about the slope and y-intercept of the graph?\nAnswer Choices: (A) The slope will be linearly proportional to the pressure of the gas and the intercept will be 0 m^3. (B) The slope will be inversely proportional to the pressure of the gas and the intercept will be 0 m^3. (C) The slope will be linearly proportional to the pressure of the gas and the intercept will not be 0 m^3. (D) The slope will be inversely proportional to the pressure of the gas and the intercept will not be 0 m^3. Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nT = sp.symbols('T')\nV = sp.symbols('V')\n\n# define the ideal gas law\nideal_gas_law = sp.Eq(V, T**3)\n\n# plot the ideal gas law\nplot = sp.plot(ideal_gas_law, (T, 0, 10), (V, 0, 1000), adaptive=False)\n\n# get the slope and y-intercept of the graph\nslope = plot.tricontourf[0][1][0][1]\ny_intercept = plot.tricontourf[0][1][0][2]\n\n# The slope of the graph is inversely proportional to the pressure of the gas\n# The y-intercept of the graph is 0 m^3\nanswer = 'The slope will be inversely proportional to the pressure of the gas and the intercept will be 0 m^3.'\n\nprint(answer)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "B",
    "raw_ans": "double the magnitude and in the same direction",
    "question": "A toy car and a toy truck collide. If the toy truck\u2019s mass is double the toy car\u2019s mass, then, compared to the acceleration of the truck, the acceleration of the car during the collision will be\nAnswer Choices: (A) double the magnitude and in the same direction (B) double the magnitude and in the opposite direction (C) half the magnitude and in the same direction (D) half the magnitude and in the opposite direction Let's write a program.",
    "output": "toy_truck_mass = 2\r\ntoy_car_mass = 1\r\n\r\n# Acceleration of truck\r\nacceleration_truck = toy_truck_mass\r\n\r\n# Acceleration of car\r\nacceleration_car = toy_car_mass\r\n\r\n# Compared to acceleration of truck, acceleration of car will be double the magnitude and in the same direction\r\nprint(\"double the magnitude and in the same direction\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "gt": "D",
    "err": false,
    "question": "A sphere, a cube, and a cylinder, all of equal mass, are released from rest from the top of a short incline. The surface of the incline is extremely slick, so much so that the objects do not rotate when released, but rather slide with negligible friction. Which reaches the base of the incline first?\nAnswer Choices: (A) the sphere (B) the cube (C) the cylinder (D) All reach the base at the same time. Let's write a program.",
    "output": "Let's find the time each object takes to reach the base of the incline.\nWe know that the objects do not rotate, so they all cover the same distance.\nThe distance covered by the sphere is the circumference of the circle it rolls on, which is 2*pi*r.\nThe distance covered by the cube is the perimeter of the square it rolls on, which is 4*side.\nThe distance covered by the cylinder is the circumference of the circle it rolls on, which is 2*pi*r.\nSince all objects are released from rest, they will cover the same distance in the same time.\nThe time taken by each object to cover the distance is the distance divided by the speed of each object.\nThe speed of the sphere is the circumference divided by the time taken, which is 2*pi*r / time_taken.\nThe speed of the cube is the perimeter divided by the time taken, which is 4*side / time_taken.\nThe speed of the cylinder is the circumference divided by the time taken, which is 2*pi*r / time_taken.\nSince all objects cover the same distance in the same time, their speeds are equal.\nTherefore, the time taken by each object to reach the base is the same.\nThe answer is D.",
    "correct": true
  },
  {
    "ans": "D",
    "err": false,
    "gt": "A",
    "raw_ans": "13.333333333333334",
    "question": "A car starts from rest and uniformly accelerates to a final speed of 20.0 m/s in a time of 15.0 s. How far does the car travel during this time?\nAnswer Choices: (A) 150 m  (B) 300 m (C) 450 m (D) 600 m Let's write a program.",
    "output": "\n# define the variables\ninitial_speed = 0 # because the car starts from rest\nfinal_speed = 20.0 # given\ntime = 15.0 # given\n\n# calculate the distance\ndistance = (final_speed**2 - initial_speed**2) / (2 * time)\n\n# print the result\nprint(distance)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 5, in run_it\nNameError: name 'initial_velocity' is not defined\n",
    "question": "At what angle to the horizontal should an ideal projectile be launched so that its horizontal displacement (the range) is equal to its maximum vertical displacement?\nAnswer Choices: (A) sin\u20131 (1/g) (B) cos\u20131 (1/g) (C) 45\u00b0 (D) tan\u20131 4 Let's write a program.",
    "output": "import math\n\n# define the equation for the maximum height of a projectile\nmax_height = (initial_velocity**2 * sin(angle)**2) / (2 * g)\n\n# set the range equal to the maximum height\nrange = max_height\n\n# solve for the angle\nangle = math.asin(1/g)\n\n# print the result\nprint(angle)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "5.739170477266787",
    "question": "A cannon is mounted on a truck that moves forward at a speed of 5 m/s. The operator wants to launch a ball from a cannon so the ball goes as far as possible before hitting the level surface. The muzzle velocity of the cannon is 50 m/s. At what angle from the horizontal should the operator point the cannon?\nAnswer Choices: (A) 5\u00b0 (B) 41\u00b0 (C) 45\u00b0 (D) 49\u00b0 Let's write a program.",
    "output": "import math\n\n# define the variables\nmuzzle_velocity = 50  # m/s\ntruck_speed = 5  # m/s\n\n# calculate the maximum distance the ball can travel\n# in the direction of the cannon\nmax_distance = muzzle_velocity**2 / (2 * truck_speed)\n\n# calculate the angle in radians\nangle_rad = math.asin(truck_speed / muzzle_velocity)\n\n# convert the angle to degrees\nangle_deg = math.degrees(angle_rad)\n\n# print the result\nprint(angle_deg)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": true,
    "gt": "A",
    "raw_ans": "",
    "question": "Two charged, massive particles are isolated from all influence except those between the particles. They have charge and mass such that the net force between them is 0 N. Which of the following is NOT true?\nAnswer Choices: (A) The particles must have the same sign of charge. (B) If the distance between the particles changes, the force will no longer be 0 N. (C) The particles must have the same mass. (D) Such a situation is impossible as the net force between the two particles cannot be 0. Let's write a program.",
    "output": "import sympy as sp\n\n# Define the variables\nm1, m2, q1, q2 = sp.symbols('m1 m2 q1 q2')\n\n# Define the equation for the net force\nnet_force = (q1*q2/sp.sqrt((m1+m2)*(q1**2 + q2**2)))\n\n# If the net force is 0, the product of the charges and the sum of the masses must be 0\nzero_force_eq = sp.Eq(net_force, 0)\n\n# The particles must have the same sign of charge, so q1 and q2 cannot both be positive or both be negative\n# If the distance between the particles changes, the force will no longer be 0 N. \n# If the particles have the same mass, the net force will be 0 regardless of the distance\n# Such a situation is impossible as the net force between the two particles cannot be 0\n\n# For such a system to be possible, the product of the charges must be negative and the sum of the masses must be positive\n# This ensures that the net force is repulsive and is always 0 regardless of the distance\n\n# Check if the conditions are met\nfor i in range(100):\n    q1_val = sp.Rational(i, 10)\n    m1_val = sp.Rational(i, 10)\n    q2_val = -q1_val\n    m2_val = -m1_val\n    if zero_force_eq.subs({q1: q1_val, m1: m1_val, q2: q2_val, m2: m2_val}):\n        print(f'Impossible situation: q1 = {q1_val}, m1 = {m1_val}, q2 = {q2_val}, m2 = {m2_val}')\n        break",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "False\nFalse\nTrue\nTrue",
    "question": "Which one of the following statements is true concerning the motion of an ideal projectile launched at an angle of 45\u00b0 to the horizontal?\nAnswer Choices: (A) The acceleration vector points opposite to the velocity vector on the way up and in the same direction as the velocity vector on the way down. (B) The speed at the top of the trajectory is zero. (C) The object's total speed remains constant during the entire flight. (D) The vertical speed decreases on the way up and increases on the way down. Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nt = sp.symbols('t')\n\n# define the position and velocity vectors\nposition = sp.Matrix([sp.cos(t), sp.sin(t)])\nvelocity = sp.Matrix([-sp.sin(t), sp.cos(t)])\n\n# calculate the acceleration vector\nacceleration = velocity.diff(t)\n\n# on the way up, the acceleration vector points opposite to the velocity vector\n# and on the way down, it points in the same direction as the velocity vector\nprint(acceleration.dot(velocity) < 0)\n\n# The speed at the top of the trajectory is zero.\n# Since the horizontal component of the velocity vector remains constant,\n# the speed is the magnitude of the vertical component of the velocity vector.\n# On the way up, the vertical component of the velocity vector is negative,\n# and on the way down, it is positive. Hence, the speed is zero at the top of the trajectory.\nprint(velocity.dot(sp.Matrix([0, sp.sin(t)])) == 0)\n\n# The object's total speed remains constant during the entire flight.\n# The speed is the magnitude of the velocity vector, which is constant.\nprint(True)\n\n# The vertical speed decreases on the way up and increases on the way down.\n# The vertical component of the velocity vector is negative on the way up,\n# and positive on the way down. Hence, the vertical speed decreases on the way up.\nprint(True)",
    "matching_err": true,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "5.0",
    "question": "Two electrically charged balls are separated by a short distance, producing a force of 50 \u03bcN between them. Keeping the charge of each ball the same, the mass of one of the balls but not the other is doubled. What is the new electric force between the balls?\nAnswer Choices: (A) 50 \u03bcN (B) 100 \u03bcN (C) 200 \u03bcN (D) 400 \u03bcN Let's write a program.",
    "output": "let_each_ball_charge = 10\r\nlet_each_ball_mass = 10\r\nlet_new_ball_mass = 20\r\n\r\nelectric_force = let_each_ball_charge**2 / let_each_ball_mass\r\nnew_electric_force = let_each_ball_charge**2 / let_new_ball_mass\r\n\r\nprint(new_electric_force)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "D",
    "err": false,
    "gt": "A",
    "raw_ans": "0.3333333333333333",
    "question": "A moving 1.5-kg cart collides with and sticks to a 0.5-kg cart which was initially at rest. Immediately after the collision, the carts each have the same ______ as each other.\nAnswer Choices: (A) Velocity (B) Kinetic energy (C) Mass (D) Linear momentum Let's write a program.",
    "output": "InitialMass = 1.5\r\nFinalMass = 0.5\r\nprint(FinalMass/InitialMass)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "gt": "C",
    "err": false,
    "question": "A rock is dropped off a cliff and strikes the ground with an impact velocity of 30 m/s. How high was the cliff?\nAnswer Choices: (A) 20 m (B) 30 m (C) 45 m (D) 60 m Let's write a program.",
    "output": "from v = 30 to 0 m/s\nLet h be the height of the cliff\nusing the formula\nv^2 = 2gh\n30^2 = 2*g*h\nh = 30^2 / 2g\nh = 900 / 2*9.8\nh = 45 m\nThe answer is C",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "C",
    "raw_ans": "0; ay < g",
    "question": "A car moving with speed v reaches the foot of an incline of angle \u03b8. The car coasts up the incline without using the engine. Neglecting friction and air resistance, which of the following is correct about the magnitude of the car\u2019s horizontal acceleration ax and vertical acceleration ay?\nAnswer Choices: (A) ax = 0; ay < g (B) ax = 0; ay = g (C) ax < g; ay < g (D) ax < g; ay = g Let's write a program.",
    "output": "import math\n\n# define the variables\nv = 0\n# angle of the incline in radians\ntheta = math.radians(30)\ng = 9.81 # acceleration due to gravity\n\n# calculate the horizontal acceleration\nax = v*math.cos(theta)\n\n# calculate the vertical acceleration\nay = v*math.sin(theta) - g\n\n# check the correctness of the statement\nif ax == 0 and ay < g:\n    print('ax = 0; ay < g')\nelif ax == 0 and ay == g:\n    print('ax = 0; ay = g')\nelif ax < g and ay < g:\n    print('ax < g; ay < g')\nelif ax < g and ay == g:\n    print('ax < g; ay = g')\nelse:\n    print('The statement is incorrect.')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 2, in run_it\nNameError: name 'plate_area' is not defined\n",
    "question": "Which of the following would increase the capacitance of a parallel-plate capacitor?\nAnswer Choices: (A) Using smaller plates (B) Replacing the dielectric material between the plates with one that has a smaller dielectric constant (C) Decreasing the voltage between the plates (D) Moving the plates closer together Let's write a program.",
    "output": "capacitance = 1/(plate_area*dielectric_constant)\n\noption1 = \"Using smaller plates\"\noption2 = \"Replacing the dielectric material between the plates with one that has a smaller dielectric constant\"\noption3 = \"Decreasing the voltage between the plates\"\noption4 = \"Moving the plates closer together\"\n\nif option1 in capacitance:\n    print(option1)\nelif option2 in capacitance:\n    print(option2)\nelif option3 in capacitance:\n    print(option3)\nelse:\n    print(option4)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "A",
    "raw_ans": "0",
    "question": "A man stands with his hands to his sides on a frictionless platform that is rotating. Which of the following could change the angular momentum of the man-platform system?\nAnswer Choices: (A) The man catches a baseball thrown to him by a friend. (B) The man thrusts his arms out away from his body (C) The man thrusts his arms out away from his body, and then quickly brings his arms back to his side again. (D) The man jumps straight up in the air and lands back on the platform. Let's write a program.",
    "output": "import numpy as np\n\n# Define the initial angular momentum\ninitial_angular_momentum = 0\n\n# Consider each option\nfor option in range(1, 5):\n    # Man catches a baseball\n    if option == 1:\n        # Since the baseball is thrown from a fixed point on the platform,\n        # the change in angular momentum will be zero\n        continue\n    # Man thrusts his arms out\n    elif option == 2:\n        # Since the man's hands are still in contact with the platform,\n        # the change in angular momentum will be zero\n        continue\n    # Man thrusts his arms in and out\n    elif option == 3:\n        # Since the man's hands are still in contact with the platform,\n        # the change in angular momentum will be zero\n        continue\n    # Man jumps straight up in the air and lands back on the platform\n    elif option == 4:\n        # Since the man's hands are still in contact with the platform,\n        # the change in angular momentum will be zero\n        continue\n\n# Print the answer\nprint(initial_angular_momentum)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "400000.0",
    "question": "A cylinder with a movable piston contains a gas at pressure P = 1 \u00d7 10^5 Pa, volume V = 20 cm^3, and temperature T = 273 K. The piston is moved downward in a slow steady fashion allowing heat to escape the gas and the temperature to remain constant. If the final volume of the gas is 5 cm^3, what will be the resulting pressure?\nAnswer Choices: (A) 0.25 \u00d7 10^5 Pa (B) 2 \u00d7 10^5 Pa (C) 4 \u00d7 10^5 Pa (D) 8 \u00d7 10^5 Pa Let's write a program.",
    "output": "P = 1e5 # initial pressure\nV = 20 # initial volume\nT = 273 # temperature\n# final volume\nV_final = 5\n# using the equation PV = nRT\n# as final temperature is same as initial, the final pressure can be calculated as\nP_final = (P*V)/V_final\nprint(P_final)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "D",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 295, in execute_code\n    code = black.format_str(code_str, mode=black.FileMode())\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1079, in format_str\n    dst_contents = _format_str_once(src_contents, mode=mode)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1089, in _format_str_once\n    src_node = lib2to3_parse(src_contents.lstrip(), mode.target_versions)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/parsing.py\", line 127, in lib2to3_parse\n    raise exc from None\nblack.parsing.InvalidInput: Cannot parse: 10:33:             print(\"Orange light\")\n",
    "question": "Which of the following types of electromagnetic radiation has the longest wavelength?\nAnswer Choices: (A) Gamma rays (B) Ultraviolet (C) Blue light (D) Orange light Let's write a program.",
    "output": "gamma_rays=0.0000000000000000001\r\nultraviolet=0.000000000000000001\r\nblue_light=0.00000000000000001\r\norange_light=0.000000000000001\r\nif gamma_rays<ultraviolet:\r\n    if gamma_rays<blue_light:\r\n        if gamma_rays<orange_light:\r\n            print(\"Gamma rays\")\r\n        else:\r\n            print(\"Orange light\")\r    else:\r        print(\"Blue light\")\relse:\r    print(\"Ultraviolet\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "15.0",
    "question": "An electric motor has a label on it that reads: Input: 120V AC, 1.0 Amps, 60 Hz - Efficiency - 75%. At what constant speed can the motor lift up a 6 kg mass?\nAnswer Choices: (A) 0.5 m/s (B) 1.0 m/s (C) 1.5 m/s (D) 2.0 m/s Let's write a program.",
    "output": "input_voltage = 120 # in volts\r\ncurrent = 1.0 # in amps\r\nefficiency = 0.75 # in decimal\r\nmass_to_be_lifted = 6 # in kg\r\n\r\n# calculate the output power of the motor\r\noutput_power = input_voltage * current * efficiency\r\n\r\n# calculate the speed at which the motor can lift up the weight\r\nspeed = output_power / mass_to_be_lifted\r\n\r\n# print the result\r\nprint(speed)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 26, in <module>\n  File \"<string>\", line 10, in run_it\nValueError: math domain error\n",
    "question": "A convex lens of focal length f = 0.2 m is used to examine a small coin lying on a table. During the examination, the lens is held a distance 0.3 m above the coin and is moved slowly to a distance of 0.1 m above the coin. During this process, what happens to the image of the coin?\nAnswer Choices: (A) The image continually increases in size. (B) The image continually decreases in size. (C) The image gets smaller at first and then bigger in size. (D) The image flips over. Let's write a program.",
    "output": "import math\n\n# define the focal length and the distances\nf = 0.2\ndistance1 = 0.3\ndistance2 = 0.1\n\n# calculate the magnifications\nmag1 = 1 / math.sqrt(1 - (distance1/f)**2)\nmag2 = 1 / math.sqrt(1 - (distance2/f)**2)\n\n# determine the order of the magnifications\nif mag1 > mag2:\n    order = 1\nelse:\n    order = 2\n\n# determine the answer based on the order\nif order == 1:\n    answer = 'The image gets smaller at first and then bigger in size.'\nelse:\n    answer = 'The image continually decreases in size.'\n\nprint(answer)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 9, in run_it\nAttributeError: module 'math' has no attribute 'G'\n",
    "question": "The Space Shuttle orbits 300 km above Earth\u2019s surface; Earth\u2019s radius is 6,400 km. What is the gravitational acceleration experienced by the Space Shuttle?\nAnswer Choices: (A) Zero (B) 4.9 m/s^2 (C) 9.8 m/s^2 (D) 8.9 m/s^2 Let's write a program.",
    "output": "import math\n\n# define the variables\nr_space_shuttle = 300 + 6400  # distance of the space shuttle from the center of the earth\nr_earth = 6400  # radius of the earth\n\n# calculate the gravitational acceleration\ng = math.G * math.M_earth / (r_space_shuttle * r_earth)\n\n# print the result\nprint(g)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "B",
    "raw_ans": "1600.0",
    "question": "An astronaut lands on a planet whose mass and radius are each twice that of Earth. If the astronaut weighs 800 N on Earth, how much will he weigh on this planet?\nAnswer Choices: (A) 200 N (B) 400 N (C) 800 N (D) 1600 N Let's write a program.",
    "output": "Earth_mass = 800\r\nEarth_radius = 800\r\n\r\nAstronaut_weight = 800\r\n\r\nnew_radius = 2*Earth_radius\r\nnew_mass = 2*Earth_mass\r\n\r\nnew_weight = (Astronaut_weight/Earth_mass)*new_mass\r\n\r\nprint(new_weight)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "D",
    "raw_ans": "-25.0",
    "question": "Two people, one of mass 100 kg and the other of mass 50 kg, stand facing each other on an ice-covered (essentially frictionless) pond. If the heavier person pushes on the lighter one with a force F, then\nAnswer Choices: (A) the force felt by the heavier person is (-1/2)F (B) the force felt by the person is -2F (C) the magnitude of the acceleration of the lighter person will be half of the magnitude of the acceleration of the heavier person (D) the magnitude of the acceleration of the lighter person will be twice the magnitude of the acceleration of the heavier person Let's write a program.",
    "output": "heavier = 100\nlighter = 50\n\nF = 50\nheavier_feel = -(lighter/heavier)*F\nlighter_feel = (heavier/lighter)*F\n\nprint(heavier_feel)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "gt": "C",
    "err": false,
    "question": "A 30 mF capacitor has 6 millicoulombs of charge on each plate. The energy stored in the capacitor is most nearly\nAnswer Choices: (A) 5.4 \u00d7 10\u201310 J (B) 9.0 \u00d7 10\u20138 J (C) 0.6 J (D) 12.5 J Let's write a program.",
    "output": "Let's use the formula for energy in a capacitor:\nE = 0.5 * C * V^2\nWe have the value of C and the value of charge, so we can calculate the value of V.\nV = Q / C\nQ = 6 mC = 6 * 10^(-3) C\nC = 30 mF = 30 * 10^(-3) F\nV = 6 * 10^(-3) / 30 * 10^(-3) = 0.2\nNow we can substitute the values of C, V and Q in the formula for E.\nE = 0.5 * 30 * 10^(-3) * 0.2^2\nE = 0.6 J\nThe answer is C",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "1.0",
    "question": "Which configuration of battery and resistors will create a circuit with the greatest current?\nAnswer Choices: (A) A high voltage battery with resistors arranged in series (B) A high voltage battery with resistors arranged in parallel (C) A low voltage battery with resistors arranged in series (D) A low voltage battery with resistors arranged in parallel Let's write a program.",
    "output": "import numpy as np\n\n# Define the battery voltage and the resistor values\nbattery_voltage = 10\nresistor_values = np.array([1, 2, 3, 4, 5])\n\n# Calculate the circuit current for each configuration\n# A high voltage battery with resistors arranged in series\ncurrent_series = battery_voltage / np.sum(resistor_values)\n# A high voltage battery with resistors arranged in parallel\ncurrent_parallel = battery_voltage / np.prod(resistor_values)\n# A low voltage battery with resistors arranged in series\ncurrent_low_voltage_series = np.sum(resistor_values) / np.sum(resistor_values)\n# A low voltage battery with resistors arranged in parallel\ncurrent_low_voltage_parallel = np.prod(resistor_values) / np.prod(resistor_values)\n\n# Find the configuration with the greatest current\nmax_current = max(current_series, current_parallel, current_low_voltage_series, current_low_voltage_parallel)\n\nprint(max_current)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "C",
    "raw_ans": "2.023857702507763",
    "question": "A rubber ball (mass = 0.08 kg) is dropped from a height of 3.2 m, and after bouncing off the floor, rises almost to its original height. If the impact time with the floor is measured to be 0.04 s, what average force did the floor exert on the ball?\nAnswer Choices: (A) 0.16 N (B) 0.16 N (C) 0.32 N (D) 0.36 N Let's write a program.",
    "output": "import math\n\n# define the variables\nmass = 0.08\nheight = 3.2\ntime = 0.04\n\n# calculate the velocity after bouncing\nvelocity = math.sqrt(2 * height / time)\n\n# calculate the average force\naverage_force = 2 * mass * velocity\n\nprint(average_force)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "The sphere",
    "question": "Two objects, a sphere and a block of the same mass, are released from rest at the top of an inclined plane. The sphere rolls down the inclined plane without slipping. The block slides down the plane without friction. Which object reaches the bottom of the ramp first?\nAnswer Choices: (A) The sphere, because it gains rotational kinetic energy, but the block does not (B) The sphere, because it gains mechanical energy due to the torque exerted on it, but the block does not (C) The block, because it does not lose mechanical energy due to friction, but the sphere does (D) The block, because it does not gain rotational kinetic energy, but the sphere does Let's write a program.",
    "output": "sphere = 1\nblock = 2\nif sphere == 1:\n  print('The sphere')\nelif sphere == 2:\n  print('The block')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "gt": "C",
    "err": false,
    "question": "Which of the following changes to a double-slit interference experiment would increase the widths of the fringes in the interference pattern that appears on the screen?\nAnswer Choices: (A) Use light of a shorter wavelength. (B) Move the screen closer to the slits. (C) Move the slits closer together. (D) Use light with a lower wave speed. Let's write a program.",
    "output": "def answer(option):\n    if option == 'A':\n        return 'The width of the fringes is inversely proportional to the wavelength of the light. So, using light of a shorter wavelength would increase the widths of the fringes.'\n    elif option == 'B':\n        return 'The width of the fringes is inversely proportional to the distance between the screen and the slits. So, moving the screen closer to the slits would increase the widths of the fringes.'\n    elif option == 'C':\n        return 'The width of the fringes is inversely proportional to the distance between the slits. So, moving the slits closer together would increase the widths of the fringes.'\n    elif option == 'D':\n        return 'The width of the fringes is inversely proportional to the speed of the light. So, using light with a lower wave speed would increase the widths of the fringes.'\n\n\n\nprint(answer('A'))",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "-24.400000000000002",
    "question": "A stone is thrown vertically upward with an initial speed of 5 m/s. What is the velocity of the stone 3 seconds later?\nAnswer Choices: (A) 25 m/s, upward (B) 25 m/s, downward (C) 35 m/s, upward (D) 35 m/s, downward Let's write a program.",
    "output": "initial_speed = 5 # m/s\ntime = 3 # seconds\n\n# The velocity of the stone can be calculated using the formula:\n# v = u + at\n# where u is the initial speed, a is the acceleration (which is equal to the gravitational acceleration), and t is the time.\n# Since the stone is thrown vertically upward, the acceleration is -9.8 m/s^2 (downward).\n\nacceleration = -9.8 # m/s^2\n\n# Calculate the velocity of the stone 3 seconds later.\nvelocity = initial_speed + acceleration * time\n\n# Print the result.\nprint(velocity)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "D",
    "raw_ans": "0\n4",
    "question": "A particle is subjected to a conservative force whose potential energy function is U(x) = (x \u2013 2)3 \u2013 12x where U is given in joules when x is measured in meters. Which of the following represents a position of stable equilibrium?\nAnswer Choices: (A) x = \u20134 (B) x = \u20132 (C) x = 0 (D) x = 4 Let's write a program.",
    "output": "import sympy as sp\n\n# define the variable\nx = sp.symbols('x')\n\n# define the potential energy function\nU = (x - 2)**3 - 12*x\n\n# find the derivative of the potential energy function\nU_prime = sp.diff(U, x)\n\n# find the positions of stable equilibrium\nstable_equilibrium = sp.solve(U_prime, x)\n\n# print the position of stable equilibrium\nfor equilibrium in stable_equilibrium:\n    print(equilibrium)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "A",
    "raw_ans": "2.8802583915552404e-06",
    "question": "An electron (mass = m, charge = -E) is rotated with speed V upwards, in the plane of the page, into a region containing a uniform magnetic field B, that is directed into the plane of the page. Describe the electron's subsequent circular motion.\nAnswer Choices: (A) Clockwise rotation; radius of path = mv/(eB) (B) Counterclockwise rotation; radius of path = mv/(eB) (C) Clockwise rotation; radius of path = eB/(mv) (D) Counterclockwise rotation; radius of path = eB/(mv) Let's write a program.",
    "output": "import math\n\n# define the variables\nm = 9.10938356e-31\nE = 1.60217662e-19\nB = 9.87\nV = 5e6\n\n# calculate the radius of the path\nradius = (m*V)/(E*B)\n\n# calculate the direction of motion\nif radius > 0:\n    direction = 'clockwise'\nelse:\n    direction = 'counterclockwise'\n\n# print the result\nprint(direction + ' rotation; radius of path = ' + str(abs(radius)))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "0.1969615506024416",
    "question": "A ball of mass is attached to a string connected to the ceiling, forming a pendulum. When the string is raised to an angle of 50 degrees below the horizontal (the ceiling) and released, the ball swings back and forth with a period of 0.4 s. Which of the following changes to the pendulum would decrease the period of the pendulum?\nAnswer Choices: (A) Increasing the mass of the ball (B) Decreasing the length of the string (C) Decreasing the angle of the string from the horizontal when released (D) Decreasing the mass of the ball Let's write a program.",
    "output": "import math\n\n# define the variables\nangle = 50  # degrees\nperiod = 0.4  # seconds\n\n# calculate the length of the string\nstring_length = math.sin(math.radians(angle)) * period\n\n# calculate the new period if the angle is decreased\nnew_angle = 40  # degrees\nnew_period = math.sin(math.radians(new_angle)) * string_length\n\n# print the result\nprint(new_period)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": true,
    "gt": "B",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 20, in <module>\n  File \"<string>\", line 12, in run_it\nZeroDivisionError: division by zero\n",
    "question": "What happens to the image formed by a concave mirror as the object is moved from far away to near the focal point?\nAnswer Choices: (A) The image moves away from the mirror and gets shorter. (B) The image moves away from the mirror and gets taller. (C) The image moves toward the mirror and gets shorter. (D) The image moves toward the mirror and gets taller. Let's write a program.",
    "output": "import math\n\n# Define the focal length of a concave mirror\nf = 10  # cm\n\n# Define the distance from the object to the focal point\nd = 10  # cm\n\n# Calculate the image distance using the formula:\n# image distance = (focal length * object distance) / (focal length - object distance)\nimage_distance = (f * d) / (f - d)\n\n# The image moves from the mirror towards the focal point, so the image distance is negative.\n# The image is also shorter, so the height of the image is negative.\n# According to the mirror formula, a negative image distance and height correspond to a virtual image.\n\n# Print the result\nprint(\"The image moves toward the mirror and gets shorter.\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "1.6",
    "question": "A disk of radius 0.1 m initially at rest undergoes an angular acceleration of 2.0 rad/s^2. If the disk only rotates, find the total distance traveled by a point on the rim of the disk in 4.0 s.\nAnswer Choices: (A) 0.4 m (B) 0.8 m (C) 1.2 m (D) 1.6 m Let's write a program.",
    "output": "import math\n\n# define the variables\nradius = 0.1 # in m\nangular_acceleration = 2.0 # in rad/s^2\ntime = 4.0 # in s\n\n# calculate the total distance traveled by a point on the rim of the disk in 4.0 s\n# formula: \u03b8 = \u03b80 + 1/2 * \u03b1 * t^2\n# where, \u03b8 is the angle rotated, \u03b80 is the initial angle, \u03b1 is the angular acceleration, and t is the time\nangle_rotated = 1/2 * angular_acceleration * time**2\n\n# formula: s = r * \u03b8\ntotal_distance_traveled = radius * angle_rotated\n\n# print the result\nprint(total_distance_traveled)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "4.0",
    "question": "A stone is thrown horizontally with an initial speed of 10 m/s from a bridge. Assuming that air resistance is negligible, how long would it take the stone to strike the water 80 m below the bridge?\nAnswer Choices: (A) 1 s (B) 2 s (C) 4 s (D) 8 s Let's write a program.",
    "output": "import math\n\n# define the initial speed and the distance to the water\ninitial_speed = 10\ndistance_to_water = 80\n\n# calculate the time it takes for the stone to reach the water\ntime = math.sqrt(2 * distance_to_water / initial_speed)\n\n# print the time\nprint(time)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "D",
    "err": false,
    "gt": "C",
    "raw_ans": "[]",
    "question": "Which of the following statements about electric and magnetic fields is FALSE:\nAnswer Choices: (A) A charge moving along the direction of an electric field will experience a force, but a charge moving along the direction of a magnetic field will not experience a force. (B) All charges experience a force in an electric field, but only moving charges can experience a force in a magnetic field. (C) A positive charge moves in the direction of an electric field; a positive charge moves perpendicular to a magnetic field. (D) All moving charges experience a force parallel to an electric field and perpendicular to a magnetic field. Let's write a program.",
    "output": "\n\n# define the statements\nstatements = [\n    \"A charge moving along the direction of an electric field will experience a force, but a charge moving along the direction of a magnetic field will not experience a force.\",\n    \"All charges experience a force in an electric field, but only moving charges can experience a force in a magnetic field.\",\n    \"A positive charge moves in the direction of an electric field; a positive charge moves perpendicular to a magnetic field.\",\n    \"All moving charges experience a force parallel to an electric field and perpendicular to a magnetic field.\"\n]\n\n# find the false statement\nfalse_statement = [statement for statement in statements if statement == False]\n\n# print the false statement\nprint(false_statement)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": true,
    "gt": "B",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 8, in run_it\nAttributeError: module 'math' has no attribute 'G'\n",
    "question": "The Space Shuttle orbits 300 km above the Earth\u2019s surface; the Earth\u2019s radius is 6400 km. What is the acceleration due to Earth\u2019s gravity experienced by the Space Shuttle?\nAnswer Choices: (A) 4.9 m/s^2 (B) 8.9 m/s^2 (C) 9.8 m/s^2 (D) 10.8 m/s^2 Let's write a program.",
    "output": "import math\n\n# define the variables\nr_space_shuttle = 300 + 6400  # distance of space shuttle from earth's center in km\n\n# calculate the acceleration due to earth's gravity\na_space_shuttle = math.G * math.M_earth / (r_space_shuttle**2)\n\n# convert the acceleration from km/s^2 to m/s^2\na_space_shuttle_m_s2 = a_space_shuttle * 1000 / 1000\n\n# print the result\nprint(a_space_shuttle_m_s2)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 16, in run_it\nTypeError: list indices must be integers or slices, not Symbol\n",
    "question": "A confined ideal gas undergoes a cyclical process in three steps\u2014an isobaric step, followed by an isochoric step, followed by an isothermal step. Which of the following must be true?\nAnswer Choices: (A) The change in internal energy of the gas is equal to the work done during the isobaric step. (B) The change in internal energy of the gas is equal to the work done during the isobaric step minus the work done during the isothermal step. (C) The total work done during the cycle is positive. (D) The total work done during the cycle is equal but opposite to the net amount of heat transferred. Let's write a program.",
    "output": "from sympy import symbols, Eq, solve\r\n\r\n# internal energy change = work done during isobaric step + work done during isochoric step + work done during isothermal step\r\n# Since work done during isochoric step is zero, internal energy change = work done during isobaric step + 0 + work done during isothermal step\r\n# As the process is cyclical, work done during isobaric step is equal to work done during isothermal step but in opposite direction. So, work done during isothermal step is negative.\r\n# So, internal energy change = work done during isobaric step + work done during isothermal step\r\n\r\n# w = work, q = heat\r\nq_isobaric, q_isothermal, w_isobaric, w_isothermal = symbols('q_isobaric, q_isothermal, w_isobaric, w_isothermal')\r\n\r\neq1 = Eq(q_isobaric+w_isobaric, w_isothermal+q_isothermal)\r\n\r\nanswer = solve(eq1, w_isothermal)\r\n\r\nprint(answer[w_isothermal])",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "A",
    "err": false,
    "question": "A sphere starts from rest atop a hill with a constant angle of inclination and is allowed to roll without slipping down the hill. What force provides the torque that causes the sphere to rotate?\nAnswer Choices: (A) Static friction (B) Kinetic friction (C) The normal force of the hill on the sphere (D) Gravity Let's write a program.",
    "output": "Let's first take the sphere at rest at the top of the hill.\nAs the sphere starts rolling down the hill, the force that provides the torque is the static friction force. This static friction force is responsible for keeping the sphere rolling.\nAs the sphere rolls down the hill, this static friction force acts as a torque and rotates the sphere.\nThe answer is A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "0",
    "question": "A block is dragged along a table and experiences a frictional force, f, that opposes its movement. The force exerted on the block by the table is\nAnswer Choices: (A) zero (B) parallel to the table (C) perpendicular to the table (D) neither parallel nor perpendicular to the table Let's write a program.",
    "output": "block_experience_force=0\r\nprint(block_experience_force)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "C",
    "raw_ans": "",
    "question": "A table supports a wooden block placed on the tabletop. Which fundamental force of nature is responsible for this interaction, and why?\nAnswer Choices: (A) The electric force, because the protons in the nuclei of the top atomic layer of the table repel the nuclei in the bottom atomic layer of the wood. (B) The gravitational force, because by F = GMm/r^2, the force of the table on the wood at that close range is sufficient to balance the force of the Earth on the wood. (C) The electric force, because the outer electrons in the top atomic layer of the table repel the outer electrons in the bottom atomic layer of the wood. (D) The strong nuclear force, because the protons in the nuclei of the top atomic layer of the table repel the nuclei in the bottom atomic layer of the wood. Let's write a program.",
    "output": "table = 1\r\nwood = 2\r\nif table == wood:\r\n    print(\"The electric force, because the protons in the nuclei of the top atomic layer of the table repel the nuclei in the bottom atomic layer of the wood.\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "1.0",
    "question": "Which of the following is NOT equal to one tesla?\nAnswer Choices: (A) 1 J/(A*m^2) (B) 1 kg/(C*s) (C) 1 N/(A*m) (D) 1 A*N/V Let's write a program.",
    "output": "A_N = 1\r\nV = 1\r\nkg = 1\r\nC = 1\r\nN = 1\r\nJ = 1\r\nprint(A_N*V/(kg*C*N))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "A",
    "raw_ans": "0.9",
    "question": "A children\u2019s toy consists of a cart whose very light wheels are attached to a rubber band. This rubber band can wind and unwind around the axle supporting the wheels. This toy is given a shove, after which the toy rolls across a flat surface and up a ramp. It is observed that the toy does not go a consistent distance up the ramp\u2014in some trials it ends up higher than in other trials, even though the shove imparts the same kinetic energy to the cart each time. Which of the following is a reasonable explanation for this phenomenon?\nAnswer Choices: (A) Depending on how the rubber band is initially wound, more or less potential energy can be transferred from the rubber band to the kinetic energy of the car\u2019s motion. (B) The normal force on the cart\u2019s wheels will be different depending on how much the rubber band winds or unwinds. (C) How much energy is transferred from kinetic energy to gravitational potential energy depends on the vertical height at which the cart ends up. (D) Some of the cart\u2019s initial kinetic energy will be dissipated due to work done by friction. Let's write a program.",
    "output": "import numpy as np\n\n# define the initial speed of the cart\ninitial_speed = 10\n\n# define the coefficient of friction\nfriction_coeff = 0.1\n\n# define the height of the ramp\nramp_height = 10\n\n# calculate the total energy the cart has initially\ntotal_initial_energy = 0.5 * initial_speed ** 2\n\n# calculate the energy dissipated due to friction\nenergy_dissipated = total_initial_energy * friction_coeff\n\n# calculate the energy transferred to gravitational potential energy\ngravitational_potential_energy = total_initial_energy - energy_dissipated\n\n# calculate the height the cart will reach on the ramp\nramp_height_reached = gravitational_potential_energy / (0.5 * initial_speed ** 2)\n\n# print the result\nprint(ramp_height_reached)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 295, in execute_code\n    code = black.format_str(code_str, mode=black.FileMode())\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1079, in format_str\n    dst_contents = _format_str_once(src_contents, mode=mode)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1089, in _format_str_once\n    src_node = lib2to3_parse(src_contents.lstrip(), mode.target_versions)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/parsing.py\", line 127, in lib2to3_parse\n    raise exc from None\nblack.parsing.InvalidInput: Cannot parse: 2:20: SecondSecondFall = 4h\n",
    "question": "An object is released from rest and falls a distance h during the first second of time. How far will it fall during the next second of time?\nAnswer Choices: (A) h (B) 2h (C) 3h (D) 4h Let's write a program.",
    "output": "FirstSecondFall = h\nSecondSecondFall = 4h\nprint(SecondSecondFall)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "The linear momentum of the system is not conserved",
    "question": "Two ice skaters are moving on frictionless ice and are about to collide. The 50-kg skater is moving directly west at 4 m/s. The 75-kg skater is moving directly north at 2 m/s. After the collision they stick together. For this scenario, which of the following is true?\nAnswer Choices: (A) The linear momentum of the system is conserved because the net force on the system is nonzero during the collision. (B) Only the kinetic energy of the system is conserved because it is an inelastic collision. (C) Only the kinetic energy of the system is conserved because it is an elastic collision. (D) The linear momentum of the system is conserved because the net force on the system is zero. Let's write a program.",
    "output": "def collide_skaters(m1, v1, m2, v2):\n    # calculate the initial linear momentum\n    p_initial = m1 * v1 + m2 * v2\n    # calculate the final linear momentum\n    p_final = (m1 + m2) * (v1 + v2)\n    # check if the linear momentum is conserved\n    if p_initial == p_final:\n        return True\n    else:\n        return False\n\n# define the masses and velocities\nm1 = 50  # kg\nv1 = 4  # m/s\nm2 = 75  # kg\nv2 = 2  # m/s\n\n# check if the linear momentum is conserved\nconserved = collide_skaters(m1, v1, m2, v2)\n\n# print the result\nif conserved:\n    print(\"The linear momentum of the system is conserved.\")\nelse:\n    print(\"The linear momentum of the system is not conserved.\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in run_it\nNameError: name 'G' is not defined\n",
    "question": "The mass of the Earth is 5.97 \u00d7 10^24 kg. The Moon, whose center is 3.84 \u00d7 10^8 m from the Earth\u2019s center, has mass 7.35 \u00d7 10^22 kg. Which of the following is the best estimate of the gravitational force of the Earth on the Moon?\nAnswer Choices: (A) 10^39 N (B) 10^29 N (C) 10^19 N (D) 10^9 N Let's write a program.",
    "output": "import math\n\n# define the mass of the Earth and the Moon\nmass_Earth = 5.97e24\nmass_Moon = 7.35e22\n\n# define the distance between the Earth and the Moon\ndistance = 3.84e8\n\n# calculate the gravitational force\ngravitational_force = (G * mass_Earth * mass_Moon) / distance**2\n\n# print the result\nprint(gravitational_force)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "-30512.24489795918",
    "question": "An object of volume 2 \u00d7 10^-3 m^3 and weight 6 N is placed into a tank of water, where it floats. What percentage of the object's volume is above the surface of the water?\nAnswer Choices: (A) 12% (B) 30% (C) 60% (D) 70% Let's write a program.",
    "output": "import math\n\n# define the volume of the object and the weight of water\nvolume_of_object = 2 * (10 ** (-3))  # in m^3\nweight_of_water = 6  # in N\n\n# calculate the volume of the water displaced\nvolume_of_water_displaced = weight_of_water / 9.8  # in m^3\n\n# calculate the volume of the object above the surface of the water\nvolume_above_surface = volume_of_object - volume_of_water_displaced  # in m^3\n\n# calculate the percentage of the object's volume that is above the surface of the water\npercentage_above_surface = (volume_above_surface / volume_of_object) * 100  # in %\n\nprint(percentage_above_surface)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "18.0000000000000",
    "question": "The position of an object is given by the equations x = 2.0t^3 + 4.0t + 6.25, where x is in meters and t is in seconds. What is the acceleration of the object at t = 1.50 s?\nAnswer Choices: (A) 6 m/s^2 (B) 12 m/s^2 (C) 18 m/s^2 (D) 24 m/s^2 Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nt = sp.symbols('t')\n\n# define the position equation\nx = 2.0*t**3 + 4.0*t + 6.25\n\n# find the derivative of the position equation\nv = sp.diff(x, t)\n\n# find the derivative of the velocity equation\na = sp.diff(v, t)\n\n# substitute t = 1.50 into the acceleration equation\nacceleration = a.subs(t, 1.50)\n\n# print the result\nprint(acceleration)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": true,
    "gt": "A",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 21, in <module>\n  File \"<string>\", line 11, in run_it\nAttributeError: module 'sympy' has no attribute 'dot'\n",
    "question": "A man stands in an elevator as it begins to ascend. Does the normal force from the floor do work on the man?\nAnswer Choices: (A) Yes, and the work done will be positive. (B) Yes, and the work done will be negative. (C) Yes, but the sign can\u2019t be determined. (D) No. Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nnormal_force, distance = sp.symbols('normal_force distance')\n\n# the normal force is equal to the weight of the man\nnormal_force = sp.symbols('weight')\n\n# the work done by the normal force is the dot product of the normal force and the distance\nwork_done = sp.dot(normal_force, distance)\n\n# substitute the direction of the normal force (upward is positive, downward is negative)\nif sp.sign(normal_force) > 0:\n    work_done = sp.dot(normal_force, distance)\nelse:\n    work_done = sp.dot(normal_force, distance)\n\n# print the result\nprint(work_done)",
    "matching_err": true,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "6.324555320336759",
    "question": "How long would it take a car, starting from rest and accelerating uniformly in a straight line at 5 m/s^2, to cover a distance of 200 m ?\nAnswer Choices: (A) 9.0 s (B) 10.5 s (C) 12.0 s (D) 15.5 s Let's write a program.",
    "output": "import math\n\n# define the parameters\nacceleration = 5 # m/s^2\ndistance = 200 # m\n\n# calculate the time using the formula distance = acceleration * time^2\ntime = math.sqrt(distance / acceleration)\n\n# print the result\nprint(time)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "['vector_sum_of_all_torques_must_equal_zero', 'vector_sum_of_all_forces_must_equal_zero']",
    "question": "Which of the following conditions are necessary for an object to be in static equilibrium? I. The vector sum of all torques on the object must equal zero. II. The vector sum of all forces on the object must equal zero. III. The sum of the object\u2019s potential and kinetic energies must be zero.\nAnswer Choices: (A) I only (B) II only (C) III only (D) I and II only Let's write a program.",
    "output": "object_equilibrium_conditions=['vector_sum_of_all_torques_must_equal_zero','vector_sum_of_all_forces_must_equal_zero']\nprint(object_equilibrium_conditions)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": true,
    "gt": "A",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 15, in run_it\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/sympy/core/relational.py\", line 510, in __bool__\n    raise TypeError(\"cannot determine truth value of Relational\")\nTypeError: cannot determine truth value of Relational\n",
    "question": "A student pushes a puck across a table, moving it from position x = 0 to position x = 0.2 m. After he lets go, the puck continues to travel across the table, coming to rest at position x = 1.2 m. When the puck is at position x = 1.0 m, which of the following is a correct assertion about the net force on the puck?\nAnswer Choices: (A) The net force is in the negative direction, because the puck is moving in the positive direction but slowing down. (B) The net force is down, because the puck is near the Earth, where gravitational acceleration is 10 m/s^2 downward. (C) The net force is in the positive direction, because the student\u2019s push caused the puck to speed up in the positive direction. (D) The net force is zero, because the student\u2019s push in the positive direction must equal the force of friction in the negative direction. Let's write a program.",
    "output": "import sympy as sp\n\n# define the symbols\nx, v = sp.symbols('x v')\n\n# the equation for the velocity of the puck is given by the net force\n# if the puck is moving in the positive direction (v > 0), the net force must be in the positive direction\n# if the puck is moving in the negative direction (v < 0), the net force must be in the negative direction\n\n# at position x = 0, the puck is moving in the positive direction\n# at position x = 1.2, the puck is moving in the negative direction\n\n# the net force is in the positive direction\nif v.subs(x, 0) > 0 and v.subs(x, 1.2) < 0:\n    print('C')\n\n# the net force is in the negative direction\nelif v.subs(x, 0) < 0 and v.subs(x, 1.2) > 0:\n    print('A')\n\n# the net force is zero\nelse:\n    print('D')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "B",
    "raw_ans": "-3*sqrt(2)*qA**2/(2*sqrt(r**2))",
    "question": "Experimenter A uses a very small test charge qo, and experimenter B uses a test charge 2qo to measure an electric field produced by two parallel plates. A finds a field that is\nAnswer Choices: (A) greater than the field found by B (B) the same as the field found by B (C) less than the field found by B (D) either greater or less than the field found by B, depending on the accelerations of the test charges Let's write a program.",
    "output": "import sympy as sp\n\n# define the test charge for experimenter A\nqA = sp.symbols('qA')\n\n# define the test charge for experimenter B\nqB = 2 * qA\n\n# the field found by A is compared to the field found by B\nfield_A = qA ** 2 / sp.sqrt(2 * sp.symbols('r') ** 2)\nfield_B = qB ** 2 / sp.sqrt(2 * sp.symbols('r') ** 2)\n\n# find the difference\ndifference = field_A - field_B\n\n# simplify the difference\ndifference = sp.simplify(difference)\n\n# print the result\nprint(difference)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "0.0",
    "question": "Two objects, A and B, have equal charge and equal mass. Neither body is in motion because the gravitational and electrostatic forces between them are equal. If the mass of Object A is halved, equilibrium will be maintained if\nAnswer Choices: (A) the charge on Object A were doubled (B) the charge on Object B were halved (C) the charge on Object B were doubled (D) the mass on Object B were halved Let's write a program.",
    "output": "from sympy import Eq, Symbol, solve\r\n\r\n# x = charge on object A\r\nx = Symbol('x')\r\neq = Eq((x/2)*.01, x)\r\n\r\nanswer = solve(eq)\r\n\r\nprint(answer[0])",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "22.22222222222222",
    "question": "A 2 \u03bcF capacitor is connected directly to a battery. When the capacitor is fully charged, it stores 600 \u03bcC of charge. An experimenter replaces the 2 \u03bcF capacitor with three 18 \u03bcF capacitors in series connected to the same battery. Once the capacitors are fully charged, what charge is stored on each capacitor?\nAnswer Choices: (A) 100 \u03bcC (B) 200 \u03bcC (C) 600 \u03bcC (D) 1800 \u03bcC Let's write a program.",
    "output": "initial_capacitance = 2\nfinal_capacitance = 3 * 18\ninitial_charge = 600\n\n# The charge on the capacitors connected in series is the same\nfinal_charge = initial_charge * (initial_capacitance / final_capacitance)\n\nprint(final_charge)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "2.0",
    "question": "A particle's kinetic energy is changing at a rate of \u20136.0 J/s when its speed is 3.0 m/s. What is the magnitude of the force on the particle at this moment?\nAnswer Choices: (A) 0.5 N (B) 2.0 N (C) 4.5 N (D) 9.0 N Let's write a program.",
    "output": "kinetic_energy = -6\r\nspeed = 3\r\nforce = abs(kinetic_energy) / speed\r\nprint(force)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "g*m*sin(0.111111111111111*pi) + g*m*cos(0.111111111111111*pi)",
    "question": "A car rounds a banked curve of uniform radius. Three forces act on the car: a friction force between the tires and the road, the normal force from the road, and the weight of the car. Which provides the centripetal force which keeps the car in circular motion?\nAnswer Choices: (A) the friction force alone (B) the normal force alone (C) the weight alone (D) a combination of the normal force and the friction force Let's write a program.",
    "output": "import sympy as sp\n\n# define the symbols\nm = sp.symbols('m')  # mass of the car\nr = sp.symbols('r')  # radius of the curve\ng = sp.symbols('g')  # acceleration due to gravity\n\n# weight of the car is the mass times the acceleration due to gravity\nweight = m * g\n\n# the normal force is the weight times the cosine of the angle\n# the angle is the angle of the banked curve\nnormal_force = weight * sp.cos(sp.rad(180/9))\n\n# the friction force is the weight times the sine of the angle\nfriction_force = weight * sp.sin(sp.rad(180/9))\n\n# which provides the centripetal force which keeps the car in circular motion\n# the centripetal force is the normal force plus the friction force\ncentripetal_force = normal_force + friction_force\n\nprint(centripetal_force)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "C",
    "raw_ans": "30",
    "question": "A stone is thrown horizontally with an initial speed of 30 m/s from a bridge. Find the stone's total speed when it enters the water 4 seconds later, assuming that air resistance is negligible.\nAnswer Choices: (A) 30 m/s (B) 40 m/s (C) 50 m/s (D) 60 m/s Let's write a program.",
    "output": "def find_speed(initial_speed, time):\n    # horizontal speed is constant\n    return initial_speed\n\ninitial_speed = 30\ntime = 4\n\nfinal_speed = find_speed(initial_speed, time)\nprint(final_speed)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "gt": "D",
    "err": false,
    "question": "What happens to the force of gravitational attraction between two small objects if the mass of each object is doubled and the distance between their centers is doubled?\nAnswer Choices: (A) It is doubled. (B) It is quadrupled. (C) It is halved. (D) It remains the same. Let's write a program.",
    "output": "Let's assume the initial mass of one object is 10 and the other object is 20.\nThe initial distance between their centers is 100.\nThe force of gravitational attraction between two small objects is given by the formula:\nF = G * (m1 * m2) / r^2\nSubstituting the given values into the formula, we get:\nF = 6.67 * 10^-11 * (10 * 20) / (100 * 100)\nF = 6.67 * 10^-11 * 200 / 10000\nF = 6.67 * 20 / 100\nF = 1.334\nIf we double the mass of each object to 20 and double the distance between their centers to 200, the force becomes:\nF = 6.67 * 10^-11 * (20 * 20) / (200 * 200)\nF = 6.67 * 400 / 40000\nF = 6.67 / 10\nF = 0.667\nThe force of gravitational attraction is halved.\nThe answer is C.",
    "correct": false
  },
  {
    "ans": "B",
    "gt": "B",
    "err": false,
    "question": "How much current does a 60 W light bulb draw if it operates at a voltage of 120 V ?\nAnswer Choices: (A) 0.25 A (B) 0.5 A (C) 2:00 AM (D) 4:00 AM Let's write a program.",
    "output": "Let's solve the multi-choice question step by step.\nCurrent = Power/Voltage\nCurrent = 60/120 = 0.5 A\nThe answer is B",
    "correct": true
  },
  {
    "ans": "C",
    "err": true,
    "gt": "B",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 15, in run_it\nNameError: name 'A' is not defined\n",
    "question": "What happens to the pressure, P, of an ideal gas if the temperature is increased by a factor of 2 and the volume is increased by a factor of 8 ?\nAnswer Choices: (A) P decreases by a factor of 16. (B) P decreases by a factor of 4. (C) P decreases by a factor of 2. (D) P increases by a factor of 4. Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nP = sp.symbols('P')\n\n# The pressure of an ideal gas is given by the formula P = T*V/R\n# Here, we want to find out what happens if we increase both T and V by a factor of 2 and 8 respectively.\n\n# The new pressure is then P_new = (2*T)*(8*V)/R\n# We can simplify this to P_new = 16*P\n\n# Therefore, the new pressure is 16 times the old pressure.\n\nprint(A)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "C",
    "err": false,
    "question": "A beam of monochromatic light entering a glass window pane from the air will experience a change in\nAnswer Choices: (A) frequency and wavelength (B) frequency and speed (C) speed and wavelength (D) speed only Let's write a program.",
    "output": "Change in wavelength is equal to the change in speed multiplied by the index of refraction.\nChange in wavelength = (Index of refraction * Change in speed)\nThe index of refraction is a constant for a given medium. It is a measure of the speed of light in that medium relative to that in a vacuum. The speed of light in a vacuum is constant and is equal to 299792458 m/s. The speed of light in glass is less than that in a vacuum. Therefore, the index of refraction for glass is less than 1.\nLet's assume the index of refraction is 1/2.\nLet's assume the speed of light in the window pane be 100 m/s.\nThe change in speed = 100 - 299792458 = -299791458 m/s.\nThe change in wavelength = (1/2 * -299791458) = -149895729 m/s.\nTherefore, the change in wavelength is equal to the change in speed multiplied by the index of refraction.\nThe answer is A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 29, in <module>\n  File \"<string>\", line 28, in run_it\nIndexError: list index out of range\n",
    "question": "A rigid, solid container of constant volume holds an ideal gas of volume v1 and temperature T1 and pressure P1. The temperature is increased in an isochoric process. Which of the following is NOT true?\nAnswer Choices: (A) The average speed of the molecules increases. (B) The pressure increases. (C) The kinetic energy of the system increases. (D) The volume increases. Let's write a program.",
    "output": "from sympy import symbols, Eq, solve\r\n\r\n# v1 = volume of the ideal gas\r\nv1 = symbols('v1')\r\n\r\n# temperature increases in an isochoric process\r\n# i.e., volume remains constant\r\n\r\n# equation 1: P1*v1 = R*T1\r\neq1 = Eq(1, 1)\r\n\r\n# equation 2: P2*v1 = R*T2\r\n# as volume remains constant (isochoric process), P2/T2 = P1/T1\r\neq2 = Eq(2, 1)\r\n\r\nanswer = solve((eq1,eq2), (1, 2))\r\n\r\nfor i in range(len(answer)):\r\n    for j in range(len(answer[i])):\r\n        answer[i][j] = str(answer[i][j])\r\n\r\n# The pressure increases.\r\n# Pressure is directly proportional to temperature.\r\n# So, if temperature increases, pressure should increase.\r\n# Therefore, option B is not true.\r\n\r\nprint(answer[0][0])",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "A",
    "raw_ans": "60 Hz is in the lowest range of audible sound",
    "question": "A string of fixed tension and linear mass density is attached to a vibrating speaker. It is observed that a speaker frequency of 60 Hz does not produce standing waves in the string. Which explanation for this phenomenon is correct?\nAnswer Choices: (A) The string length is not a multiple of half the wavelength of the wave. (B) The wave speed on the string is fixed. (C) 60 Hz is in the lowest range of audible sound. (D) The wavelength of the wave produced by the speaker is equal to the speed of waves on the string divided by 60 Hz. Let's write a program.",
    "output": "Tension = 50\r\nMassDensity = 0.001\r\nSpeakerFrequency = 60\r\nWaveSpeed = 100\r\nWaveLength = WaveSpeed/SpeakerFrequency\r\nif WaveLength%2==0:\r\n print(\"The string length is not a multiple of half the wavelength of the wave.\")\r\nelif WaveLength>WaveSpeed:\r\n print(\"The wavelength of the wave produced by the speaker is equal to the speed of waves on the string divided by 60 Hz.\")\r\nelif WaveLength<WaveSpeed:\r\n print(\"60 Hz is in the lowest range of audible sound.\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "gt": "D",
    "err": false,
    "question": "A spherical charge distribution varies with the radius r by the equation \u03c1 = ar, where \u03c1 is the volume charge density and a is a positive constant. The distribution goes out to a radius R. Which of the following is true of the electric field strength due to this charge distribution at a distance r from the center?\nAnswer Choices: (A) It increases as r approaches infinity. (B) It decreases linearly for r > R. (C) It increases linearly for r > R. (D) It increases non-linearly for r < R. Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nr, a = sp.symbols('r a')\n\n# define the charge density function\nrho = a*r\n\n# the electric field strength at a distance r from the center is given by\n# E = 1/(4*pi*e0) * integral(rho, 0, r)\n# where e0 is the permittivity of free space\n# for simplicity, we can ignore e0 and just multiply by 1/4/pi\nE = 1/4/sp.pi * sp.integrate(rho, (r, 0, r))\n\n# we are looking for the behavior of E as r approaches infinity\n# if E increases as r approaches infinity, then the limit as r approaches infinity of E is infinity\n# if E decreases as r approaches infinity, then the limit as r approaches infinity of E is some finite number\n# if E increases non-linearly as r approaches infinity, then the limit as r approaches infinity of E is infinity\n# so, we just need to check if the limit as r approaches infinity of E is infinity\n\nlimit_E = sp.limit(E, r, sp.oo)\n\n# if the limit as r approaches infinity of E is infinity, print A\n# otherwise, print D\nif limit_E is sp.oo:\n    print('A')\nelse:\n    print('D')",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "appears lower than 400 Hz and the frequency decreases as it falls",
    "question": "An alarm whose frequency is 400 Hz is dropped out of a third-floor window. The student who drops it measures the frequency with a very sensitive oscilloscope. The measured frequency\nAnswer Choices: (A) appears higher than 400 Hz and the frequency increase as it falls (B) appears higher than 400 Hz and the frequency decreases as it falls (C) appears lower than 400 Hz and the frequency decreases as it falls (D) appears lower than 400 Hz and the frequency increases as it falls Let's write a program.",
    "output": "AlarmFrequency = 400\r\nStudentMeasuredFrequency = 500\r\nif AlarmFrequency>StudentMeasuredFrequency:\r\n print(\"appears higher than 400 Hz and the frequency increases as it falls\")\r\nelif AlarmFrequency<StudentMeasuredFrequency:\r\n print(\"appears lower than 400 Hz and the frequency decreases as it falls\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "6283.185307179587",
    "question": "Heat is added to a cylindrical aluminum rod of radius Q and length \u2113. The temperature difference between the two ends of the rod varies from 10\u00b0C to 20\u00b0C. What geometric factors will influence the rate heat is transferred along the rod?\nAnswer Choices: (A) Only the length (B) Only the area of the rod (C) Both the length and area (D) Neither the length nor area Let's write a program.",
    "output": "import math\n\n# define the radius and length\nradius = 10\nlength = 20\n\n# calculate the area\narea = math.pi * radius**2\n\n# calculate the rate of heat transfer\nrate = area * length\n\n# print the result\nprint(rate)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "An inverted, virtual image about 20 cm in front of her eyes",
    "question": "Optometrists use a linear scale of lens power, measured in diopters, to prescribe corrective lenses. Sufferers of myopia, or nearsightedness, have difficulty resolving distant objects because the lenses in their eyes are too strong. If a myopic person has a prescription of -5 diopters, what image do her corrective lenses create for distant objects?\nAnswer Choices: (A) An upright, real image about 20 cm in front of her eyes (B) An upright, virtual image about 20 cm in front of her eyes (C) An inverted, real image about 20 cm behind her eyes (D) An inverted, virtual image 5 cm behind her eyes Let's write a program.",
    "output": "lens_power_diopters = -5\r\nimage_size_cm = 20\r\n\r\nif lens_power_diopters < 0:\r\n    print(\"An inverted, virtual image about 20 cm in front of her eyes\")\r\nelse:\r\n    print(\"An upright, virtual image about 20 cm in front of her eyes\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "D",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 18, in run_it\nTypeError: unsupported operand type(s) for /: 'AssumptionKeys' and 'Mul'\n",
    "question": "A nonconducting sphere is given a nonzero net electric charge, +Q, and then brought close to a neutral conducting sphere of the same radius. Which of the following will be true?\nAnswer Choices: (A) An electric field will be induced within the conducting sphere. (B) The conducting sphere will develop a net electric charge of \u2013Q. (C) The spheres will experience an electrostatic attraction. (D) The spheres will experience an electrostatic repulsion. Let's write a program.",
    "output": "from sympy import Q, pi\n\n# Define the radii of the spheres and the charge on the nonconducting sphere\nr1 = r2 = 1  # Assume the spheres have the same radius\nQ_nonconducting = Q  # Assume the nonconducting sphere has a net charge of Q\n\n# The net charge on a conducting sphere is zero\nQ_conducting = 0\n\n# The attraction between the spheres is given by the sum of the energy to bring each sphere to infinity and the energy to assemble the system\n# The energy to bring each sphere to infinity is given by the integral of the electric field from infinity to the sphere's radius\n# The electric field at a distance r from a charge Q is Q/(4*pi*r**2)\n# The energy to assemble the system is given by the integral of the electric field from the sphere's radius to infinity\n# The electric field at a distance r from a charge Q is -Q/(4*pi*r**2)\n# Therefore, the attraction between the spheres is given by Q_nonconducting/(4*pi*r1**2) + Q_conducting/(4*pi*r2**2)\n\nattraction = Q_nonconducting/(4*pi*r1**2) + Q_conducting/(4*pi*r2**2)\n\n# If the attraction is positive, the spheres will experience an electrostatic repulsion\nif attraction > 0:\n    print('D')  # electrostatic repulsion\nelse:\n    print('C')  # electrostatic attraction",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "8*f",
    "question": "A charged particle moves through a magnetic field and experiences a force f. New particles are sent into the same magnetic field. If the new particles have twice the charge, twice the mass, and twice the velocity, the new force would be\nAnswer Choices: (A) 4F (B) 2F (C) F (D) 1/2 F Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nf = sp.symbols('f')\n\n# the new particles have twice the charge, twice the mass, and twice the velocity\n# the force f is proportional to each of these\n# therefore, the new force would be 4*f\nnew_force = 2*2*2*f\n\nprint(new_force)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "0.0",
    "question": "An electric dipole consists of a pair of equal but opposite point charges of magnitude 4.0 nC separated by a distance of 2.0 cm. What is the electric field strength at the point midway between the charges?\nAnswer Choices: (A) 0 (B) 9.0 \u00d7 10^4 V/m (C) 1.8 \u00d7 10^5 V/m (D) 7.2 \u00d7 10^5 V/m Let's write a program.",
    "output": "import math\n\n# define the charges and distance\nq1 = 4.0\nq2 = -4.0\nr = 2.0\n\n# calculate the electric field strength\nE = (q1 + q2) / (4 * math.pi * r**2)\n\n# print the result\nprint(E)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "C",
    "raw_ans": "4.0",
    "question": "Two isolated particles, A and B, are 4 m apart. Particle A has a net charge of 2Q, and B has a net charge of Q. The ratio of the magnitude of the electric force on A to that on B is\nAnswer Choices: (A) 4:01 (B) 2:01 (C) 1:01 (D) 1:02 Let's write a program.",
    "output": "import math\n\n# define the distance between the particles\nr = 4\n\n# define the charges of the particles\nQ_A = 2\nQ_B = 1\n\n# calculate the electric forces on the particles\nF_A = math.pow(Q_A, 2) / (4*math.pi*math.pow(r, 2))\nF_B = math.pow(Q_B, 2) / (4*math.pi*math.pow(r, 2))\n\n# calculate the ratio of the electric forces\nratio = F_A / F_B\n\n# print the ratio\nprint(ratio)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "D",
    "raw_ans": "-10",
    "question": "A rock drops onto a pond with a smooth surface. A few moments later, the wave produced by the rock\u2019s impact arrives at the shore, touching the ankles of a wading child. Which of the following observations provides evidence that the portion of the wave hitting the child\u2019s ankles carries less energy than the wave did when it was first created by the rock\u2019s impact?\nAnswer Choices: (A) The wave is moving more slowly. (B) The wave pulse\u2019s width has become greater. (C) The wave pulse\u2019s width has become smaller. (D) The wave\u2019s height has become smaller. Let's write a program.",
    "output": "import math\n\n# Define the initial energy of the wave\ndef initial_energy(height, width):\n    return height * width\n\n# Define the final energy of the wave\ndef final_energy(height, width):\n    return height * (width + 1)\n\n# Calculate the difference in energy\ndef energy_difference(height, width):\n    return initial_energy(height, width) - final_energy(height, width)\n\n# Test the energy difference for different values of height and width\nheight = 10\nwidth = 10\nprint(energy_difference(height, width))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "-24.999999999999996",
    "question": "Physics students are checking the constant acceleration equations of kinematics by measuring the velocity of a tennis ball that is dropped and falls 6 meters and then passes through a photogate. The predicted velocity is 20% above the velocity measured by the photogate. Which of the following best describes the cause of the large percent difference?\nAnswer Choices: (A) The ball changes its shape while falling. (B) The acceleration of gravity varies as the ball is falling. (C) Air resistance increases the acceleration of the ball. (D) The acceleration of the balls varies with the velocity. Let's write a program.",
    "output": "import math\n\n# define the variables\nheight_measured = 6 # in meters\nheight_predicted = 0.2 # in meters, 20% above the measured height\n\n# calculate the velocity predicted by the model\nvelocity_predicted = math.sqrt(2 * height_predicted / 0.05) # in meters/second, using the formula for the velocity of a falling object\n\n# calculate the velocity measured by the photogate\nvelocity_measured = velocity_predicted / 0.8 # in meters/second, the actual velocity is 20% less than the predicted velocity\n\n# calculate the percent difference\npercent_difference = ((velocity_predicted - velocity_measured) / velocity_predicted) * 100 # in percent\n\n# print the result\nprint(percent_difference)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "D",
    "raw_ans": "-4.0",
    "question": "Mercury orbits the sun in about one-fifth of an Earth year. If 1 AU is defined as the distance from the Earth to the sun, what is the approximate distance between Mercury and the sun?\nAnswer Choices: (A) (1/25) AU (B) (1/9) AU (C) (1/5) AU (D) (1/3) AU Let's write a program.",
    "output": "earth_year = 1\nmercury_year = earth_year/5\nsun_distance = 1 # in AU\n\nmercury_distance = sun_distance - (earth_year/mercury_year)\nprint(mercury_distance)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "D",
    "raw_ans": "0.1019367991845056",
    "question": "The Gravitron is a carnival ride that looks like a large cylinder. People stand inside the cylinder against the wall as it begins to spin. Eventually, it is rotating fast enough that the floor can be removed without anyone falling. Given then the coefficient of friction between a person\u2019s clothing and the wall is \u03bc, the tangential speed is v, and the radius of the ride is R, what is greatest mass that a person can be to safely go on this ride?\nAnswer Choices: (A) \u03bcv^2/(rg) (B) r^2v^2/(\u03bcg) (C) rg/(\u03bcv^2) (D) None of the above. Let's write a program.",
    "output": "import math\n\n# define the variables\nmu, v, R, g = 1, 1, 1, 9.81\n\n# calculate the greatest mass\ngreatest_mass = mu*v**2 / (R*g)\n\n# print the result\nprint(greatest_mass)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "B",
    "err": false,
    "question": "An artificial satellite orbits Earth just above the atmosphere in a circle with constant speed. A small meteor collides with the satellite at point P in its orbit, increasing its speed by 1%, but not changing the instantaneous direction of the satellite\u2019s velocity. Which of the following describes the satellite\u2019s new orbit?\nAnswer Choices: (A) The satellite now orbits in an ellipse, with P as the farthest approach to Earth. (B) The satellite now orbits in an ellipse, with P as the closest approach to Earth. (C) The satellite now orbits in a circle of larger radius. (D) The satellite now orbits in a circle of smaller radius. Let's write a program.",
    "output": "import math\n\n# Define the radius of the original circle\nr_original = 1\n\n# Define the speed increase\nspeed_increase = 0.01\n\n# Calculate the new speed\nr_new = r_original * math.sqrt(1 + speed_increase)\n\n# Calculate the new radius\nr_new = r_original * math.sqrt(1 + speed_increase)\n\n# If the new radius is larger, the orbit is a circle of larger radius\n# If the new radius is smaller, the orbit is a circle of smaller radius\nif r_new > r_original:\n    print('The satellite now orbits in a circle of larger radius.')\nelse:\n    print('The satellite now orbits in a circle of smaller radius.')",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "B",
    "raw_ans": "an average of 10 times, with an rms deviation of about 1.0",
    "question": "The quantum efficiency of a photon detector is 0.1. If 100 photons are sent into the detector, one after the other, the detector will detect photons\nAnswer Choices: (A) an average of 10 times, with an rms deviation of about 4 (B) an average of 10 times, with an rms deviation of about 3 (C) an average of 10 times, with an rms deviation of about 1 (D) an average of 10 times, with an rms deviation of about 0.1 Let's write a program.",
    "output": "import math\n\n# define the parameters\nqe = 0.1\nnum_photons = 100\n\n# calculate the number of photons detected\nnum_detected = num_photons * qe\n\n# calculate the average and rms deviation\naverage = num_detected / 10\nrms_deviation = math.sqrt(average)\n\n# print the result\nprint(\"an average of 10 times, with an rms deviation of about\", rms_deviation)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 17, in run_it\n  File \"<string>\", line 10, in refractive_index\nAttributeError: 'float' object has no attribute 'argmax'\n",
    "question": "White light is normally incident on a puddle of water (index of refraction 1.33). A thin (500 nm) layer of oil (index of refraction 1.5) floats on the surface of the puddle. Of the following, the most strongly reflected wavelength is\nAnswer Choices: (A) 500 nm (B) 550 nm (C) 600 nm (D) 650 nm Let's write a program.",
    "output": "def refractive_index(wavelength):\n    # dispersion relation for water\n    n = 1.33\n    # dispersion relation for oil\n    no = 1.5\n    # calculate the reflection coefficient\n    r = (n**2 - no**2) / (n**2 + no**2)\n    # the most strongly reflected wavelength is the one for which the reflection coefficient is the highest\n    return r.argmax()\n\nwavelengths = [500, 550, 600, 650]\nmax_r = 0\nmax_wavelength = 0\n\nfor wavelength in wavelengths:\n    r = refractive_index(wavelength)\n    if r > max_r:\n        max_r = r\n        max_wavelength = wavelength\n\nprint(max_wavelength)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 2, in run_it\nModuleNotFoundError: No module named 'sympy.physics.thermodynamics'\n",
    "question": "Which of the following is true about any system that undergoes a reversible thermodynamic process?\nAnswer Choices: (A) There are no changes in the internal energy of the system. (B) The temperature of the system remains constant during the process. (C) The entropy of the system and its environment remains unchanged. (D) The entropy of the system and its environment must increase. Let's write a program.",
    "output": "from sympy.physics.thermodynamics import ReversibleProcess\n\n# Any system that undergoes a reversible thermodynamic process\n# must have a constant temperature.\n\n# ReversibleProcess class in sympy.physics.thermodynamics module\n# is used to model a reversible process.\n\n# By default, the temperature of the system and its environment\n# remains constant during the process.\n\nprint(B)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "A",
    "raw_ans": "Excimer laser",
    "question": "The best type of laser with which to do spectroscopy over a range of visible wavelengths is\nAnswer Choices: (A) a dye laser (B) a helium-neon laser (C) an excimer laser (D) a ruby laser Let's write a program.",
    "output": "type = \"Excimer laser\"\nprint(type)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "B",
    "raw_ans": "Nuclear hyperfine coupling",
    "question": "Excited states of the helium atom can be characterized as para- (antiparallel electron spins) and ortho- (parallel electron spins). The observation that an ortho- state has lower energy than the corresponding para- state can be understood in terms of which of the following?\nAnswer Choices: (A) The Heisenberg uncertainty principle (B) The Pauli exclusion principle (C) The Bohr model of the atom (D) Nuclear hyperfine coupling Let's write a program.",
    "output": "import numpy as np\n\n# Define the total spin of the system\ntotal_spin = 2\n\n# Define the spin of the nucleus\nnuclear_spin = 0\n\n# Define the spin of the electron\nelectron_spin = 1/2\n\n# Calculate the total energy of the system\ntotal_energy_para = total_spin**2 + nuclear_spin**2 + electron_spin**2\n\n# Calculate the total energy of the system\ntotal_energy_ortho = total_spin**2 + nuclear_spin**2 - electron_spin**2\n\n# Calculate the difference in energy\nenergy_difference = abs(total_energy_ortho - total_energy_para)\n\n# The observation that an ortho- state has lower energy than the corresponding para- state can be understood in terms of which of the following?\n# The Bohr model of the atom (The Bohr model of the atom incorrectly predicts the spectra of atomic hydrogen.)\n\nanswer = 'Bohr model of the atom' if energy_difference == 0 else 'Nuclear hyperfine coupling'\n\nprint(answer)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "3.5",
    "question": "Which of the following gives the total spin quantum number of the electrons in the ground state of neutral nitrogen (Z = 7)?\nAnswer Choices: (A) 1/2 (B) 1 (C) 3/2 (D) 5/2 Let's write a program.",
    "output": "import math\n\n# number of electrons in Nitrogen\nelectrons = 7\n\n# total spin quantum number for Nitrogen\ntotal_spin = sum([1/2, 1/2, 1/2, 1/2, 1/2, 1/2, 1/2])\n\nprint(total_spin)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "D",
    "raw_ans": "V_0/2",
    "question": "Consider three identical, ideal capacitors. The first capacitor is charged to a voltage and then disconnected from the battery. The other two capacitors, initially uncharged and connected in series, are then connected across the first capacitor. What is the final voltage on the first capacitor?\nAnswer Choices: (A) V_0/5 (B) V_0/3 (C) V_0/2 (D) 2V_0/3 Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nV_0 = sp.symbols('V_0')\n\n# The formula for the voltage on a capacitor is V = Q/C, where Q is the charge and C is the capacitance.\n# Since the three capacitors are identical, the charge on each one is the same. \n# The total charge is the same as the charge on the first capacitor.\n# So, the total charge is Q = V_0*C (where C is the capacitance of each capacitor).\n# If we connect two capacitors in series, the total capacitance is C = C1 + C2.\n# Therefore, the total capacitance is 2C.\n# Now, we can find the final voltage on the first capacitor using the formula V = Q/C.\n\nfinal_voltage = V_0/2\n\nprint(final_voltage)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "-64.0",
    "question": "Protons used in cancer therapy are typically accelerated to about 0.6c. How much work must be done on a particle of mass m in order for it to reach this speed, assuming it starts at rest?\nAnswer Choices: (A) 0.25mc^2 (B) 0.60mc^2 (C) 0.67mc^2 (D) 1.25mc^2 Let's write a program.",
    "output": "import math\n\n# define the speed and mass\nv = 0.6 # speed in c\nm = 1 # mass in kg\n\n# calculate the work\nwork = (v**2 - 1) * m * math.pow(10, 2) # convert speed to m/s\n\n# print the result\nprint(work)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": true,
    "gt": "A",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 295, in execute_code\n    code = black.format_str(code_str, mode=black.FileMode())\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1079, in format_str\n    dst_contents = _format_str_once(src_contents, mode=mode)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1089, in _format_str_once\n    src_node = lib2to3_parse(src_contents.lstrip(), mode.target_versions)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/parsing.py\", line 127, in lib2to3_parse\n    raise exc from None\nblack.parsing.InvalidInput: Cannot parse: 1:17: import debroglie from sympy.physics.debroglie import debroglie\n",
    "question": "De Broglie hypothesized that the linear momentum and wavelength of a free massive particle are related by which of the following constants?\nAnswer Choices: (A) Planck\u2019s constant (B) Boltzmann\u2019s constant (C) The Rydberg constant (D) The speed of light Let's write a program.",
    "output": "import debroglie from sympy.physics.debroglie import debroglie\n\n# define the variables\nm = 1 # mass of the particle\nv = 1 # velocity of the particle\n\n# calculate the wavelength\nwavelength = debroglie(m, v)\n\n# print the result\nprint(wavelength)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "2.0",
    "question": "If the total energy of a particle of mass m is equal to twice its rest energy, then the magnitude of the particle\u2019s relativistic momentum is\nAnswer Choices: (A) mc/2 (B) mc/(2^(1/2)) (C) mc (D) (3^(1/2))mc Let's write a program.",
    "output": "import math\n\n# define the rest energy\nrest_energy = 1\n\n# total energy is twice the rest energy\ntotal_energy = 2 * rest_energy\n\n# calculate the momentum using the formula for relativistic momentum\n# p = mc / sqrt(1 - v^2/c^2)\n# as the particle is at rest, v = 0\n# so, p = mc / sqrt(1 - 0) = mc\n\nmomentum = total_energy * math.sqrt(rest_energy) / rest_energy\n\nprint(momentum)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "14.696938456699073",
    "question": "In the diamond structure of elemental carbon, the nearest neighbors of each C atom lie at the corners of a\nAnswer Choices: (A) square (B) hexagon (C) cube (D) tetrahedron Let's write a program.",
    "output": "import math\n\n# Define the number of neighbors for a single carbon atom in a diamond structure\nnum_neighbors = 4\n\n# Define the distance between each neighbor (assuming the diamond structure is a square lattice)\nneighbor_distance = math.sqrt(2)\n\n# Calculate the volume of the cube that encloses the carbon atom and its neighbors\n# The side length of the cube is the distance between the carbon atom and its neighbor times the square root of 3\nside_length = neighbor_distance * math.sqrt(3)\n\n# The volume of a cube is side length cubed\nvolume = side_length ** 3\n\n# Print the result\nprint(volume)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "D",
    "raw_ans": "1.046150353645401",
    "question": "The coefficient of static friction between a small coin and the surface of a turntable is 0.30. The turntable rotates at 33.3 revolutions per minute. What is the maximum distance from the center of the turntable at which the coin will not slide?\nAnswer Choices: (A) 0.024 m (B) 0.048 m (C) 0.121 m (D) 0.242 m Let's write a program.",
    "output": "import math\n\n# define the variables\ncoefficient_of_static_friction = 0.30\nrotation_speed = 33.3\n\n# calculate the maximum distance\nmax_distance = coefficient_of_static_friction * (2 * math.pi * (rotation_speed / 60))\n\n# print the result\nprint(max_distance)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "gt": "D",
    "err": false,
    "question": "The sign of the charge carriers in a doped semiconductor can be deduced by measuring which of the following properties?\nAnswer Choices: (A) Specific heat (B) Thermal conductivity (C) Electrical resistivity (D) Hall coefficient Let's write a program.",
    "output": "The sign of the charge carriers in a doped semiconductor can be deduced by measuring the Hall coefficient.\nThe Hall coefficient is defined as the ratio of the induced electric field to the magnetic field strength.\nThe direction of the Hall coefficient can determine the nature of the majority charge carriers.\nThe answer is D.",
    "correct": true
  },
  {
    "ans": "A",
    "gt": "B",
    "err": false,
    "question": "The primary source of the Sun\u2019s energy is a series of thermonuclear reactions in which the energy produced is c^2 times the mass difference between\nAnswer Choices: (A) two hydrogen atoms and one helium atom (B) four hydrogen atoms and one helium atom (C) six hydrogen atoms and two helium atoms (D) three helium atoms and one carbon atom Let's write a program.",
    "output": "hydrogen = 1\r\nhelium = 4\r\ncarbon = 6\r\nans = 'A'\r\nprint(ans)",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "A",
    "raw_ans": "True",
    "question": "Electromagnetic radiation provides a means to probe aspects of the physical universe. Which of the following statements regarding radiation spectra is NOT correct?\nAnswer Choices: (A) Lines in the infrared, visible, and ultraviolet regions of the spectrum reveal primarily the nuclear structure of the sample. (B) The wavelengths identified in an absorption spectrum of an element are among those in its emission spectrum. (C) Absorption spectra can be used to determine which elements are present in distant stars. (D) Spectral analysis can be used to identify the composition of galactic dust. Let's write a program.",
    "output": "lines_in_infrared=True\nvisible_and_ultra_violet_region=True\nabsorption_spectra=True\ncomposition_of_galactic_dust=True\nif lines_in_infrared and visible_and_ultra_violet_region and absorption_spectra and composition_of_galactic_dust:\n    print(True)\nelse:\n    print(False)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "D",
    "raw_ans": "fermion",
    "question": "Which of the following statements about bosons and/or fermions is true?\nAnswer Choices: (A) Bosons have symmetric wave functions and obey the Pauli exclusion principle. (B) Bosons have antisymmetric wave functions and do not obey the Pauli exclusion principle. (C) Fermions have symmetric wave functions and obey the Pauli exclusion principle. (D) Fermions have antisymmetric wave functions and obey the Pauli exclusion principle. Let's write a program.",
    "output": "def check_boson_fermion(n):\n    if n % 2 == 0:\n        return 'boson'\n    else:\n        return 'fermion'\n\nprint(check_boson_fermion(1))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "B",
    "raw_ans": "Nuclear hyperfine coupling",
    "question": "Excited states of the helium atom can be characterized as para- (antiparallel electron spins) and ortho- (parallel electron spins). The observation that an ortho- state has lower energy than the corresponding para- state can be understood in terms of which of the following?\nAnswer Choices: (A) The Heisenberg uncertainty principle (B) The Pauli exclusion principle (C) The Bohr model of the atom (D) Nuclear hyperfine coupling Let's write a program.",
    "output": "import numpy as np\n\n# Define the total spin of the system\ntotal_spin = 2\n\n# Define the spin of the nucleus\nnuclear_spin = 0\n\n# Define the spin of the electron\nelectron_spin = 1/2\n\n# Calculate the total energy of the system\ntotal_energy_para = total_spin**2 + nuclear_spin**2 + electron_spin**2\n\n# Calculate the total energy of the system\ntotal_energy_ortho = total_spin**2 + nuclear_spin**2 - electron_spin**2\n\n# Calculate the difference in energy\nenergy_difference = abs(total_energy_ortho - total_energy_para)\n\n# The observation that an ortho- state has lower energy than the corresponding para- state can be understood in terms of which of the following?\n# The Bohr model of the atom (The Bohr model of the atom incorrectly predicts the spectra of atomic hydrogen.)\n\nanswer = 'Bohr model of the atom' if energy_difference == 0 else 'Nuclear hyperfine coupling'\n\nprint(answer)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "0.000375",
    "question": "One end of a horizontal, massless spring is attached to a wall. A mass of 0.30 kg is attached to the other end of the spring and rests on a table. The mass is displaced 0.030 m from its equilibrium position and released. It has a speed of 0.040 m/s as it passes through its equilibrium position. In the absence of friction, what is the total mechanical energy of the system?\nAnswer Choices: (A) 0.24 mJ (B) 0.38 mJ (C) 0.48 mJ (D) 0.75 mJ Let's write a program.",
    "output": "spring_constant = 0.30\ndisplacement = 0.030\nspeed = 0.040\n\n# calculate the potential energy\npotential_energy = 0.5 * spring_constant * displacement**2\n\n# calculate the kinetic energy\nkinetic_energy = 0.5 * 0.30 * speed**2\n\n# calculate the total energy\ntotal_energy = potential_energy + kinetic_energy\n\nprint(total_energy)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "B",
    "raw_ans": "1250000003.335557",
    "question": "A meter stick with a speed of 0.8c moves past an observer. In the observer\u2019s reference frame, how long does it take the stick to pass the observer ?\nAnswer Choices: (A) 1.6 ns (B) 2.5 ns (C) 4.2 ns (D) 6.9 ns Let's write a program.",
    "output": "import math\n\n# define the speed of the meter stick\nspeed = 0.8\n\n# define the speed of light\nc = 2.998e8\n\n# calculate the speed of the meter stick in the observer's reference frame\nspeed_observer = speed * (1 - (speed/c))\n\n# calculate the time it takes for the meter stick to pass the observer\ntime = 1 / speed_observer\n\n# convert the time to nanoseconds\ntime_ns = time * 1e9\n\n# print the result\nprint(time_ns)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "-64.0",
    "question": "Protons used in cancer therapy are typically accelerated to about 0.6c . How much work must be done on a particle of mass m in order for it to reach this speed, assuming it starts at rest?\nAnswer Choices: (A) 0.25mc^2 (B) 0.60mc^2 (C) 0.67mc^2 (D) 1.25mc^2 Let's write a program.",
    "output": "import math\n\n# define the speed and mass\nv = 0.6 # speed in c\nm = 1 # mass in kg\n\n# calculate the work\nwork = (v**2 - 1) * m * math.pow(10, 2) # convert speed to m/s\n\n# print the work\nprint(work)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "Electrons filling inner shell vacancies that are created in the metal atoms",
    "question": "Characteristic X rays, appearing as sharp lines on a continuous background, are produced when high-energy electrons bombard a metal target. Which of the following processes results in the characteristic X rays?\nAnswer Choices: (A) Electrons producing \u010cerenkov radiation (B) Electrons colliding with phonons in the metal (C) Electrons filling inner shell vacancies that are created in the metal atoms (D) Electrons combining with protons to form neutrons Let's write a program.",
    "output": "def xray_production():\n    answer = \"Electrons filling inner shell vacancies that are created in the metal atoms\"\n    return answer\n\nprint(xray_production())",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "3",
    "question": "An atom has filled n = 1 and n = 2 levels. How many electrons does the atom have?\nAnswer Choices: (A) 2 (B) 4 (C) 6 (D) 10 Let's write a program.",
    "output": "n1 = 1\r\nn2 = 2\r\ntotal_electron = n1+n2\r\nprint(total_electron)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "B",
    "raw_ans": "-0.50000000025",
    "question": "Light from a laser falls on a pair of very narrow slits separated by 0.5 micrometer, and bright fringes separated by 1.0 millimeter are observed on a distant screen. If the frequency of the laser light is doubled, what will be the separation of the bright fringes?\nAnswer Choices: (A) 0.25 mm (B) 0.5 mm (C) 1.0 mm (D) 2.0 mm Let's write a program.",
    "output": "import math\n\n# define the variables\nd_slits = 0.5  # micrometer\nd_fringes = 1.0  # millimeter\nf_laser = 2  # gigahertz\n\n# calculate the wavelength of the laser light\nlambda_laser = f_laser * 10**9  # micrometer\n\n# calculate the separation of the bright fringes\n# d_fringes = (lambda_laser * d_slits) / (2 * d_slits - lambda_laser)\nd_fringes = (lambda_laser * d_slits) / (2 * d_slits - lambda_laser)\n\n# print the result\nprint(d_fringes)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "D",
    "err": false,
    "gt": "C",
    "raw_ans": "3000",
    "question": "Assume that the solar flux at Earth\u2019s surface is 1,000 W/m^2 and that the sunlight is normal to a completely reflecting surface with an area of 3 m^2. What is the total radiation force exerted on the surface?\nAnswer Choices: (A) 2 x 10^-6 N (B) 1 x 10^-5 N (C) 2 x 10^-5 N (D) 3 N Let's write a program.",
    "output": "import math\n\n# define the variables\nsolar_flux = 1000  # in W/m^2\narea = 3  # in m^2\n\n# calculate the total radiation force\ntotal_force = solar_flux * area\n\n# print the result\nprint(total_force)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": true,
    "gt": "B",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 18, in run_it\nAttributeError: 'list' object has no attribute 'values'\n",
    "question": "The sign of the charge carriers in a doped semiconductor can be deduced by measuring which of the following properties?\nAnswer Choices: (A) Magnetic susceptibility (B) Hall coefficient (C) Electrical resistivity (D) Thermal conductivity Let's write a program.",
    "output": "from sympy import symbols, Eq, solve\r\n\r\np_D, p_N = symbols('p_D, p_N')  # p_D = hole, p_N = electron\r\n\r\n# equation 1: np = p_D * p_N = 10^6\r\n# n: number of electrons, p: number of holes\r\neq1 = Eq(p_D*p_N, 10**6)\r\n\r\n# equation 2: n^2 + p^2 = 10^12\r\n# total charge carries^2 = n^2 + p^2\r\neq2 = Eq(p_D**2 + p_N**2, 10**12)\r\n\r\n# solve the system of equations\r\nsolution = solve((eq1,eq2), (p_D, p_N))\r\n\r\n# print the sign of the charge carriers\r\nfor i in solution.values():\r\n    if i > 0:\r\n        print('p_D')\r\n    else:\r\n        print('p_N')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": true,
    "gt": "D",
    "raw_ans": "",
    "question": "Which of the following ions CANNOT be used as a dopant in germanium to make an n-type semiconductor?\nAnswer Choices: (A) As (B) P (C) Sb (D) B Let's write a program.",
    "output": "n_type_semiconductor_ions=['As','P','Sb']\r\nB=['B']\r\nfor i in n_type_semiconductor_ions:\r\n    if i in B:\r\n        print(i)\r\n",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "A",
    "err": false,
    "question": "An astronomer observes a very small moon orbiting a planet and measures the moon\u2019s minimum and maximum distances from the planet\u2019s center and the moon\u2019s maximum orbital speed. Which of the following CANNOT be calculated from these measurements?\nAnswer Choices: (A) Mass of the moon (B) Mass of the planet (C) Minimum speed of the moon (D) Period of the orbit Let's write a program.",
    "output": "Let's calculate the rest of the information from the given parameters.\nThe minimum distance of the moon from the planet is (radius of the planet + radius of the moon).\nThe maximum distance of the moon from the planet is (radius of the planet + maximum orbital speed of the moon * time of the orbit).\nThe time of the orbit is (period of the orbit / 2\u03c0).\nThe maximum orbital speed of the moon is (minimum distance of the moon from the planet / time of the orbit).\nThe period of the orbit is (time of the orbit * 2\u03c0).\nThe radius of the planet is (minimum distance of the moon from the planet - maximum distance of the moon from the planet) / 2.\nThe mass of the moon is (minimum distance of the moon from the planet * maximum orbital speed of the moon) / (2\u03c0).\nThe rest of the parameters can be calculated without any problem.\nThe answer is A.",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "B",
    "raw_ans": "-0.3333333333333333",
    "question": "A rod measures 1.00 m in its rest system. How fast must an observer move parallel to the rod to measure its length to be 0.80 m?\nAnswer Choices: (A) 0.50c (B) 0.60c (C) 0.70c (D) 0.80c Let's write a program.",
    "output": "import math\n\n# define the rest length of the rod\nrest_length = 1.00\n\n# define the length of the rod as measured by the observer\nobserved_length = 0.80\n\n# calculate the Lorentz factor\ngamma = math.sqrt(1 - (observed_length/rest_length)**2)\n\n# calculate the speed of the observer\n# for a moving observer, the length of the rod is measured as L = L_0 / gamma\n# so, v = (L - L_0) / (L_0 * gamma)\nspeed = (observed_length - rest_length) / (rest_length * gamma)\n\n# print the speed of the observer\nprint(speed)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "gt": "B",
    "err": false,
    "question": "A proton moves in the +z-direction after being accelerated from rest through a potential difference V. The proton then passes through a region with a uniform electric field E in the +x-direction and a uniform magnetic field B in the +y-direction, but the proton\u2019s trajectory is not affected. If the experiment were repeated using a potential difference of 2V, the proton would then be\nAnswer Choices: (A) deflected in the +x-direction (B) deflected in the -x-direction (C) deflected in the +y-direction (D) deflected in the -y-direction Let's write a program.",
    "output": "import numpy as np\n\n# define the potential difference V\nV = 1  # in units of electron volts\n\n# calculate the proton's speed v in the +z-direction\nv = np.sqrt(2 * V)\n\n# define the electric field E\nE = 1  # in units of volts per meter\n\n# calculate the proton's deflection in the +x-direction\ndeflection_x = v / E\n\n# define the magnetic field B\nB = 1  # in units of tesla\n\n# calculate the proton's deflection in the +y-direction\ndeflection_y = v / B\n\n# the proton's trajectory is not affected if the potential difference is doubled\n# so, the proton would then be deflected in the +x-direction or the +y-direction\nanswer = 'A' if np.isclose(deflection_x, 0, atol=1e-9) else 'C'\n\nprint(answer)",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "-0.625",
    "question": "A magnetic field is directed perpendicular to the plane of a circular coil of area 0.2 m^2 and 250 turns. If the magnetic field is increased from 0.01 T to 0.06 T during a time interval of 0.25 s, the average induced EMF in the coil is\nAnswer Choices: (A) 0.04 V (B) 0.1 V (C) 2.5 V (D) 10 V Let's write a program.",
    "output": "area = 0.2\nturns = 250\ntime = 0.25\n\n# initial and final magnetic field\ninitial_magnetic_field = 0.01\nfinal_magnetic_field = 0.06\n\n# average induced EMF\naverage_induced_emf = (initial_magnetic_field - final_magnetic_field) * area * turns * time\n\nprint(average_induced_emf)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "'potential_difference')\n\nsp.show()",
    "question": "Light of variable frequency shines on the metal surface of a photoelectric tube. Einstein\u2019s theory of the photoelectric effect predicts that the\nAnswer Choices: (A) work function of the metal is proportional to the frequency (B) work function of the metal is proportional to the wavelength (C) current in the tube is a linear function of the wavelength (D) potential difference necessary to stop the emitted electrons is a linear function of the frequency above the threshold frequency Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nfrequency, wavelength = sp.symbols('frequency wavelength')\n\n# given Einstein\u2019s theory of the photoelectric effect predicts that the\n# work function of the metal is proportional to the frequency\nwork_function = 1.1 * frequency\n\n# the current in the tube is a linear function of the wavelength\ncurrent = 10 * wavelength\n\n# potential difference necessary to stop the emitted electrons is a linear function of the frequency above the threshold frequency\npotential_difference = 10 * (frequency - 10)\n\n# plot the results\nsp.plot(work_function, frequency, title='work_function vs frequency', xlabel='frequency', ylabel='work_function')\nsp.plot(current, wavelength, title='current vs wavelength', xlabel='wavelength', ylabel='current')\nsp.plot(potential_difference, frequency, title='potential_difference vs frequency', xlabel='frequency', ylabel='potential_difference')\n\nsp.show()",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "The planets would move in spiral orbits",
    "question": "If the Sun were suddenly replaced by a black hole of the same mass, it would have a Schwarzschild radius of 3,000 m. What effect, if any, would this change have on the orbits of the planets?\nAnswer Choices: (A) The planets would move directly toward the Sun. (B) The planets would move in spiral orbits. (C) The planets would oscillate about their former elliptical orbits. (D) The orbits would remain unchanged. Let's write a program.",
    "output": "import math\n\n# define the mass of the sun and the earth\nmass_sun = 1.989e30\nmass_earth = 5.972e24\n\n# calculate the Schwarzschild radius of the sun\nr_sun = math.sqrt(2 * mass_sun / 3)\n\n# calculate the Schwarzschild radius of the black hole\nr_black_hole = 3000\n\n# calculate the difference in the Schwarzschild radii\ndelta_r = r_sun - r_black_hole\n\n# calculate the effect on the orbits\n# the orbits would remain unchanged if the difference is zero\nif delta_r == 0:\n    print('The orbits would remain unchanged.')\nelse:\n    print('The planets would move in spiral orbits.')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "B",
    "err": false,
    "question": "At 20\u00b0C, a pipe open at both ends resonates at a frequency of 440 hertz. At what frequency does the same pipe resonate on a particularly cold day when the speed of sound is 3 percent lower than it would be at 20\u00b0C ?\nAnswer Choices: (A) 414 Hz (B) 427 Hz (C) 433 Hz (D) 440 Hz Let's write a program.",
    "output": "Let's solve the multi-choice question step by step.\nThe formula for the speed of sound is given by\nSpeed of sound = 331.5 + 0.05(T) m/s\nwhere T is the temperature in Celsius.\nAt 20\u00b0C, the speed of sound is 331.5 + 0.05(20) = 346.5 m/s\nOn a particularly cold day, the speed of sound is 331.5 + 0.05(0) = 331.5 m/s\nLet f be the frequency at the cold day.\nThen, the length of the pipe is given by\n2L = 1/f \u00d7 200/331.5\n= 1/f \u00d7 200/346.5\nf = 440 \u00d7 346.5/200 = 414 Hz\nThe answer is A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "3.0000000000000004 7.0",
    "question": "The quantum efficiency of a photon detector is 0.1. If 100 photons are sent into the detector, one after the other, the detector will detect photons\nAnswer Choices: (A) exactly 10 times (B) an average of 10 times, with an rms deviation of about 0.1 (C) an average of 10 times, with an rms deviation of about 1 (D) an average of 10 times, with an rms deviation of about 3 Let's write a program.",
    "output": "import math\n\n# define the parameters\nqe = 0.1\nnum_photons = 100\n\n# calculate the number of photons detected\nnum_detected = num_photons * qe\n\n# calculate the average number of photons detected\naverage_detected = num_detected * math.sqrt(qe * (1 - qe))\n\n# calculate the rms deviation\nrms_deviation = num_detected - average_detected\n\n# print the result\nprint(average_detected, rms_deviation)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "1.5",
    "question": "A three-dimensional harmonic oscillator is in thermal equilibrium with a temperature reservoir at temperature T. The average total energy of the oscillator is\nAnswer Choices: (A) (1/2) k T (B) kT (C) (3/2) k T (D) 3kT Let's write a program.",
    "output": "import math\n\n# define the temperature\nT = 1  # in units of kT\n\n# calculate the average total energy\naverage_total_energy = (3/2) * T\n\n# print the result\nprint(average_total_energy)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "0.1613743060919757",
    "question": "A student makes 10 one-second measurements of the disintegration of a sample of a long-lived radioactive isotope and obtains the following values: 3, 0, 2, 1, 2, 4, 0, 1, 2, 5. How long should the student count to establish the rate to an uncertainty of 1 percent?\nAnswer Choices: (A) 80 s (B) 160 s (C) 2,000 s (D) 5,000 s Let's write a program.",
    "output": "import math\n\n# The data is a list of one-second measurements\ndata = [3, 0, 2, 1, 2, 4, 0, 1, 2, 5]\n\n# The mean of the data\nmean = sum(data) / len(data)\n\n# The standard deviation of the data\nstddev = math.sqrt(sum([(mean - d)**2 for d in data]) / len(data))\n\n# The rate is the inverse of the mean\nrate = 1 / mean\n\n# The uncertainty is the standard deviation divided by the rate\nuncertainty = stddev / rate\n\n# To get the rate to an uncertainty of 1 percent, the count time should be rate / uncertainty\ncount_time = rate / uncertainty\n\nprint(count_time)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "E",
    "gt": "D",
    "err": false,
    "question": "By definition, the electric displacement current through a surface S is proportional to the\nAnswer Choices: (A) magnetic flux through S (B) rate of change of the magnetic flux through S (C) time integral of the magnetic flux through S (D) rate of change of the electric flux through S Let's write a program.",
    "output": "from sympy import symbols, Eq, solve\r\n\r\n# electric_displacement_current = electric_displacement_current_through_surface\r\n# S = surface\r\n# M = magnetic_flux_through_surface\r\n# t = time\r\n\r\nE = symbols('E')\r\nM = symbols('M')\r\nt = symbols('t')\r\n\r\neq = Eq(E, M)\r\n\r\nanswer = solve(eq)\r\n\r\nprint(answer[0])",
    "correct": false
  },
  {
    "ans": "D",
    "err": true,
    "gt": "A",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 8, in run_it\nAttributeError: 'Symbol' object has no attribute 'mass'\n",
    "question": "The negative muon, mu^-, has properties most similar to which of the following?\nAnswer Choices: (A) Electron (B) Meson (C) Photon (D) Boson Let's write a program.",
    "output": "from sympy import symbols, Eq, solve\r\n\r\n# mu = negative muon, e = electron, p = proton, n = neutron\r\n\r\nmu, e, p, n = symbols('mu e p n')\r\n\r\neq1 = Eq(mu.mass, e.mass)\r\neq2 = Eq(mu.charge, e.charge)\r\neq3 = Eq(mu.spin, e.spin)\r\n\r\nanswer_dict = {'A': e, 'B': p, 'C': n, 'D': mu}\r\n\r\nfor key, value in answer_dict.items():\r\n    if eq1 and eq2 and eq3:\r\n        print(key)\r\n        break",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 2, in run_it\nModuleNotFoundError: No module named 'speed_of_light'\n",
    "question": "The speed of light inside of a nonmagnetic dielectric material with a dielectric constant of 4.0 is\nAnswer Choices: (A) 1.2 x 10^9 m/s (B) 3.0 x 10^8 m/s (C) 1.5 x 10^8 m/s (D) 1.0 x 10^8 m/s Let's write a program.",
    "output": "import speed_of_light\n\n# Define the dielectric constant\ndielectric_constant = 4.0\n\n# Calculate the speed of light\nspeed = speed_of_light.speed_inside_nonmagnetic_material(dielectric_constant)\n\n# Print the speed of light\nprint(speed)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "1.0",
    "question": "The energy from electromagnetic waves in equilibrium in a cavity is used to melt ice. If the Kelvin temperature of the cavity is increased by a factor of two, the mass of ice that can be melted in a fixed amount of time is increased by a factor of\nAnswer Choices: (A) 2 (B) 4 (C) 8 (D) 16 Let's write a program.",
    "output": "import math\n\n# Define the initial temperature and the ratio of energy\ninitial_temperature = 273.15 # Kelvin\nratio_energy = 2\n\n# Calculate the initial energy\ninitial_energy = initial_temperature * ratio_energy\n\n# Calculate the initial mass of ice\ninitial_mass = initial_energy / 100\n\n# Calculate the final mass of ice\nfinal_mass = initial_mass * ratio_energy\n\n# Calculate the increase in mass\nincrease_mass = final_mass - initial_mass\n\n# Calculate the factor by which the mass of ice increases\nfactor_increase = initial_mass / increase_mass\n\nprint(factor_increase)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "D",
    "raw_ans": "2",
    "question": "A resistor in a circuit dissipates energy at a rate of 1 W. If the voltage across the resistor is doubled, what will be the new rate of energy dissipation?\nAnswer Choices: (A) 0.25 W (B) 0.5 W (C) 1 W (D) 4 W Let's write a program.",
    "output": "Resistor = 1\r\nVoltage = 2\r\nPower = Resistor*Voltage\r\nprint(Power)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "B",
    "raw_ans": "6322.000000000001",
    "question": "A gas cell with an optical path length of 10 cm is placed in one arm of a Michelson interferometer. If the light source for the interferometer is a laser with wavelength 632.2 nm, then 100 fringes are counted as the gas cell is evacuated. What is the index of refraction of the original gas?\nAnswer Choices: (A) 1.00063 (B) 1.00032 (C) 1.00016 (D) 0.99968 Let's write a program.",
    "output": "wavelength = 632.2 # in nm\npath_length = 10 # in cm\nfringes = 100\n\n# calculate the index of refraction\nindex_of_refraction = (fringes * 2 * wavelength) / (path_length * 2)\n\nprint(index_of_refraction)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "C",
    "raw_ans": "2.319847438200866e-37",
    "question": "Under certain conditions, a beam of electrons impinging on a crystal surface will diffract and a scattering pattern of the beam can be obtained. What is the approximate kinetic energy of the electrons needed in order to see the pattern? (Assume the lattice spacing of the crystal to be 0.4 nm.)\nAnswer Choices: (A) 0.1 eV (B) 1 eV (C) 10 eV (D) 100 eV Let's write a program.",
    "output": "import math\n\n# define the lattice spacing\na = 0.4 # in nm\n\n# convert the lattice spacing to m\na_in_m = a * 10**(-9)\n\n# calculate the de Broglie wavelength of the electron\nlambda_e = 2*a_in_m / math.pi\n\n# calculate the kinetic energy of the electron\n# E_kin = h^2 / (2*m_e*lambda_e^2)\n# where, h = Planck's constant, m_e = mass of the electron, lambda_e = de Broglie wavelength of the electron\n\nh = 6.626*10**(-34) # in J*s\nm_e = 9.109*10**(-31) # in kg\n\nE_kin = (h**2) / (2*m_e*lambda_e**2)\n\n# convert the energy to eV\nE_kin_in_eV = E_kin / 1.602*10**(-19)\n\nprint(E_kin_in_eV)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "B",
    "err": false,
    "question": "A uniform solid disk starts from rest and rolls down an inclined plane without slipping. After some time, what fraction of the disk\u2019s total kinetic energy is rotational kinetic energy?\nAnswer Choices: (A) 1/4 (B) 1/3 (C) 1/2 (D) 2/3 Let's write a program.",
    "output": "Let's use the formulae for rotational and total kinetic energy:\nRotational: KE = (1/2)I*omega^2\nTotal: KE = (1/2)I*omega^2 + (1/2)mv^2\nHere, v = 0 because the disk starts from rest.\nAfter some time, the disk has both translational and rotational kinetic energy. The fraction of the disk\u2019s total kinetic energy that is rotational kinetic energy is:\n(1/2)I*omega^2 / ((1/2)I*omega^2 + (1/2)mv^2)\nSince I = mr^2 (for a disk, I is the moment of inertia), and v = 0, the fraction is:\n(1/2)I*omega^2 / ((1/2)I*omega^2)\n(1/2)*(1/2)\n1/4\nThe answer is A.",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "B",
    "raw_ans": "76.39437268410977",
    "question": "Blue light of wavelength 480 nanometers is most strongly reflected off a thin film of oil on a glass slide when viewed near normal incidence. Assuming that the index of refraction of the oil is 1.2 and that of the glass is 1.6, what is the minimum thickness of the oil film (other than zero) ?\nAnswer Choices: (A) 150 nm (B) 200 nm (C) 300 nm (D) 400 nm Let's write a program.",
    "output": "import math\n\n# define the wavelength of the light\nwavelength = 480\n\n# define the indices of refraction of the oil and the glass\nindex_oil = 1.2\nindex_glass = 1.6\n\n# The minimum thickness of the oil film is when the light is reflected\n# in the glass-oil-glass sequence. The light is reflected when the phase\n# change due to the light going from the glass to the oil is 0, which\n# occurs when the difference in the indices of refraction is 0.5 (for\n# normal incidence). This gives the minimum thickness of the oil film.\nmin_thickness = (0.5 * wavelength) / math.pi\n\nprint(min_thickness)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "B",
    "raw_ans": "20",
    "question": "A heat pump is to extract heat from an outdoor environment at 7\u00b0C and heat the environment indoors to 27\u00b0C. For each 15,000 J of heat delivered indoors, the smallest amount of work that must be supplied to the heat pump is approximately\nAnswer Choices: (A) 500 J (B) 1,000 J (C) 1,100 J (D) 2,000 J Let's write a program.",
    "output": "heat_pump_work=15000\r\noutdoor_temp=7\r\nindoor_temp=27\r\nheat_pump_work_supplied=indoor_temp-outdoor_temp\r\nprint(heat_pump_work_supplied)\r",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "612",
    "question": "The driver of a police car hears an echo of the car\u2019s siren from a wall toward which the car is moving with a speed of 3.5 m/s. If the speed of sound is 350 m/s and the frequency of the siren is 600 Hz, the driver hears the echo at a frequency nearest to which of the following?\nAnswer Choices: (A) 600 Hz (B) 606 Hz (C) 612 Hz (D) 618 Hz Let's write a program.",
    "output": "speed_of_sound = 350 # m/s\r\nspeed_of_car = 3.5 # m/s\r\nfrequency_of_siren = 600 # Hz\r\n\r\n# Calculate the frequency heard by the driver\r\nfrequency_heard = (speed_of_sound + speed_of_car) * frequency_of_siren / (speed_of_sound - speed_of_car)\r\n\r\n# Since the driver hears the echo at a frequency nearest to which of the following, we round the frequency to the nearest integer\r\nimport math\r\nfrequency_heard = math.floor(frequency_heard)\r\n\r\nprint(frequency_heard)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "3.0",
    "question": "A particle decays in 2.0 ms in its rest frame. If the same particle moves at v=0.60c in the lab frame, how far will it travel in the lab before decaying?\nAnswer Choices: (A) 150 m (B) 288 m (C) 360 m (D) 450 m Let's write a program.",
    "output": "import math\n\n# define the time in rest frame\ntime_rest = 2.0 # in ms\n\n# define the speed of the particle in the lab frame\nspeed_lab = 0.60 # in c\n\n# calculate the time in the lab frame\ntime_lab = time_rest / (1 - speed_lab) # in ms\n\n# calculate the distance travelled by the particle in the lab frame\ndistance_lab = speed_lab * time_lab # in m\n\n# print the result\nprint(distance_lab)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "1.6547005383792515",
    "question": "A tube of water is traveling at 1/2 c relative to the lab frame when a beam of light traveling in the same direction as the tube enters it. What is the speed of light in the water relative to the lab frame? (The index of refraction of water is 4/3.)\nAnswer Choices: (A) 1/2 c (B) 2/3 c (C) 5/6 c (D) 10/11 c Let's write a program.",
    "output": "import math\n\n# define the speed of the tube in the lab frame\ntube_speed_lab = 1/2\n\n# calculate the speed of the tube in the water frame\ntube_speed_water = tube_speed_lab / math.sqrt(4/3)\n\n# the speed of light in the water relative to the lab frame is the speed of light in the water frame plus the speed of the tube in the water frame\nspeed_of_light_water_lab = math.sqrt(4/3) * (1 + tube_speed_water)\n\nprint(speed_of_light_water_lab)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "0.9949874371066174",
    "question": "The rest mass of a particle with total energy 5.0 GeV and momentum 4.9 GeV/c is approximately\nAnswer Choices: (A) 0.1 GeV/c^2 (B) 0.2 GeV/c^2 (C) 0.5 GeV/c^2 (D) 1.0 GeV/c^2 Let's write a program.",
    "output": "import math\n\n# define the total energy and momentum\ntotal_energy = 5.0  # in GeV\nmomentum = 4.9  # in GeV/c\n\n# calculate the rest mass using the formula: m^2 = E^2 - p^2\nrest_mass = math.sqrt(total_energy**2 - momentum**2)\n\n# print the rest mass\nprint(rest_mass)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "B",
    "raw_ans": "1.0",
    "question": "A grating spectrometer can just barely resolve two wavelengths of 500 nm and 502 nm, respectively. Which of the following gives the resolving power of the spectrometer?\nAnswer Choices: (A) 2 (B) 250 (C) 5,000 (D) 10,000 Let's write a program.",
    "output": "def resolving_power(lambda1, lambda2):\n    return (lambda2 - lambda1) / 2\n\nlambda1 = 500\nlambda2 = 502\n\npower = resolving_power(lambda1, lambda2)\nprint(power)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "A",
    "raw_ans": "Excimer laser",
    "question": "The best type of laser with which to do spectroscopy over a range of visible wavelengths is\nAnswer Choices: (A) a dye laser (B) a helium-neon laser (C) an excimer laser (D) a ruby laser Let's write a program.",
    "output": "type = \"Excimer laser\"\nprint(type)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "eigenvalues_Hermitian_operator",
    "question": "The eigenvalues of a Hermitian operator are always\nAnswer Choices: (A) real (B) imaginary (C) degenerate (D) linear Let's write a program.",
    "output": "import sympy as sp\n\n# define the eigenvalues of a Hermitian operator\neigenvalues = sp.symbols('eigenvalues')\n\n# eigenvalues of a Hermitian operator are always real\neigenvalues_Hermitian_operator = sp.symbols('eigenvalues_Hermitian_operator')\n\n# eigenvalues_Hermitian_operator = sp.I*eigenvalues\n\n# print the eigenvalues of a Hermitian operator\nprint(eigenvalues_Hermitian_operator)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "1/2",
    "question": "A net force F_A acts on object A, and a net force F_B acts on object B. The mass of object B is twice the mass of object A, and the acceleration of object B is twice that of object A. Which of the following is true of forces F_A and F_B?\nAnswer Choices: (A) F_B = 1/4 F_A (B) F_B = 1/2 F_A (C) F_B = 2F_A (D) F_B = 4F_A Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nFA = sp.symbols('FA')\n\n# define the equation based on the problem statement\nFB = 2*FA\n\n# calculate the ratio of FA to FB\nratio = FA/FB\n\n# simplify the ratio\nsimplified_ratio = sp.simplify(ratio)\n\n# print the answer\nprint(simplified_ratio)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "gt": "C",
    "err": false,
    "question": "Under ideal conditions, the electric and magnetic fields inside a superconductor are zero. Maxwell\u2019s equations imply that which of the following must be true just outside the surface of the superconductor?\nAnswer Choices: (A) B = 0 (B) B is perpendicular to the surface. (C) B is tangential to the surface. (D) B is time independent. Let's write a program.",
    "output": "import sympy as sp\n\n# Define the variables\nA, B, C, D = sp.symbols('A B C D')\n\n# State the Maxwell's equations\nmaxwell = [sp.Eq(A, 0), sp.Eq(B, 0), sp.Eq(C, 0), sp.Eq(D, 0)]\n\n# Which of the following must be true just outside the surface of the superconductor?\n# (A) B = 0 (B) B is perpendicular to the surface. (C) B is tangential to the surface. (D) B is time independent.\n\n# As per the Maxwell's equations, (A) and (D) are always true. \n# (B) is not necessarily true as the direction of the magnetic field can change depending on the orientation of the superconductor.\n# (C) is not necessarily true as the direction of the electric field can change depending on the orientation of the superconductor.\n\n# Hence, B and C are the correct answers. \n\nanswer = ['B', 'C']\n\nfor i in answer:\n    print(i)",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "0.2",
    "question": "Two students perform an experiment in which they drop a ball from rest from a known height above the ground and measure the speed of the ball just before it strikes the ground. From repeated measurement, the students estimate the uncertainty in the measured speed of the ball to be 10 percent. Which of the following gives the uncertainty in the kinetic energy of the ball? (Assume the uncertainty in the ball\u2019s mass is negligibly small.)\nAnswer Choices: (A) 5% (B) 10% (C) 15% (D) 20% Let's write a program.",
    "output": "import math\n\n# Given\nuncertainty_in_speed = 0.10  # 10 percent\n\n# The speed of the ball is related to its kinetic energy as\n# E_k = 0.5 * m * v^2\n# Since the mass is constant, the relative uncertainty in the energy is twice the uncertainty in the speed\nuncertainty_in_energy = 2 * uncertainty_in_speed\n\n# Print the answer\nprint(uncertainty_in_energy)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "45.00000000000001",
    "question": "A particle is constrained to move in a circle with a 10-meter radius. At one instant, the particle\u2019s speed is 10 meters per second and is increasing at a rate of 10 meters per second squared. The angle between the particle\u2019s velocity and acceleration vectors is\nAnswer Choices: (A) 0\u00b0 (B) 30\u00b0 (C) 45\u00b0 (D) 60\u00b0 Let's write a program.",
    "output": "import math\n\n# define the radius of the circle\nr = 10\n\n# define the speed and rate of increase of speed\nv = 10\na = 10\n\n# calculate the acceleration\na_t = math.sqrt(a**2 + v**2)\n\n# calculate the angle between the velocity and acceleration vectors\ntheta = math.acos(v/a_t)\n\n# print the angle\nprint(math.degrees(theta))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "gt": "D",
    "err": false,
    "question": "If the absolute temperature of a blackbody is increased by a factor of 3, the energy radiated per second per unit area does which of the following?\nAnswer Choices: (A) Decreases by a factor of 81. (B) Decreases by a factor of 9. (C) Increases by a factor of 9. (D) Increases by a factor of 81. Let's write a program.",
    "output": "import math\n\n# define the variables\nT_initial = 1  # initial temperature\nT_final = 3 * T_initial  # final temperature\n\n# calculate the energy radiated per second per unit area at initial and final temperatures\nE_initial = 4 * math.pi * (T_initial ** 4) / (15 * math.pi)\nE_final = 4 * math.pi * (T_final ** 4) / (15 * math.pi)\n\n# calculate the difference\ndiff = E_final - E_initial\n\n# if the difference is positive, the energy increases, otherwise it decreases\nif diff > 0:\n    print('Increases by a factor of 81.')\nelse:\n    print('Decreases by a factor of 81.')",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "D",
    "raw_ans": "-0.625",
    "question": "A magnetic field is directed perpendicular to the plane of a circular coil of area 0.2 m^2 and 250 turns. If the magnetic field is increased from 0.01 T to 0.06 T during a time interval of 0.25 s, the average induced EMF in the coil is\nAnswer Choices: (A) 0.04 V (B) 0.1 V (C) 2.5 V (D) 10 V Let's write a program.",
    "output": "area = 0.2\nturns = 250\ntime = 0.25\n\n# initial and final magnetic field\ninitial_magnetic_field = 0.01\nfinal_magnetic_field = 0.06\n\n# average induced EMF\naverage_induced_emf = (initial_magnetic_field - final_magnetic_field) * area * turns * time\n\nprint(average_induced_emf)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 2, in run_it\nModuleNotFoundError: No module named 'sympy.physics.thermodynamics'\n",
    "question": "Which of the following is true about any system that undergoes a reversible thermodynamic process?\nAnswer Choices: (A) There are no changes in the internal energy of the system. (B) The temperature of the system remains constant during the process. (C) The entropy of the system and its environment remains unchanged. (D) The entropy of the system and its environment must increase. Let's write a program.",
    "output": "from sympy.physics.thermodynamics import ReversibleProcess\n\n# Any system that undergoes a reversible thermodynamic process\n# must have a constant temperature.\n\n# ReversibleProcess class in sympy.physics.thermodynamics module\n# is used to model a reversible process.\n\n# By default, the temperature of the system and its environment\n# remains constant during the process.\n\nprint(B)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "[50, 100, 150, 200, 250]",
    "question": "The first five harmonics produced by an organ pipe open at both ends are 50 Hz, 100 Hz, 150 Hz, 200 Hz, and 250 Hz. Which of the harmonics, if any, will survive once the pipe is closed at one end?\nAnswer Choices: (A) 50 Hz, 150 Hz, and 250 Hz only (B) 100 Hz and 200 Hz only (C) 150 Hz and 250 Hz only (D) None Let's write a program.",
    "output": "pipe_open_both_ends = [50, 100, 150, 200, 250]\r\npipe_closed_one_end = [i for i in pipe_open_both_ends if i%2 == 0]\r\nprint(pipe_closed_one_end)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "A",
    "raw_ans": "1",
    "question": "Electromagnetic radiation emitted from a nucleus is most likely to be in the form of\nAnswer Choices: (A) gamma rays (B) microwaves (C) ultraviolet radiation (D) visible light Let's write a program.",
    "output": "gamma_rays = 1\r\nmicrowaves = 2\r\nultraviolet_rays = 3\r\nvisible_light = 4\r\n\r\nmost_probable = gamma_rays\r\n\r\nprint(most_probable)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "D",
    "raw_ans": "262",
    "question": "An organ pipe, closed at one end and open at the other, is designed to have a fundamental frequency of C (131 Hz). What is the frequency of the next higher harmonic for this pipe?\nAnswer Choices: (A) 44 Hz (B) 196 Hz (C) 262 Hz (D) 393 Hz Let's write a program.",
    "output": "fundamental_frequency = 131\nnext_higher_harmonic = fundamental_frequency * 2\nprint(next_higher_harmonic)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "5",
    "question": "A single-electron atom has the electron in the l = 2 state. The number of allowed values of the quantum number m_l is\nAnswer Choices: (A) 1 (B) 2 (C) 3 (D) 5 Let's write a program.",
    "output": "l=2\r\nm_l=-2,-1,0,1,2\r\nprint(len(m_l))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "A",
    "raw_ans": "2*L_A",
    "question": "Two simple pendulums A and B consist of identical masses suspended from strings of length L_A and L_B, respectively. The two pendulums oscillate in equal gravitational fields. If the period of pendulum B is twice the period of pendulum A, which of the following is true of the lengths of the two pendulums?\nAnswer Choices: (A) L_B = 4L_A (B) L_B = 2L_A (C) L_B = L_A (D) L_B = 1/2 L_A Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nLA, LB = sp.symbols('L_A L_B')\n\n# define the equation\neq = sp.Eq(LB, 2*LA)\n\n# solve the equation\nsolution = sp.solve(eq, LB)\n\n# print the result\nfor sol in solution:\n    print(sol)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "D",
    "err": false,
    "question": "According to the BCS theory, the attraction between Cooper pairs in a superconductor is due to\nAnswer Choices: (A) the weak nuclear force (B) the strong nuclear force (C) vacuum polarization (D) interactions with the ionic lattice Let's write a program.",
    "output": "BCS_theory= \"According to the BCS theory, the attraction between Cooper pairs in a superconductor is due to the strong nuclear force\"\nprint(BCS_theory)",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "B",
    "raw_ans": "-0.3333333333333333",
    "question": "A rod measures 1.00 m in its rest system. How fast must an observer move parallel to the rod to measure its length to be 0.80 m?\nAnswer Choices: (A) 0.50c (B) 0.60c (C) 0.70c (D) 0.80c Let's write a program.",
    "output": "import math\n\n# define the rest length of the rod\nrest_length = 1.00\n\n# define the length of the rod as measured by the observer\nobserved_length = 0.80\n\n# calculate the Lorentz factor\ngamma = math.sqrt(1 - (observed_length/rest_length)**2)\n\n# calculate the speed of the observer\n# for a moving observer, the length of the rod is measured as L = L_0 / gamma\n# so, v = (L - L_0) / (L_0 * gamma)\nspeed = (observed_length - rest_length) / (rest_length * gamma)\n\n# print the speed of the observer\nprint(speed)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "A",
    "raw_ans": "39.5",
    "question": "The energy required to remove both electrons from the helium atom in its ground state is 79.0 eV. How much energy is required to ionize helium (i.e., to remove one electron)?\nAnswer Choices: (A) 24.6 eV (B) 39.5 eV (C) 51.8 eV (D) 54.4 eV Let's write a program.",
    "output": "total_energy_to_remove_both_electrons_from_helium=79\ntotal_electrons_in_helium=2\nenergy_to_remove_one_electron=total_energy_to_remove_both_electrons_from_helium/total_electrons_in_helium\nprint(energy_to_remove_one_electron)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "A",
    "raw_ans": "separated by about the same distances as they are today",
    "question": "At the present time, the temperature of the universe (i.e., the microwave radiation background) is about 3 K. When the temperature was 12 K, typical objects in the universe, such as galaxies, were\nAnswer Choices: (A) one-quarter as distant as they are today (B) one-half as distant as they are today (C) separated by about the same distances as they are today (D) two times as distant as they are today Let's write a program.",
    "output": "temperature = 3\r\ndistance = 12\r\nif temperature == 12:\r\n    print(\"two times as distant as they are today\")\r\nelse:\r\n    print(\"separated by about the same distances as they are today\")",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "A",
    "raw_ans": "1",
    "question": "By definition, the electric displacement current through a surface S is proportional to the\nAnswer Choices: (A) rate of change of the electric flux through S (B) electric flux through S (C) time integral of the magnetic flux through S (D) rate of change of the magnetic flux through S Let's write a program.",
    "output": "from sympy import symbols, Eq, solve\r\n\r\n# electric_displacement_current = electric_displacement_current_through_surface\r\ns = symbols('electric_displacement_current')\r\n\r\neq = Eq(s, 1)\r\n\r\nanswer = solve(eq)\r\n\r\nprint(answer[0])",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "980000.0000000002",
    "question": "The suspension cable of a 1,000 kg elevator snaps, sending the elevator moving downward through its shaft. The emergency brakes of the elevator stop the elevator shortly before it reaches the bottom of the shaft. If the elevator fell a distance of 100 m starting from rest, the heat that the brakes must dissipate to bring the elevator safely to rest is\nAnswer Choices: (A) 100 J (B) 1,000 J (C) 10,000 J (D) 1,000,000 J Let's write a program.",
    "output": "initial_speed = 0 # since the elevator started from rest\nmass = 1000 # mass of the elevator\ndistance = 100 # distance to the bottom of the shaft\n\n# calculate the speed at the bottom of the shaft using the formula v = sqrt(2*g*h)\n# where g is the acceleration due to gravity and h is the distance to the bottom of the shaft\nimport math\ng = 9.8 # acceleration due to gravity\nspeed = math.sqrt(2*g*distance)\n\n# calculate the kinetic energy of the elevator at the bottom of the shaft\nkinetic_energy = 0.5 * mass * speed**2\n\n# the brakes dissipate the kinetic energy of the elevator\nheat = kinetic_energy\n\n# print the result\nprint(heat)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 2, in run_it\nModuleNotFoundError: No module named 'relativistic_doppler'\n",
    "question": "The hydrogen lines observed in the spectrum of the quasar 3C9 are shifted so far into the red that their wavelengths are three times as long as those observed in the light from hydrogen atoms at rest in a laboratory on Earth. If it is assumed that the shift is entirely due to the relative motion of 3C9 and Earth, the relative speed of the quasar is\nAnswer Choices: (A) 2c (B) c (C) 0.8c (D) 0.5c Let's write a program.",
    "output": "from relativistic_doppler import relativistic_doppler\n\n# define the rest wavelength of hydrogen\nlam_rest = 121.57\n\n# since the wavelengths are three times as long as those observed in the light from hydrogen atoms at rest in a laboratory on Earth\n# this means the observed wavelengths are redshifted by a factor of 3\n\n# calculate the relative speed of the quasar\nv = relativistic_doppler(lam_rest, factor=3)\n\nprint(v)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 49, in <module>\n  File \"<string>\", line 16, in run_it\nUnboundLocalError: cannot access local variable 'u1' where it is not associated with a value\n",
    "question": "A 10 kg box slides horizontally without friction at a speed of 1 m/s. At one point, a constant force is applied to the box in the direction of its motion. The box travels 5 m with the constant force applied. The force is then removed, leaving the box with a speed of 2 m/s. Which of the following gives the magnitude of the applied force?\nAnswer Choices: (A) 1 N (B) 2 N (C) 3 N (D) 4 N Let's write a program.",
    "output": "m = 10 # kg\nv1 = 1 # m/s\nv2 = 2 # m/s\nd = 5 # m\n\n# Using the formula, v = u + at\n# Here, u1 = initial speed = v1\n# a1 = constant force applied\n# t1 = time taken to cover distance d\n\n# v1 = u1 + a1*t1\n# u1 = v1 - a1*t1\n\n# Substituting the values\nv1 = u1 + a1*t1\nu1 = v1 - a1*t1\n\n# Now, u1 = u2 + a2*t2\n# Here, u2 = final speed = v2\n# a2 = -a1 (as the force is removed)\n# t2 = time taken to cover distance d\n\n# u2 = u1 + a2*t2\n# u1 = u2 - a2*t2\n\n# Substituting the values\nu2 = u1 - a2*t2\nu1 = u2 + a2*t2\n\n# Now, u1 = u2 (since the box travels 5 m with the constant force applied and final speed is 2 m/s)\n# So, u1 - u2 = 0\n# u1 = v1 - a1*t1\n# u2 = v2 - a2*t2\n# v1 - a1*t1 = v2 - a2*t2\n# a1*t1 = a2*t2 (since u1 - u2 = 0)\n# a1/a2 = t2/t1\n# So, the magnitude of a1 is equal to the magnitude of a2\n\n# Now, u1 = v1 - a1*t1\n# u1 = v1 - a2*t2\n# So, a1*t1 = a2*t2\n# As we have already established that the magnitude of a1 is equal to the magnitude of a2,\n# So, a1 = a2\n# Hence, the magnitude of the applied force is a1 = a2 = 5 (v2 - v1) / d\n\nforce = (v2 - v1) / d\nprint(force)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "B",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 24, in <module>\n  File \"<string>\", line 13, in run_it\nIndexError: list index out of range\n",
    "question": "Two spaceships approach Earth with equal speeds, as measured by an observer on Earth, but from opposite directions. A meterstick on one spaceship is measured to be 60 cm long by an occupant of the other spaceship. What is the speed of each spaceship, as measured by the observer on Earth?\nAnswer Choices: (A) 0.4c (B) 0.5c (C) 0.6c (D) 0.7c Let's write a program.",
    "output": "from sympy import solve, symbols\n\n# x = speed of one spaceship\nx = symbols('x')\n\n# equation = length of the meterstick as measured by an occupant of the other spaceship\n# which is 60 centimeters\nequation = 60\n\n# both spaceships approach Earth with equal speeds\n# so if one spaceship is x, the other will be -x (as it's approaching from the opposite direction)\nresult = solve(equation - x - (-x), x)[0]\n\n# speed is a relative quantity and can't be negative\n# so we take the absolute value\nspeed = abs(result)\n\n# speed of each spaceship, as measured by the observer on Earth\n# is half of the speed as we're considering the speed of one spaceship as x and -x\nreal_speed = speed/2\n\nprint(real_speed)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": false,
    "gt": "C",
    "raw_ans": "981000.0",
    "question": "The suspension cable of a 1,000 kg elevator snaps, sending the elevator moving downward through its shaft. The emergency brakes of the elevator stop the elevator shortly before it reaches the bottom of the shaft. If the elevator fell a distance of 100 m starting from rest, the heat that the brakes must dissipate to bring the elevator safely to rest is\nAnswer Choices: (A) 10,000 J (B) 100,000 J (C) 1,000,000 J (D) 10,000,000 J Let's write a program.",
    "output": "elevator_mass = 1000\r\ndistance_moved = 100\r\ng = 9.81\r\n\r\ntotal_energy = elevator_mass * g * distance_moved\r\n\r\nprint(total_energy)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "electrons do not have many more degrees of freedom than atoms do",
    "question": "The mean kinetic energy of the conduction electrons in metals is ordinarily much higher than kT because\nAnswer Choices: (A) electrons have many more degrees of freedom than atoms do (B) the electrons and the lattice are not in thermal equilibrium (C) the electrons form a degenerate Fermi gas (D) electrons in metals are highly relativistic Let's write a program.",
    "output": "electrons = 1\r\natoms = 2\r\n\r\nif electrons > atoms:\r\n    print('electrons have many more degrees of freedom than atoms do')\r\nelse:\r\n    print('electrons do not have many more degrees of freedom than atoms do')",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "B",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 49, in <module>\n  File \"<string>\", line 16, in run_it\nUnboundLocalError: cannot access local variable 'u1' where it is not associated with a value\n",
    "question": "A 10 kg box slides horizontally without friction at a speed of 1 m/s. At one point, a constant force is applied to the box in the direction of its motion. The box travels 5 m with the constant force applied. The force is then removed, leaving the box with a speed of 2 m/s. Which of the following gives the magnitude of the applied force?\nAnswer Choices: (A) 1 N (B) 2 N (C) 3 N (D) 4 N Let's write a program.",
    "output": "m = 10 # kg\nv1 = 1 # m/s\nv2 = 2 # m/s\nd = 5 # m\n\n# Using the formula, v = u + at\n# Here, u1 = initial speed = v1\n# a1 = constant force applied\n# t1 = time taken to cover distance d\n\n# v1 = u1 + a1*t1\n# u1 = v1 - a1*t1\n\n# Substituting the values\nv1 = u1 + a1*t1\nu1 = v1 - a1*t1\n\n# Now, u1 = u2 + a2*t2\n# Here, u2 = final speed = v2\n# a2 = -a1 (as the force is removed)\n# t2 = time taken to cover distance d\n\n# u2 = u1 + a2*t2\n# u1 = u2 - a2*t2\n\n# Substituting the values\nu2 = u1 - a2*t2\nu1 = u2 + a2*t2\n\n# Now, u1 = u2 (since the box travels 5 m with the constant force applied and final speed is 2 m/s)\n# So, u1 - u2 = 0\n# u1 = v1 - a1*t1\n# u2 = v2 - a2*t2\n# v1 - a1*t1 = v2 - a2*t2\n# a1*t1 = a2*t2 (since u1 - u2 = 0)\n# a1/a2 = t2/t1\n# So, the magnitude of a1 is equal to the magnitude of a2\n\n# Now, u1 = v1 - a1*t1\n# u1 = v1 - a2*t2\n# So, a1*t1 = a2*t2\n# As we have already established that the magnitude of a1 is equal to the magnitude of a2,\n# So, a1 = a2\n# Hence, the magnitude of the applied force is a1 = a2 = 5 (v2 - v1) / d\n\nforce = (v2 - v1) / d\nprint(force)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "'potential_difference')\n\nsp.show()",
    "question": "Light of variable frequency shines on the metal surface of a photoelectric tube. Einstein\u2019s theory of the photoelectric effect predicts that the\nAnswer Choices: (A) work function of the metal is proportional to the frequency (B) work function of the metal is proportional to the wavelength (C) current in the tube is a linear function of the wavelength (D) potential difference necessary to stop the emitted electrons is a linear function of the frequency above the threshold frequency Let's write a program.",
    "output": "import sympy as sp\n\n# define the variables\nfrequency, wavelength = sp.symbols('frequency wavelength')\n\n# given Einstein\u2019s theory of the photoelectric effect predicts that the\n# work function of the metal is proportional to the frequency\nwork_function = 1.1 * frequency\n\n# the current in the tube is a linear function of the wavelength\ncurrent = 10 * wavelength\n\n# potential difference necessary to stop the emitted electrons is a linear function of the frequency above the threshold frequency\npotential_difference = 10 * (frequency - 10)\n\n# plot the results\nsp.plot(work_function, frequency, title='work_function vs frequency', xlabel='frequency', ylabel='work_function')\nsp.plot(current, wavelength, title='current vs wavelength', xlabel='wavelength', ylabel='current')\nsp.plot(potential_difference, frequency, title='potential_difference vs frequency', xlabel='frequency', ylabel='potential_difference')\n\nsp.show()",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 8, in run_it\nNameError: name 'x' is not defined\n",
    "question": "A spring of force constant k is stretched a certain distance. It takes twice as much work to stretch a second spring by half this distance. The force constant of the second spring is\nAnswer Choices: (A) k (B) 2k (C) 4k (D) 8k Let's write a program.",
    "output": "import sympy as sp\n\n# define the variable\nk = sp.symbols('k')\n\n# define the equation\neq = sp.Eq(2*k*x, 2*(k*x/2))\n\n# solve the equation\nsolution = sp.solve(eq, k)\n\n# print the result\nfor sol in solution:\n    if sol == k:\n        print(k)\n    elif sol == 2*k:\n        print(2*k)\n    elif sol == 4*k:\n        print(4*k)\n    else:\n        print(8*k)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "769230769.2307693",
    "question": "An observer O at rest midway between two sources of light at x = 0 and x = 10 m observes the two sources to flash simultaneously. According to a second observer O', moving at a constant speed parallel to the x-axis, one source of light flashes 13 ns before the other. Which of the following gives the speed of O' relative to O?\nAnswer Choices: (A) 0.13c (B) 0.15c (C) 0.36c (D) 0.53c Let's write a program.",
    "output": "import math\n\n# Define the distance between the two sources\nx_distance = 10 # m\n\n# The time difference observed by the second observer O' is\n# x_distance / (c * tan(theta)) = 13 ns\n# where theta is the angle between the x-axis and the line connecting the two sources\n# Since the sources flashed at the same time according to observer O, the angle theta is 45 degrees\n# Therefore, the time difference can be written as x_distance / (c * tan(45)) = 13 ns\n# Solving this equation gives the speed of O' relative to O\n\n# Calculate the speed\nspeed_O_prime_relative_to_O = x_distance / (math.tan(math.radians(45)) * 13 * 10**(-9))\n\nprint(speed_O_prime_relative_to_O)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "A",
    "raw_ans": "4.795922925013113e-11",
    "question": "The surface of the Sun has a temperature close to 6,000 K and it emits a blackbody (Planck) spectrum that reaches a maximum near 500 nm. For a body with a surface temperature close to 300 K, at what wavelength would the thermal spectrum reach a maximum?\nAnswer Choices: (A) 10:00 PM (B) 100 Pm (C) 10 mm (D) 100 mm Let's write a program.",
    "output": "import scipy.constants as const\n\n# define the temperature of the sun and the wavelength at which its spectrum reaches maximum\nT_sun = 6000\nlambda_max_sun = const.h * const.c / const.k / T_sun\n\n# define the temperature of the body\nT_body = 300\n\n# calculate the wavelength at which the body's spectrum reaches maximum\nlambda_max_body = const.h * const.c / const.k / T_body\n\n# convert the wavelength from meters to micrometers\nlambda_max_body_micrometers = lambda_max_body / 10**6\n\n# print the result\nprint(lambda_max_body_micrometers)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": true,
    "gt": "B",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 16, in run_it\n  File \"<string>\", line 16, in <listcomp>\nValueError: math domain error\n",
    "question": "Consider an electron in the n = 4, l = 1 state in hydrogen. Which of the following final states can NOT be reached by an allowed transition?\nAnswer Choices: (A) n = 3, l = 2 (B) n = 3, l = 1 (C) n = 3, l = 0 (D) n = 2, l = 0 Let's write a program.",
    "output": "import math\n\n# define the initial and final states\ninitial_n = 4\ninitial_l = 1\n\n# calculate the initial energy\ninitial_energy = math.sqrt(initial_n**2 - initial_l**2)\n\n# define the possible final states\nfinal_ns = [3, 2, 1, 0]\nfinal_ls = [2, 1, 0]\n\n# calculate the final energy of each possible final state\nfinal_energies = [math.sqrt(final_n**2 - final_l**2) for final_n in final_ns for final_l in final_ls]\n\n# find the energy difference between the initial and final states\nenergy_differences = [abs(initial_energy - final_energy) for final_energy in final_energies]\n\n# find the final states that can NOT be reached by an allowed transition\nnot_allowed_final_states = [final_state for final_state in zip(final_ns, final_ls) if final_state not in allowed_transitions]\n\nprint(not_allowed_final_states)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "5",
    "question": "A single-electron atom has the electron in the l = 2 state. The number of allowed values of the quantum number m_l is\nAnswer Choices: (A) 5 (B) 4 (C) 3 (D) 2 Let's write a program.",
    "output": "l=2\r\nm_l=-2,-1,0,1,2\r\nprint(5)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "612",
    "question": "The driver of a police car hears an echo of the car\u2019s siren from a wall toward which the car is moving with a speed of 3.5 m/s. If the speed of sound is 350 m/s and the frequency of the siren is 600 Hz, the driver hears the echo at a frequency nearest to which of the following?\nAnswer Choices: (A) 588 Hz (B) 594 Hz (C) 600 Hz (D) 612 Hz Let's write a program.",
    "output": "speed_of_sound = 350 # m/s\r\nspeed_of_car = 3.5 # m/s\r\nfrequency_of_siren = 600 # Hz\r\n\r\n# Calculate the frequency of the echo\r\nfrequency_of_echo = (speed_of_sound + speed_of_car) * frequency_of_siren / (speed_of_sound - speed_of_car)\r\n\r\n# The driver hears the echo at a frequency nearest to which of the following?\r\nnearest_frequency = round(frequency_of_echo)\r\n\r\nprint(nearest_frequency)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": true,
    "gt": "A",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 295, in execute_code\n    code = black.format_str(code_str, mode=black.FileMode())\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1079, in format_str\n    dst_contents = _format_str_once(src_contents, mode=mode)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1089, in _format_str_once\n    src_node = lib2to3_parse(src_contents.lstrip(), mode.target_versions)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/parsing.py\", line 127, in lib2to3_parse\n    raise exc from None\nblack.parsing.InvalidInput: Cannot parse: 4:13:     print(A) decreased by a factor of 9\n",
    "question": "The emission spectrum of the doubly ionized lithium atom Li++ (Z = 3, A = 7) is identical to that of a hydrogen atom in which all the wavelengths are\nAnswer Choices: (A) decreased by a factor of 9 (B) decreased by a factor of 49 (C) decreased by a factor of 81 (D) increased by a factor of 9 Let's write a program.",
    "output": "Li_plus_plus_emission_spectrum=7\nHydrogen_atom_emission_spectrum=49\nif Li_plus_plus_emission_spectrum==Hydrogen_atom_emission_spectrum:\n    print(A) decreased by a factor of 9",
    "matching_err": true,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "1.6374211299300055e-13",
    "question": "A photon strikes an electron of mass m that is initially at rest, creating an electron-positron pair. The photon is destroyed and the positron and two electrons move off at equal speeds along the initial direction of the photon. The energy of the photon was\nAnswer Choices: (A) mc^2 (B) 2mc^2 (C) 3mc^2 (D) 4mc^2 Let's write a program.",
    "output": "import math\n\n# define the rest mass of the electron\nm = 9.10938356e-31\n\n# define the speed of light\nc = 299792458\n\n# calculate the energy of the photon\nphoton_energy = 2*m*c**2\n\nprint(photon_energy)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": true,
    "gt": "D",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 295, in execute_code\n    code = black.format_str(code_str, mode=black.FileMode())\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1079, in format_str\n    dst_contents = _format_str_once(src_contents, mode=mode)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/__init__.py\", line 1089, in _format_str_once\n    src_node = lib2to3_parse(src_contents.lstrip(), mode.target_versions)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/ssddata/tongyx/miniconda3/envs/def/lib/python3.11/site-packages/black/parsing.py\", line 127, in lib2to3_parse\n    raise exc from None\nblack.parsing.InvalidInput: Cannot parse: 1:6: Diode laser = 350 nm\n",
    "question": "Which of the following lasers utilizes transitions that involve the energy levels of free atoms?\nAnswer Choices: (A) Diode laser (B) Dye laser (C) Free-electron laser (D) Gas laser Let's write a program.",
    "output": "Diode laser = 350 nm\r\nDye laser = 400 nm\r\nFree-electron laser = 100 nm\r\nGas laser = 100 nm\r\n\r\nlaser = ['Diode', 'Dye', 'Free-electron', 'Gas']\r\n\r\nindex = 0\r\n\r\nwhile index < 4:\r\n  if laser[index] == 'Gas':\r\n    print(laser[index])\r\n    break\r\n  index += 1",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "D",
    "raw_ans": "50.000000000000014",
    "question": "Unpolarized light is incident on a pair of ideal linear polarizers whose transmission axes make an angle of 45q with each other. The transmitted light intensity through both polarizers is what percentage of the incident intensity?\nAnswer Choices: (A) 100% (B) 75% (C) 50% (D) 25% Let's write a program.",
    "output": "import math\n\n# define the angle between the polarizers\nangle = 45\n\n# calculate the intensity of the transmitted light\n# the formula for the intensity of light after passing through a polarizer is I = cos^2(theta)\n# where theta is the angle between the light and the polarizer's axis\n# since we have two polarizers, the total intensity of the transmitted light is the square of the intensity of the light after passing through one polarizer\n# therefore, I = (cos^2(theta))^2\n\nI = math.cos(math.radians(angle))**2\n\n# calculate the percentage of the transmitted light intensity with respect to the incident intensity\n# the incident intensity is 1, so the percentage is 100 times the transmitted light intensity\n\npercentage = 100 * I\n\nprint(percentage)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "D",
    "raw_ans": "0.7071067811865475",
    "question": "Sound waves moving at 350 m/s diffract out of a speaker enclosure with an opening that is a long rectangular slit 0.14 m across. At about what frequency will the sound first disappear at an angle of 45q from the normal to the speaker face?\nAnswer Choices: (A) 500 Hz (B) 1,750 Hz (C) 2,750 Hz (D) 3,500 Hz Let's write a program.",
    "output": "import math\n\n# define the parameters\nspeed_of_sound = 350  # m/s\nslit_width = 0.14  # m\nangle = 45  # degrees\n\n# convert angle to radians\nangle_rad = math.radians(angle)\n\n# calculate the wavelength of the sound wave\nwavelength = speed_of_sound / math.sin(angle_rad)\n\n# calculate the frequency of the sound wave\nfrequency = speed_of_sound / wavelength\n\n# print the result\nprint(frequency)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "A",
    "err": false,
    "question": "The emission spectrum of the doubly ionized lithium atom Li++ (Z = 3, A = 7) is identical to that of a hydrogen atom in which all the wavelengths are\nAnswer Choices: (A) decreased by a factor of 9 (B) decreased by a factor of 49 (C) decreased by a factor of 81 (D) increased by a factor of 9 Let's write a program.",
    "output": "Li_plus_plus_emission_spectrum=7\nHydrogen_atom_emission_spectrum=49\n#The emission spectrum of the doubly ionized lithium atom Li++ (Z = 3, A = 7) is identical to that of a hydrogen atom in which all the wavelengths are\n#decreased by a factor of 49\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "correct": true
  },
  {
    "ans": "A",
    "gt": "B",
    "err": false,
    "question": "A uniform solid disk starts from rest and rolls down an inclined plane without slipping. After some time, what fraction of the disk\u2019s total kinetic energy is rotational kinetic energy?\nAnswer Choices: (A) 1/4 (B) 1/3 (C) 1/2 (D) 2/3 Let's write a program.",
    "output": "Let's use the formulae for rotational and total kinetic energy:\nRotational: KE = (1/2)I*omega^2\nTotal: KE = (1/2)I*omega^2 + (1/2)mv^2\nHere, v = 0 because the disk starts from rest.\nAfter some time, the disk has both translational and rotational kinetic energy. The fraction of the disk\u2019s total kinetic energy that is rotational kinetic energy is:\n(1/2)I*omega^2 / ((1/2)I*omega^2 + (1/2)mv^2)\nSince I = mr^2 (for a disk, I = 1/2*m*r^2),\n(1/2)(1/2*m*r^2)*omega^2 / ((1/2)(1/2*m*r^2)*omega^2 + (1/2)mv^2)\n(1/4)*m*r^2*omega^2 / ((1/4)*m*r^2*omega^2 + (1/2)mv^2)\n(1/4)*omega^2 / ((1/4)*omega^2 + (1/2)v^2)\n(1/4) / ((1/4) + (1/2)v^2)\n(1/4) / ((1/4) + (1/2)*(0)^2)\n(1/4) / (1/4)\nThe answer is A.",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "C",
    "raw_ans": "0.5",
    "question": "The speed of light inside of a nonmagnetic dielectric material with a dielectric constant of 4.0 is\nAnswer Choices: (A) 1.2 * 10^9 m/s (B) 3.0 * 10^8 m/s (C) 1.5 * 10^8 m/s (D) 1.0 * 10^8 m/s Let's write a program.",
    "output": "import math\n\n# define the dielectric constant\nepsilon = 4.0\n\n# the speed of light inside a nonmagnetic dielectric material is given by the formula:\n# v = 1 / sqrt(epsilon * mu) where mu is the permeability of the material\n# Since we are dealing with a nonmagnetic dielectric material, we can assume that mu = 1 (the permeability of free space)\n# Therefore, the speed of light is given by:\n\nv = 1 / math.sqrt(epsilon)\n\nprint(v)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "D",
    "err": false,
    "gt": "A",
    "raw_ans": "0.405",
    "question": "A 3-microfarad capacitor is connected in series with a 6-microfarad capacitor. When a 300-volt potential difference is applied across this combination, the total energy stored in the two capacitors is\nAnswer Choices: (A) 0.09 J (B) 0.18 J (C) 0.27 J (D) 0.41 J Let's write a program.",
    "output": "import math\n\n# define the capacitances and potential difference\nc1 = 3e-6\nc2 = 6e-6\nv = 300\n\n# calculate the total energy\ntotal_energy = (c1 + c2) * v**2 / 2\n\nprint(total_energy)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "C",
    "raw_ans": "2.319847438200866e-37",
    "question": "Under certain conditions, a beam of electrons impinging on a crystal surface will diffract and a scattering pattern of the beam can be obtained. What is the approximate kinetic energy of the electrons needed in order to see the pattern? (Assume the lattice spacing of the crystal to be 0.4 nm.)\nAnswer Choices: (A) 0.1 eV (B) 1 eV (C) 10 eV (D) 100 eV Let's write a program.",
    "output": "import math\n\n# define the lattice spacing\na = 0.4 # in nm\n\n# convert the lattice spacing to m\na_in_m = a * 10**(-9)\n\n# calculate the de Broglie wavelength of the electron\nlambda_e = 2*a_in_m / math.pi\n\n# calculate the kinetic energy of the electron\n# E_kin = h^2 / (2*m_e*lambda_e^2)\n# where, h = Planck's constant, m_e = mass of the electron, lambda_e = de Broglie wavelength of the electron\n\nh = 6.626*10**(-34) # in J*s\nm_e = 9.109*10**(-31) # in kg\n\nE_kin = (h**2) / (2*m_e*lambda_e**2)\n\n# convert the energy to eV\nE_kin_in_eV = E_kin / 1.602*10**(-19)\n\nprint(E_kin_in_eV)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "C",
    "err": false,
    "gt": "C",
    "raw_ans": "1.4142135623730951",
    "question": "Two identical satellites, A and B, are in circular orbits around Earth. The orbital radius of A is twice that of B. Which of the following gives the ratio of the angular momentum of A to the angular momentum of B?\nAnswer Choices: (A) 4 (B) 2 (C) sqrt(2) (D) 1/sqrt(2) Let's write a program.",
    "output": "import math\n\n# define the ratio of the orbital radius of A to B\nradius_ratio = 2\n\n# the angular momentum of a satellite is given by L = sqrt(G*M*r)\n# where G is the gravitational constant, M is the mass of the satellite,\n# and r is the orbital radius. Since the satellites are identical, their\n# masses are equal. Therefore, the ratio of their angular momenta is the\n# square root of the ratio of their orbital radii.\nangular_momentum_ratio = math.sqrt(radius_ratio)\n\nprint(angular_momentum_ratio)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "C",
    "err": false,
    "gt": "D",
    "raw_ans": "20.0",
    "question": "An object is thrown horizontally from the open window of a building. If the initial speed of the object is 20 m/s and it hits the ground 2.0 s later, from what height was it thrown? (Neglect air resistance and assume the ground is level.)\nAnswer Choices: (A) 4.9 m (B) 9.8 m (C) 10.0 m (D) 19.6 m Let's write a program.",
    "output": "initial_speed = 20 # m/s\r\ntime = 2 # seconds\r\n\r\n# horizontal distance traveled is the speed times the time\r\nhorizontal_distance = initial_speed * time\r\n\r\n# height of the window is the horizontal distance divided by 2\r\nheight = horizontal_distance / 2\r\n\r\nprint(height)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "C",
    "raw_ans": "0.0",
    "question": "In a nonrelativistic, one-dimensional collision, a particle of mass 2m collides with a particle of mass m at rest. If the particles stick together after the collision, what fraction of the initial kinetic energy is lost in the collision?\nAnswer Choices: (A) 0 (B) 1/4 (C) 1/3 (D) 1/2 Let's write a program.",
    "output": "def lost_energy(m1, m2):\n    # Initial kinetic energy\n    E_initial = 0.5 * (m1 + m2)\n\n    # Final kinetic energy\n    E_final = 0.5 * (m1 + m2)\n\n    # Fraction of lost energy\n    fraction_lost = (E_initial - E_final) / E_initial\n\n    return fraction_lost\n\nprint(lost_energy(2, 1))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": true,
    "gt": "C",
    "raw_ans": "Traceback (most recent call last):\n  File \"/path/to/project/home/src/utils.py\", line 306, in execute_code\n    exec(code, globals(), locals())\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 17, in run_it\n  File \"<string>\", line 10, in refractive_index\nAttributeError: 'float' object has no attribute 'argmax'\n",
    "question": "White light is normally incident on a puddle of water (index of refraction 1.33). A thin (500 nm) layer of oil (index of refraction 1.5) floats on the surface of the puddle. Of the following, the most strongly reflected wavelength is\nAnswer Choices: (A) 500 nm (B) 550 nm (C) 600 nm (D) 650 nm Let's write a program.",
    "output": "def refractive_index(wavelength):\n    # dispersion relation for water\n    n = 1.33\n    # dispersion relation for oil\n    no = 1.5\n    # calculate the reflection coefficient\n    r = (n**2 - no**2) / (n**2 + no**2)\n    # the most strongly reflected wavelength is the one for which the reflection coefficient is the highest\n    return r.argmax()\n\nwavelengths = [500, 550, 600, 650]\nmax_r = 0\nmax_wavelength = 0\n\nfor wavelength in wavelengths:\n    r = refractive_index(wavelength)\n    if r > max_r:\n        max_r = r\n        max_wavelength = wavelength\n\nprint(max_wavelength)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "B",
    "err": false,
    "gt": "A",
    "raw_ans": "8.510999444454378e-11",
    "question": "A nonrelativistic particle with a charge twice that of an electron moves through a uniform magnetic field. The field has a strength of \u03c0/4 tesla and is perpendicular to the velocity of the particle. What is the particle\u2019s mass if it has a cyclotron frequency of 1,600 hertz?\nAnswer Choices: (A) 2.5 * 10^-23 kg (B) 1.2 * 10^-22 kg (C) 3.3 * 10^-22 kg (D) 5.0 * 10^-21 kg Let's write a program.",
    "output": "import math\n\n# define the variables\nB = math.pi/4  # magnetic field in tesla\nq = 2*1.60217662e-19  # charge of the particle in coulombs\nf = 1600  # cyclotron frequency in hertz\n\n# calculate the speed of the particle using the cyclotron frequency\nv = 2*math.pi*f/B\n\n# calculate the mass of the particle using the Lorentz force equation\nm = q*v**2/B**2\n\n# print the result\nprint(m)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": false
  },
  {
    "ans": "A",
    "gt": "B",
    "err": false,
    "question": "An airplane drops a payload while traveling due north, parallel to the ground, at a constant speed of 100 m/s. If air resistance is neglected, what is the velocity of the payload relative to the plane 4.0 s after it is released?\nAnswer Choices: (A) 0 (B) 40 m/s down (C) 80 m/s down (D) 100 m/s north and 40 m/s down Let's write a program.",
    "output": "The velocity of the payload relative to the plane is given by\nv_rel = v_plane - v_payload\nwhere v_plane is the velocity of the plane and v_payload is the velocity of the payload.\nSince the plane is moving north at a constant speed of 100 m/s, the velocity of the payload relative to the plane is\nv_rel = 100 m/s - 0 m/s = 100 m/s\nAfter 4 seconds, the velocity of the payload relative to the plane is\nv_rel = 100 m/s - (100 m/s)(4 s / 4.0 s)\nv_rel = 100 m/s - 100 m/s = 0 m/s\nThe answer is A.",
    "correct": false
  },
  {
    "ans": "A",
    "err": false,
    "gt": "A",
    "raw_ans": "-0.9",
    "question": "Positronium is an atom formed by an electron and a positron (antielectron). It is similar to the hydrogen atom, with the positron replacing the proton. If a positronium atom makes a transition from the state with n=3 to a state with n=1, the energy of the photon emitted in this transition is closest to\nAnswer Choices: (A) 6.0 e (B) 6.8 eV (C) 12.2 eV (D) 13.6 eV Let's write a program.",
    "output": "import math\n\n# define the formula for energy of a photon\ndef photon_energy(n1, n2):\n    R = 1 # Rydberg constant\n    return R * (1/n1**2 - 1/n2**2)\n\n# initial and final states\nn1 = 3\nn2 = 1\n\n# calculate the energy of the photon\nenergy = photon_energy(n1, n2)\n\n# print the result\nprint(round(energy, 1))",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  },
  {
    "ans": "D",
    "err": false,
    "gt": "D",
    "raw_ans": "6.283185307179586",
    "question": "A satellite of mass m orbits a planet of mass M in a circular orbit of radius R. The time required for one revolution is\nAnswer Choices: (A) independent of M (B) proportional to m^(1/2) (C) linear in R (D) proportional to R^(3/2) Let's write a program.",
    "output": "import math\n\n# define the variables\nm = 1 # mass of the satellite\nM = 1 # mass of the planet\nR = 1 # radius of the circular orbit\n\n# calculate the time required for one revolution\nT = 2*math.pi*R/math.sqrt(M*m)\n\n# print the result\nprint(T)",
    "matching_err": false,
    "matching_strategy": "self||A",
    "correct": true
  }
]